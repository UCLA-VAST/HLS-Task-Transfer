digraph "CFG for '_ZL59p_ZN2xf9rb_kernelI7ap_uintILi8EELi5EEEPA5_7ap_uintILi8EEi_1PA5_7ap_uintILi8EEi' function" {
	label="CFG for '_ZL59p_ZN2xf9rb_kernelI7ap_uintILi8EELi5EEEPA5_7ap_uintILi8EEi_1PA5_7ap_uintILi8EEi' function";

	Node0x2970450 [shape=record,label="{%0:\l  %1 = alloca i32, align 4\l  %2 = alloca [5 x %class.ap_uint.0]*, align 8\l  %3 = alloca i32, align 4\l  %t1 = alloca i16, align 2\l  %4 = alloca %class.ap_int.6, align 1\l  %5 = alloca %class.ap_int, align 1\l  %6 = alloca %class.ap_uint.0, align 1\l  %7 = alloca %class.ap_uint.0, align 1\l  %8 = alloca %class.ap_uint.0, align 1\l  %9 = alloca i24\l  %10 = alloca %class.ap_uint.0, align 1\l  %11 = alloca i24\l  %12 = alloca %class.ap_int.5, align 1\l  %t2 = alloca i16, align 2\l  %13 = alloca %class.ap_int.6, align 1\l  %14 = alloca %class.ap_int, align 1\l  %15 = alloca %class.ap_uint.0, align 1\l  %16 = alloca %class.ap_uint.0, align 1\l  %17 = alloca %class.ap_uint.0, align 1\l  %18 = alloca i24\l  %19 = alloca %class.ap_uint.0, align 1\l  %20 = alloca i24\l  %21 = alloca %class.ap_int.5, align 1\l  %t3 = alloca i16, align 2\l  %22 = alloca %class.ap_uint.0, align 1\l  %res = alloca i32, align 4\l  store [5 x %class.ap_uint.0]* %imgblock, [5 x %class.ap_uint.0]** %2, align 8\l  store i32 %loop, i32* %3, align 4\l  %23 = load i32* %3, align 4\l  %24 = add nsw i32 2, %23\l  %25 = sext i32 %24 to i64\l  %26 = load [5 x %class.ap_uint.0]** %2, align 8\l  %27 = getelementptr inbounds [5 x %class.ap_uint.0]* %26, i64 0\l  %28 = getelementptr inbounds [5 x %class.ap_uint.0]* %27, i32 0, i64 %25\l  %29 = bitcast %class.ap_uint.0* %6 to i8*\l  %30 = bitcast %class.ap_uint.0* %28 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 1, i32 1, i1 false)\l  %31 = load i32* %3, align 4\l  %32 = add nsw i32 0, %31\l  %33 = sext i32 %32 to i64\l  %34 = load [5 x %class.ap_uint.0]** %2, align 8\l  %35 = getelementptr inbounds [5 x %class.ap_uint.0]* %34, i64 2\l  %36 = getelementptr inbounds [5 x %class.ap_uint.0]* %35, i32 0, i64 %33\l  %37 = bitcast %class.ap_uint.0* %7 to i8*\l  %38 = bitcast %class.ap_uint.0* %36 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 1, i32 1, i1 false)\l  %39 = getelementptr %class.ap_uint.0* %6, i32 0, i32 0\l  %40 = bitcast [1 x i8]* %39 to i8*\l  %41 = load i8* %40, align 1\l  %42 = getelementptr %class.ap_uint.0* %7, i32 0, i32 0\l  %43 = bitcast [1 x i8]* %42 to i8*\l  %44 = load i8* %43, align 1\l  %45 = call i16 @_ZplILi8ELi8EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i8 %41, i8 %44)\l  %46 = getelementptr %class.ap_int* %5, i32 0, i32 0\l  %47 = bitcast [2 x i8]* %46 to i16*\l  store i16 %45, i16* %47, align 1\l  %48 = load i32* %3, align 4\l  %49 = add nsw i32 4, %48\l  %50 = sext i32 %49 to i64\l  %51 = load [5 x %class.ap_uint.0]** %2, align 8\l  %52 = getelementptr inbounds [5 x %class.ap_uint.0]* %51, i64 2\l  %53 = getelementptr inbounds [5 x %class.ap_uint.0]* %52, i32 0, i64 %50\l  %54 = bitcast %class.ap_uint.0* %8 to i8*\l  %55 = bitcast %class.ap_uint.0* %53 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 1, i32 1, i1 false)\l  %56 = getelementptr %class.ap_int* %5, i32 0, i32 0\l  %57 = bitcast [2 x i8]* %56 to i16*\l  %58 = load i16* %57, align 1\l  %59 = getelementptr %class.ap_uint.0* %8, i32 0, i32 0\l  %60 = bitcast [1 x i8]* %59 to i8*\l  %61 = load i8* %60, align 1\l  %62 = call i24 @_ZplILi16ELi8EE6ap_intIXplT_T0_EES0_IXT_EE7ap_uintIXT0_EE(i16 %58, i8 %61)\l  %63 = getelementptr %class.ap_int.6* %4, i32 0, i32 0\l  store i24 %62, i24* %9\l  %64 = bitcast i24* %9 to [3 x i8]*\l  %65 = load [3 x i8]* %64, align 1\l  store [3 x i8] %65, [3 x i8]* %63\l  %66 = load i32* %3, align 4\l  %67 = add nsw i32 2, %66\l  %68 = sext i32 %67 to i64\l  %69 = load [5 x %class.ap_uint.0]** %2, align 8\l  %70 = getelementptr inbounds [5 x %class.ap_uint.0]* %69, i64 4\l  %71 = getelementptr inbounds [5 x %class.ap_uint.0]* %70, i32 0, i64 %68\l  %72 = bitcast %class.ap_uint.0* %10 to i8*\l  %73 = bitcast %class.ap_uint.0* %71 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 1, i32 1, i1 false)\l  %74 = getelementptr %class.ap_int.6* %4, i32 0, i32 0\l  %75 = bitcast i24* %11 to [3 x i8]*\l  %76 = load [3 x i8]* %74\l  store [3 x i8] %76, [3 x i8]* %75, align 1\l  %77 = load i24* %11\l  %78 = getelementptr %class.ap_uint.0* %10, i32 0, i32 0\l  %79 = bitcast [1 x i8]* %78 to i8*\l  %80 = load i8* %79, align 1\l  %81 = call i32 @_ZplILi24ELi8EE6ap_intIXplT_T0_EES0_IXT_EE7ap_uintIXT0_EE(i24 %77, i8 %80)\l  %82 = getelementptr %class.ap_int.5* %12, i32 0, i32 0\l  %83 = bitcast [4 x i8]* %82 to i32*\l  store i32 %81, i32* %83, align 1\l  %84 = call i64 @_ZNK6ap_intILi32EEcvlEv(%class.ap_int.5* %12)\l  %85 = trunc i64 %84 to i16\l  store i16 %85, i16* %t1, align 2\l  %86 = load i16* %t1, align 2\l  %87 = sext i16 %86 to i32\l  %88 = mul nsw i32 %87, 3\l  %89 = sdiv i32 %88, 2\l  %90 = trunc i32 %89 to i16\l  store i16 %90, i16* %t1, align 2\l  %91 = load i32* %3, align 4\l  %92 = add nsw i32 1, %91\l  %93 = sext i32 %92 to i64\l  %94 = load [5 x %class.ap_uint.0]** %2, align 8\l  %95 = getelementptr inbounds [5 x %class.ap_uint.0]* %94, i64 1\l  %96 = getelementptr inbounds [5 x %class.ap_uint.0]* %95, i32 0, i64 %93\l  %97 = bitcast %class.ap_uint.0* %15 to i8*\l  %98 = bitcast %class.ap_uint.0* %96 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 1, i32 1, i1 false)\l  %99 = load i32* %3, align 4\l  %100 = add nsw i32 3, %99\l  %101 = sext i32 %100 to i64\l  %102 = load [5 x %class.ap_uint.0]** %2, align 8\l  %103 = getelementptr inbounds [5 x %class.ap_uint.0]* %102, i64 1\l  %104 = getelementptr inbounds [5 x %class.ap_uint.0]* %103, i32 0, i64 %101\l  %105 = bitcast %class.ap_uint.0* %16 to i8*\l  %106 = bitcast %class.ap_uint.0* %104 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 1, i32 1, i1 false)\l  %107 = getelementptr %class.ap_uint.0* %15, i32 0, i32 0\l  %108 = bitcast [1 x i8]* %107 to i8*\l  %109 = load i8* %108, align 1\l  %110 = getelementptr %class.ap_uint.0* %16, i32 0, i32 0\l  %111 = bitcast [1 x i8]* %110 to i8*\l  %112 = load i8* %111, align 1\l  %113 = call i16 @_ZplILi8ELi8EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i8 %109, i8 %112)\l  %114 = getelementptr %class.ap_int* %14, i32 0, i32 0\l  %115 = bitcast [2 x i8]* %114 to i16*\l  store i16 %113, i16* %115, align 1\l  %116 = load i32* %3, align 4\l  %117 = add nsw i32 1, %116\l  %118 = sext i32 %117 to i64\l  %119 = load [5 x %class.ap_uint.0]** %2, align 8\l  %120 = getelementptr inbounds [5 x %class.ap_uint.0]* %119, i64 3\l  %121 = getelementptr inbounds [5 x %class.ap_uint.0]* %120, i32 0, i64 %118\l  %122 = bitcast %class.ap_uint.0* %17 to i8*\l  %123 = bitcast %class.ap_uint.0* %121 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %122, i8* %123, i64 1, i32 1, i1 false)\l  %124 = getelementptr %class.ap_int* %14, i32 0, i32 0\l  %125 = bitcast [2 x i8]* %124 to i16*\l  %126 = load i16* %125, align 1\l  %127 = getelementptr %class.ap_uint.0* %17, i32 0, i32 0\l  %128 = bitcast [1 x i8]* %127 to i8*\l  %129 = load i8* %128, align 1\l  %130 = call i24 @_ZplILi16ELi8EE6ap_intIXplT_T0_EES0_IXT_EE7ap_uintIXT0_EE(i16 %126, i8 %129)\l  %131 = getelementptr %class.ap_int.6* %13, i32 0, i32 0\l  store i24 %130, i24* %18\l  %132 = bitcast i24* %18 to [3 x i8]*\l  %133 = load [3 x i8]* %132, align 1\l  store [3 x i8] %133, [3 x i8]* %131\l  %134 = load i32* %3, align 4\l  %135 = add nsw i32 3, %134\l  %136 = sext i32 %135 to i64\l  %137 = load [5 x %class.ap_uint.0]** %2, align 8\l  %138 = getelementptr inbounds [5 x %class.ap_uint.0]* %137, i64 3\l  %139 = getelementptr inbounds [5 x %class.ap_uint.0]* %138, i32 0, i64 %136\l  %140 = bitcast %class.ap_uint.0* %19 to i8*\l  %141 = bitcast %class.ap_uint.0* %139 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %140, i8* %141, i64 1, i32 1, i1 false)\l  %142 = getelementptr %class.ap_int.6* %13, i32 0, i32 0\l  %143 = bitcast i24* %20 to [3 x i8]*\l  %144 = load [3 x i8]* %142\l  store [3 x i8] %144, [3 x i8]* %143, align 1\l  %145 = load i24* %20\l  %146 = getelementptr %class.ap_uint.0* %19, i32 0, i32 0\l  %147 = bitcast [1 x i8]* %146 to i8*\l  %148 = load i8* %147, align 1\l  %149 = call i32 @_ZplILi24ELi8EE6ap_intIXplT_T0_EES0_IXT_EE7ap_uintIXT0_EE(i24 %145, i8 %148)\l  %150 = getelementptr %class.ap_int.5* %21, i32 0, i32 0\l  %151 = bitcast [4 x i8]* %150 to i32*\l  store i32 %149, i32* %151, align 1\l  %152 = call i64 @_ZNK6ap_intILi32EEcvlEv(%class.ap_int.5* %21)\l  %153 = trunc i64 %152 to i16\l  store i16 %153, i16* %t2, align 2\l  %154 = load i16* %t2, align 2\l  %155 = sext i16 %154 to i32\l  %156 = mul nsw i32 %155, 2\l  %157 = trunc i32 %156 to i16\l  store i16 %157, i16* %t2, align 2\l  %158 = load i32* %3, align 4\l  %159 = add nsw i32 2, %158\l  %160 = sext i32 %159 to i64\l  %161 = load [5 x %class.ap_uint.0]** %2, align 8\l  %162 = getelementptr inbounds [5 x %class.ap_uint.0]* %161, i64 2\l  %163 = getelementptr inbounds [5 x %class.ap_uint.0]* %162, i32 0, i64 %160\l  %164 = call i8 @_ZmlILi8EE7ap_uintIXT_EERKS1_i(%class.ap_uint.0* %163, i32 6)\l  %165 = getelementptr %class.ap_uint.0* %22, i32 0, i32 0\l  %166 = bitcast [1 x i8]* %165 to i8*\l  store i8 %164, i8* %166, align 1\l  %167 = call i64 @_ZNK7ap_uintILi8EEcvmEv(%class.ap_uint.0* %22)\l  %168 = trunc i64 %167 to i16\l  store i16 %168, i16* %t3, align 2\l  %169 = load i16* %t1, align 2\l  %170 = sext i16 %169 to i32\l  %171 = sub nsw i32 0, %170\l  %172 = load i16* %t2, align 2\l  %173 = sext i16 %172 to i32\l  %174 = add nsw i32 %171, %173\l  %175 = load i16* %t3, align 2\l  %176 = sext i16 %175 to i32\l  %177 = add nsw i32 %174, %176\l  store i32 %177, i32* %res, align 4\l  %178 = load i32* %res, align 4\l  %179 = sdiv i32 %178, 8\l  store i32 %179, i32* %res, align 4\l  %180 = load i32* %res, align 4\l  %181 = icmp slt i32 %180, 0\l  br i1 %181, label %182, label %183\l|{<s0>T|<s1>F}}"];
	Node0x2970450:s0 -> Node0x2978970;
	Node0x2970450:s1 -> Node0x29789d0;
	Node0x2978970 [shape=record,label="{%182:\l\l  store i32 0, i32* %1\l  br label %185\l}"];
	Node0x2978970 -> Node0x2978b70;
	Node0x29789d0 [shape=record,label="{%183:\l\l  %184 = load i32* %res, align 4\l  store i32 %184, i32* %1\l  br label %185\l}"];
	Node0x29789d0 -> Node0x2978b70;
	Node0x2978b70 [shape=record,label="{%185:\l\l  %186 = load i32* %1\l  ret i32 %186\l}"];
}
