; ModuleID = '/home/vagrant/software-gnn/dse_database/ast_kernels/phase_kernel.cpp'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.ap_uint = type { [32 x i8] }
%struct.xf_Mat_2_256_256_1_ = type { i8, i32, i32, i32, [65536 x %class.ap_uint.0] }
%class.ap_uint.0 = type { [2 x i8] }
%struct.xf_accel_utils = type { i8 }
%"class.hls::stream" = type { %class.ap_uint }
%class.ap_uint.1 = type { [2 x i8] }
%class.ap_int = type { [4 x i8] }
%class.ap_uint.2 = type { [2 x i8] }

@_ZN2xf12division_lutE = global [2049 x i16] [i16 -1, i16 -1, i16 -1, i16 -32, i16 -64, i16 -96, i16 -128, i16 -160, i16 -192, i16 -224, i16 -256, i16 -287, i16 -319, i16 -351, i16 -382, i16 -414, i16 -445, i16 -477, i16 -509, i16 -540, i16 -571, i16 -603, i16 -634, i16 -666, i16 -697, i16 -728, i16 -760, i16 -791, i16 -822, i16 -853, i16 -884, i16 -916, i16 -947, i16 -978, i16 -1009, i16 -1040, i16 -1071, i16 -1102, i16 -1133, i16 -1163, i16 -1194, i16 -1225, i16 -1256, i16 -1287, i16 -1317, i16 -1348, i16 -1379, i16 -1410, i16 -1440, i16 -1471, i16 -1501, i16 -1532, i16 -1562, i16 -1593, i16 -1623, i16 -1654, i16 -1684, i16 -1714, i16 -1745, i16 -1775, i16 -1805, i16 -1836, i16 -1866, i16 -1896, i16 -1926, i16 -1956, i16 -1986, i16 -2017, i16 -2047, i16 -2077, i16 -2107, i16 -2137, i16 -2166, i16 -2196, i16 -2226, i16 -2256, i16 -2286, i16 -2316, i16 -2345, i16 -2375, i16 -2405, i16 -2435, i16 -2464, i16 -2494, i16 -2523, i16 -2553, i16 -2583, i16 -2612, i16 -2642, i16 -2671, i16 -2700, i16 -2730, i16 -2759, i16 -2789, i16 -2818, i16 -2847, i16 -2876, i16 -2906, i16 -2935, i16 -2964, i16 -2993, i16 -3022, i16 -3052, i16 -3081, i16 -3110, i16 -3139, i16 -3168, i16 -3197, i16 -3226, i16 -3254, i16 -3283, i16 -3312, i16 -3341, i16 -3370, i16 -3399, i16 -3427, i16 -3456, i16 -3485, i16 -3514, i16 -3542, i16 -3571, i16 -3599, i16 -3628, i16 -3656, i16 -3685, i16 -3714, i16 -3742, i16 -3770, i16 -3799, i16 -3827, i16 -3856, i16 -3884, i16 -3912, i16 -3940, i16 -3969, i16 -3997, i16 -4025, i16 -4053, i16 -4081, i16 -4110, i16 -4138, i16 -4166, i16 -4194, i16 -4222, i16 -4250, i16 -4278, i16 -4306, i16 -4334, i16 -4362, i16 -4389, i16 -4417, i16 -4445, i16 -4473, i16 -4501, i16 -4528, i16 -4556, i16 -4584, i16 -4612, i16 -4639, i16 -4667, i16 -4694, i16 -4722, i16 -4749, i16 -4777, i16 -4804, i16 -4832, i16 -4859, i16 -4887, i16 -4914, i16 -4942, i16 -4969, i16 -4996, i16 -5024, i16 -5051, i16 -5078, i16 -5105, i16 -5132, i16 -5160, i16 -5187, i16 -5214, i16 -5241, i16 -5268, i16 -5295, i16 -5322, i16 -5349, i16 -5376, i16 -5403, i16 -5430, i16 -5457, i16 -5484, i16 -5511, i16 -5538, i16 -5564, i16 -5591, i16 -5618, i16 -5645, i16 -5671, i16 -5698, i16 -5725, i16 -5751, i16 -5778, i16 -5805, i16 -5831, i16 -5858, i16 -5884, i16 -5911, i16 -5937, i16 -5964, i16 -5990, i16 -6016, i16 -6043, i16 -6069, i16 -6096, i16 -6122, i16 -6148, i16 -6174, i16 -6201, i16 -6227, i16 -6253, i16 -6279, i16 -6305, i16 -6332, i16 -6358, i16 -6384, i16 -6410, i16 -6436, i16 -6462, i16 -6488, i16 -6514, i16 -6540, i16 -6566, i16 -6592, i16 -6617, i16 -6643, i16 -6669, i16 -6695, i16 -6721, i16 -6746, i16 -6772, i16 -6798, i16 -6824, i16 -6849, i16 -6875, i16 -6901, i16 -6926, i16 -6952, i16 -6977, i16 -7003, i16 -7028, i16 -7054, i16 -7079, i16 -7105, i16 -7130, i16 -7156, i16 -7181, i16 -7206, i16 -7232, i16 -7257, i16 -7282, i16 -7308, i16 -7333, i16 -7358, i16 -7383, i16 -7408, i16 -7434, i16 -7459, i16 -7484, i16 -7509, i16 -7534, i16 -7559, i16 -7584, i16 -7609, i16 -7634, i16 -7659, i16 -7684, i16 -7709, i16 -7734, i16 -7759, i16 -7784, i16 -7808, i16 -7833, i16 -7858, i16 -7883, i16 -7908, i16 -7932, i16 -7957, i16 -7982, i16 -8006, i16 -8031, i16 -8056, i16 -8080, i16 -8105, i16 -8129, i16 -8154, i16 -8178, i16 -8203, i16 -8227, i16 -8252, i16 -8276, i16 -8301, i16 -8325, i16 -8350, i16 -8374, i16 -8398, i16 -8423, i16 -8447, i16 -8471, i16 -8495, i16 -8520, i16 -8544, i16 -8568, i16 -8592, i16 -8616, i16 -8640, i16 -8665, i16 -8689, i16 -8713, i16 -8737, i16 -8761, i16 -8785, i16 -8809, i16 -8833, i16 -8857, i16 -8881, i16 -8905, i16 -8928, i16 -8952, i16 -8976, i16 -9000, i16 -9024, i16 -9048, i16 -9071, i16 -9095, i16 -9119, i16 -9142, i16 -9166, i16 -9190, i16 -9213, i16 -9237, i16 -9261, i16 -9284, i16 -9308, i16 -9331, i16 -9355, i16 -9378, i16 -9402, i16 -9425, i16 -9449, i16 -9472, i16 -9496, i16 -9519, i16 -9542, i16 -9566, i16 -9589, i16 -9612, i16 -9636, i16 -9659, i16 -9682, i16 -9705, i16 -9729, i16 -9752, i16 -9775, i16 -9798, i16 -9821, i16 -9844, i16 -9868, i16 -9891, i16 -9914, i16 -9937, i16 -9960, i16 -9983, i16 -10006, i16 -10029, i16 -10052, i16 -10075, i16 -10098, i16 -10120, i16 -10143, i16 -10166, i16 -10189, i16 -10212, i16 -10235, i16 -10257, i16 -10280, i16 -10303, i16 -10326, i16 -10348, i16 -10371, i16 -10394, i16 -10416, i16 -10439, i16 -10462, i16 -10484, i16 -10507, i16 -10529, i16 -10552, i16 -10574, i16 -10597, i16 -10619, i16 -10642, i16 -10664, i16 -10687, i16 -10709, i16 -10731, i16 -10754, i16 -10776, i16 -10798, i16 -10821, i16 -10843, i16 -10865, i16 -10888, i16 -10910, i16 -10932, i16 -10954, i16 -10976, i16 -10999, i16 -11021, i16 -11043, i16 -11065, i16 -11087, i16 -11109, i16 -11131, i16 -11153, i16 -11175, i16 -11197, i16 -11219, i16 -11241, i16 -11263, i16 -11285, i16 -11307, i16 -11329, i16 -11351, i16 -11373, i16 -11395, i16 -11416, i16 -11438, i16 -11460, i16 -11482, i16 -11504, i16 -11525, i16 -11547, i16 -11569, i16 -11590, i16 -11612, i16 -11634, i16 -11655, i16 -11677, i16 -11699, i16 -11720, i16 -11742, i16 -11763, i16 -11785, i16 -11806, i16 -11828, i16 -11849, i16 -11871, i16 -11892, i16 -11914, i16 -11935, i16 -11957, i16 -11978, i16 -11999, i16 -12021, i16 -12042, i16 -12063, i16 -12085, i16 -12106, i16 -12127, i16 -12148, i16 -12170, i16 -12191, i16 -12212, i16 -12233, i16 -12254, i16 -12275, i16 -12297, i16 -12318, i16 -12339, i16 -12360, i16 -12381, i16 -12402, i16 -12423, i16 -12444, i16 -12465, i16 -12486, i16 -12507, i16 -12528, i16 -12549, i16 -12570, i16 -12591, i16 -12612, i16 -12632, i16 -12653, i16 -12674, i16 -12695, i16 -12716, i16 -12736, i16 -12757, i16 -12778, i16 -12799, i16 -12819, i16 -12840, i16 -12861, i16 -12881, i16 -12902, i16 -12923, i16 -12943, i16 -12964, i16 -12985, i16 -13005, i16 -13026, i16 -13046, i16 -13067, i16 -13087, i16 -13108, i16 -13128, i16 -13149, i16 -13169, i16 -13189, i16 -13210, i16 -13230, i16 -13251, i16 -13271, i16 -13291, i16 -13312, i16 -13332, i16 -13352, i16 -13373, i16 -13393, i16 -13413, i16 -13433, i16 -13454, i16 -13474, i16 -13494, i16 -13514, i16 -13534, i16 -13554, i16 -13575, i16 -13595, i16 -13615, i16 -13635, i16 -13655, i16 -13675, i16 -13695, i16 -13715, i16 -13735, i16 -13755, i16 -13775, i16 -13795, i16 -13815, i16 -13835, i16 -13855, i16 -13875, i16 -13894, i16 -13914, i16 -13934, i16 -13954, i16 -13974, i16 -13994, i16 -14013, i16 -14033, i16 -14053, i16 -14073, i16 -14092, i16 -14112, i16 -14132, i16 -14151, i16 -14171, i16 -14191, i16 -14210, i16 -14230, i16 -14250, i16 -14269, i16 -14289, i16 -14308, i16 -14328, i16 -14347, i16 -14367, i16 -14386, i16 -14406, i16 -14425, i16 -14445, i16 -14464, i16 -14484, i16 -14503, i16 -14523, i16 -14542, i16 -14561, i16 -14581, i16 -14600, i16 -14619, i16 -14639, i16 -14658, i16 -14677, i16 -14696, i16 -14716, i16 -14735, i16 -14754, i16 -14773, i16 -14793, i16 -14812, i16 -14831, i16 -14850, i16 -14869, i16 -14888, i16 -14907, i16 -14926, i16 -14946, i16 -14965, i16 -14984, i16 -15003, i16 -15022, i16 -15041, i16 -15060, i16 -15079, i16 -15098, i16 -15117, i16 -15136, i16 -15154, i16 -15173, i16 -15192, i16 -15211, i16 -15230, i16 -15249, i16 -15268, i16 -15287, i16 -15305, i16 -15324, i16 -15343, i16 -15362, i16 -15380, i16 -15399, i16 -15418, i16 -15437, i16 -15455, i16 -15474, i16 -15493, i16 -15511, i16 -15530, i16 -15549, i16 -15567, i16 -15586, i16 -15604, i16 -15623, i16 -15641, i16 -15660, i16 -15679, i16 -15697, i16 -15716, i16 -15734, i16 -15752, i16 -15771, i16 -15789, i16 -15808, i16 -15826, i16 -15845, i16 -15863, i16 -15881, i16 -15900, i16 -15918, i16 -15936, i16 -15955, i16 -15973, i16 -15991, i16 -16010, i16 -16028, i16 -16046, i16 -16064, i16 -16083, i16 -16101, i16 -16119, i16 -16137, i16 -16155, i16 -16174, i16 -16192, i16 -16210, i16 -16228, i16 -16246, i16 -16264, i16 -16282, i16 -16300, i16 -16318, i16 -16336, i16 -16354, i16 -16372, i16 -16390, i16 -16408, i16 -16426, i16 -16444, i16 -16462, i16 -16480, i16 -16498, i16 -16516, i16 -16534, i16 -16552, i16 -16570, i16 -16588, i16 -16605, i16 -16623, i16 -16641, i16 -16659, i16 -16677, i16 -16695, i16 -16712, i16 -16730, i16 -16748, i16 -16766, i16 -16783, i16 -16801, i16 -16819, i16 -16836, i16 -16854, i16 -16872, i16 -16889, i16 -16907, i16 -16924, i16 -16942, i16 -16960, i16 -16977, i16 -16995, i16 -17012, i16 -17030, i16 -17047, i16 -17065, i16 -17082, i16 -17100, i16 -17117, i16 -17135, i16 -17152, i16 -17170, i16 -17187, i16 -17205, i16 -17222, i16 -17239, i16 -17257, i16 -17274, i16 -17291, i16 -17309, i16 -17326, i16 -17343, i16 -17361, i16 -17378, i16 -17395, i16 -17413, i16 -17430, i16 -17447, i16 -17464, i16 -17481, i16 -17499, i16 -17516, i16 -17533, i16 -17550, i16 -17567, i16 -17584, i16 -17602, i16 -17619, i16 -17636, i16 -17653, i16 -17670, i16 -17687, i16 -17704, i16 -17721, i16 -17738, i16 -17755, i16 -17772, i16 -17789, i16 -17806, i16 -17823, i16 -17840, i16 -17857, i16 -17874, i16 -17891, i16 -17908, i16 -17925, i16 -17942, i16 -17958, i16 -17975, i16 -17992, i16 -18009, i16 -18026, i16 -18043, i16 -18059, i16 -18076, i16 -18093, i16 -18110, i16 -18126, i16 -18143, i16 -18160, i16 -18177, i16 -18193, i16 -18210, i16 -18227, i16 -18243, i16 -18260, i16 -18277, i16 -18293, i16 -18310, i16 -18327, i16 -18343, i16 -18360, i16 -18376, i16 -18393, i16 -18409, i16 -18426, i16 -18443, i16 -18459, i16 -18476, i16 -18492, i16 -18509, i16 -18525, i16 -18541, i16 -18558, i16 -18574, i16 -18591, i16 -18607, i16 -18624, i16 -18640, i16 -18656, i16 -18673, i16 -18689, i16 -18705, i16 -18722, i16 -18738, i16 -18754, i16 -18771, i16 -18787, i16 -18803, i16 -18820, i16 -18836, i16 -18852, i16 -18868, i16 -18885, i16 -18901, i16 -18917, i16 -18933, i16 -18949, i16 -18965, i16 -18982, i16 -18998, i16 -19014, i16 -19030, i16 -19046, i16 -19062, i16 -19078, i16 -19094, i16 -19110, i16 -19126, i16 -19143, i16 -19159, i16 -19175, i16 -19191, i16 -19207, i16 -19223, i16 -19239, i16 -19255, i16 -19270, i16 -19286, i16 -19302, i16 -19318, i16 -19334, i16 -19350, i16 -19366, i16 -19382, i16 -19398, i16 -19414, i16 -19429, i16 -19445, i16 -19461, i16 -19477, i16 -19493, i16 -19508, i16 -19524, i16 -19540, i16 -19556, i16 -19572, i16 -19587, i16 -19603, i16 -19619, i16 -19634, i16 -19650, i16 -19666, i16 -19681, i16 -19697, i16 -19713, i16 -19728, i16 -19744, i16 -19760, i16 -19775, i16 -19791, i16 -19806, i16 -19822, i16 -19838, i16 -19853, i16 -19869, i16 -19884, i16 -19900, i16 -19915, i16 -19931, i16 -19946, i16 -19962, i16 -19977, i16 -19993, i16 -20008, i16 -20024, i16 -20039, i16 -20054, i16 -20070, i16 -20085, i16 -20101, i16 -20116, i16 -20131, i16 -20147, i16 -20162, i16 -20177, i16 -20193, i16 -20208, i16 -20223, i16 -20239, i16 -20254, i16 -20269, i16 -20284, i16 -20300, i16 -20315, i16 -20330, i16 -20345, i16 -20361, i16 -20376, i16 -20391, i16 -20406, i16 -20421, i16 -20436, i16 -20452, i16 -20467, i16 -20482, i16 -20497, i16 -20512, i16 -20527, i16 -20542, i16 -20557, i16 -20572, i16 -20587, i16 -20603, i16 -20618, i16 -20633, i16 -20648, i16 -20663, i16 -20678, i16 -20693, i16 -20708, i16 -20723, i16 -20738, i16 -20752, i16 -20767, i16 -20782, i16 -20797, i16 -20812, i16 -20827, i16 -20842, i16 -20857, i16 -20872, i16 -20887, i16 -20901, i16 -20916, i16 -20931, i16 -20946, i16 -20961, i16 -20975, i16 -20990, i16 -21005, i16 -21020, i16 -21035, i16 -21049, i16 -21064, i16 -21079, i16 -21094, i16 -21108, i16 -21123, i16 -21138, i16 -21152, i16 -21167, i16 -21182, i16 -21196, i16 -21211, i16 -21226, i16 -21240, i16 -21255, i16 -21269, i16 -21284, i16 -21299, i16 -21313, i16 -21328, i16 -21342, i16 -21357, i16 -21371, i16 -21386, i16 -21400, i16 -21415, i16 -21429, i16 -21444, i16 -21458, i16 -21473, i16 -21487, i16 -21502, i16 -21516, i16 -21531, i16 -21545, i16 -21560, i16 -21574, i16 -21588, i16 -21603, i16 -21617, i16 -21631, i16 -21646, i16 -21660, i16 -21674, i16 -21689, i16 -21703, i16 -21717, i16 -21732, i16 -21746, i16 -21760, i16 -21775, i16 -21789, i16 -21803, i16 -21817, i16 -21832, i16 -21846, i16 -21860, i16 -21874, i16 -21888, i16 -21903, i16 -21917, i16 -21931, i16 -21945, i16 -21959, i16 -21973, i16 -21988, i16 -22002, i16 -22016, i16 -22030, i16 -22044, i16 -22058, i16 -22072, i16 -22086, i16 -22100, i16 -22114, i16 -22128, i16 -22142, i16 -22156, i16 -22171, i16 -22185, i16 -22199, i16 -22213, i16 -22226, i16 -22240, i16 -22254, i16 -22268, i16 -22282, i16 -22296, i16 -22310, i16 -22324, i16 -22338, i16 -22352, i16 -22366, i16 -22380, i16 -22394, i16 -22407, i16 -22421, i16 -22435, i16 -22449, i16 -22463, i16 -22477, i16 -22490, i16 -22504, i16 -22518, i16 -22532, i16 -22546, i16 -22559, i16 -22573, i16 -22587, i16 -22601, i16 -22614, i16 -22628, i16 -22642, i16 -22655, i16 -22669, i16 -22683, i16 -22696, i16 -22710, i16 -22724, i16 -22737, i16 -22751, i16 -22765, i16 -22778, i16 -22792, i16 -22806, i16 -22819, i16 -22833, i16 -22846, i16 -22860, i16 -22874, i16 -22887, i16 -22901, i16 -22914, i16 -22928, i16 -22941, i16 -22955, i16 -22968, i16 -22982, i16 -22995, i16 -23009, i16 -23022, i16 -23036, i16 -23049, i16 -23063, i16 -23076, i16 -23089, i16 -23103, i16 -23116, i16 -23130, i16 -23143, i16 -23156, i16 -23170, i16 -23183, i16 -23197, i16 -23210, i16 -23223, i16 -23237, i16 -23250, i16 -23263, i16 -23277, i16 -23290, i16 -23303, i16 -23316, i16 -23330, i16 -23343, i16 -23356, i16 -23369, i16 -23383, i16 -23396, i16 -23409, i16 -23422, i16 -23436, i16 -23449, i16 -23462, i16 -23475, i16 -23488, i16 -23502, i16 -23515, i16 -23528, i16 -23541, i16 -23554, i16 -23567, i16 -23580, i16 -23593, i16 -23607, i16 -23620, i16 -23633, i16 -23646, i16 -23659, i16 -23672, i16 -23685, i16 -23698, i16 -23711, i16 -23724, i16 -23737, i16 -23750, i16 -23763, i16 -23776, i16 -23789, i16 -23802, i16 -23815, i16 -23828, i16 -23841, i16 -23854, i16 -23867, i16 -23880, i16 -23893, i16 -23906, i16 -23919, i16 -23931, i16 -23944, i16 -23957, i16 -23970, i16 -23983, i16 -23996, i16 -24009, i16 -24022, i16 -24034, i16 -24047, i16 -24060, i16 -24073, i16 -24086, i16 -24098, i16 -24111, i16 -24124, i16 -24137, i16 -24150, i16 -24162, i16 -24175, i16 -24188, i16 -24201, i16 -24213, i16 -24226, i16 -24239, i16 -24251, i16 -24264, i16 -24277, i16 -24290, i16 -24302, i16 -24315, i16 -24327, i16 -24340, i16 -24353, i16 -24365, i16 -24378, i16 -24391, i16 -24403, i16 -24416, i16 -24428, i16 -24441, i16 -24454, i16 -24466, i16 -24479, i16 -24491, i16 -24504, i16 -24516, i16 -24529, i16 -24541, i16 -24554, i16 -24566, i16 -24579, i16 -24591, i16 -24604, i16 -24616, i16 -24629, i16 -24641, i16 -24654, i16 -24666, i16 -24679, i16 -24691, i16 -24704, i16 -24716, i16 -24728, i16 -24741, i16 -24753, i16 -24766, i16 -24778, i16 -24790, i16 -24803, i16 -24815, i16 -24827, i16 -24840, i16 -24852, i16 -24864, i16 -24877, i16 -24889, i16 -24901, i16 -24914, i16 -24926, i16 -24938, i16 -24951, i16 -24963, i16 -24975, i16 -24987, i16 -25000, i16 -25012, i16 -25024, i16 -25036, i16 -25048, i16 -25061, i16 -25073, i16 -25085, i16 -25097, i16 -25109, i16 -25122, i16 -25134, i16 -25146, i16 -25158, i16 -25170, i16 -25182, i16 -25195, i16 -25207, i16 -25219, i16 -25231, i16 -25243, i16 -25255, i16 -25267, i16 -25279, i16 -25291, i16 -25303, i16 -25315, i16 -25327, i16 -25340, i16 -25352, i16 -25364, i16 -25376, i16 -25388, i16 -25400, i16 -25412, i16 -25424, i16 -25436, i16 -25448, i16 -25460, i16 -25472, i16 -25483, i16 -25495, i16 -25507, i16 -25519, i16 -25531, i16 -25543, i16 -25555, i16 -25567, i16 -25579, i16 -25591, i16 -25603, i16 -25615, i16 -25626, i16 -25638, i16 -25650, i16 -25662, i16 -25674, i16 -25686, i16 -25697, i16 -25709, i16 -25721, i16 -25733, i16 -25745, i16 -25756, i16 -25768, i16 -25780, i16 -25792, i16 -25804, i16 -25815, i16 -25827, i16 -25839, i16 -25851, i16 -25862, i16 -25874, i16 -25886, i16 -25897, i16 -25909, i16 -25921, i16 -25933, i16 -25944, i16 -25956, i16 -25968, i16 -25979, i16 -25991, i16 -26003, i16 -26014, i16 -26026, i16 -26037, i16 -26049, i16 -26061, i16 -26072, i16 -26084, i16 -26095, i16 -26107, i16 -26119, i16 -26130, i16 -26142, i16 -26153, i16 -26165, i16 -26176, i16 -26188, i16 -26200, i16 -26211, i16 -26223, i16 -26234, i16 -26246, i16 -26257, i16 -26269, i16 -26280, i16 -26292, i16 -26303, i16 -26314, i16 -26326, i16 -26337, i16 -26349, i16 -26360, i16 -26372, i16 -26383, i16 -26395, i16 -26406, i16 -26417, i16 -26429, i16 -26440, i16 -26452, i16 -26463, i16 -26474, i16 -26486, i16 -26497, i16 -26508, i16 -26520, i16 -26531, i16 -26542, i16 -26554, i16 -26565, i16 -26576, i16 -26588, i16 -26599, i16 -26610, i16 -26622, i16 -26633, i16 -26644, i16 -26655, i16 -26667, i16 -26678, i16 -26689, i16 -26700, i16 -26712, i16 -26723, i16 -26734, i16 -26745, i16 -26756, i16 -26768, i16 -26779, i16 -26790, i16 -26801, i16 -26812, i16 -26824, i16 -26835, i16 -26846, i16 -26857, i16 -26868, i16 -26879, i16 -26890, i16 -26902, i16 -26913, i16 -26924, i16 -26935, i16 -26946, i16 -26957, i16 -26968, i16 -26979, i16 -26990, i16 -27001, i16 -27012, i16 -27024, i16 -27035, i16 -27046, i16 -27057, i16 -27068, i16 -27079, i16 -27090, i16 -27101, i16 -27112, i16 -27123, i16 -27134, i16 -27145, i16 -27156, i16 -27167, i16 -27178, i16 -27189, i16 -27200, i16 -27210, i16 -27221, i16 -27232, i16 -27243, i16 -27254, i16 -27265, i16 -27276, i16 -27287, i16 -27298, i16 -27309, i16 -27320, i16 -27330, i16 -27341, i16 -27352, i16 -27363, i16 -27374, i16 -27385, i16 -27396, i16 -27406, i16 -27417, i16 -27428, i16 -27439, i16 -27450, i16 -27461, i16 -27471, i16 -27482, i16 -27493, i16 -27504, i16 -27514, i16 -27525, i16 -27536, i16 -27547, i16 -27558, i16 -27568, i16 -27579, i16 -27590, i16 -27600, i16 -27611, i16 -27622, i16 -27633, i16 -27643, i16 -27654, i16 -27665, i16 -27675, i16 -27686, i16 -27697, i16 -27707, i16 -27718, i16 -27729, i16 -27739, i16 -27750, i16 -27761, i16 -27771, i16 -27782, i16 -27792, i16 -27803, i16 -27814, i16 -27824, i16 -27835, i16 -27845, i16 -27856, i16 -27867, i16 -27877, i16 -27888, i16 -27898, i16 -27909, i16 -27919, i16 -27930, i16 -27940, i16 -27951, i16 -27962, i16 -27972, i16 -27983, i16 -27993, i16 -28004, i16 -28014, i16 -28025, i16 -28035, i16 -28046, i16 -28056, i16 -28066, i16 -28077, i16 -28087, i16 -28098, i16 -28108, i16 -28119, i16 -28129, i16 -28140, i16 -28150, i16 -28160, i16 -28171, i16 -28181, i16 -28192, i16 -28202, i16 -28212, i16 -28223, i16 -28233, i16 -28243, i16 -28254, i16 -28264, i16 -28274, i16 -28285, i16 -28295, i16 -28306, i16 -28316, i16 -28326, i16 -28336, i16 -28347, i16 -28357, i16 -28367, i16 -28378, i16 -28388, i16 -28398, i16 -28408, i16 -28419, i16 -28429, i16 -28439, i16 -28450, i16 -28460, i16 -28470, i16 -28480, i16 -28490, i16 -28501, i16 -28511, i16 -28521, i16 -28531, i16 -28542, i16 -28552, i16 -28562, i16 -28572, i16 -28582, i16 -28592, i16 -28603, i16 -28613, i16 -28623, i16 -28633, i16 -28643, i16 -28653, i16 -28663, i16 -28674, i16 -28684, i16 -28694, i16 -28704, i16 -28714, i16 -28724, i16 -28734, i16 -28744, i16 -28754, i16 -28765, i16 -28775, i16 -28785, i16 -28795, i16 -28805, i16 -28815, i16 -28825, i16 -28835, i16 -28845, i16 -28855, i16 -28865, i16 -28875, i16 -28885, i16 -28895, i16 -28905, i16 -28915, i16 -28925, i16 -28935, i16 -28945, i16 -28955, i16 -28965, i16 -28975, i16 -28985, i16 -28995, i16 -29005, i16 -29015, i16 -29025, i16 -29035, i16 -29044, i16 -29054, i16 -29064, i16 -29074, i16 -29084, i16 -29094, i16 -29104, i16 -29114, i16 -29124, i16 -29134, i16 -29143, i16 -29153, i16 -29163, i16 -29173, i16 -29183, i16 -29193, i16 -29203, i16 -29212, i16 -29222, i16 -29232, i16 -29242, i16 -29252, i16 -29261, i16 -29271, i16 -29281, i16 -29291, i16 -29301, i16 -29310, i16 -29320, i16 -29330, i16 -29340, i16 -29349, i16 -29359, i16 -29369, i16 -29379, i16 -29388, i16 -29398, i16 -29408, i16 -29418, i16 -29427, i16 -29437, i16 -29447, i16 -29456, i16 -29466, i16 -29476, i16 -29486, i16 -29495, i16 -29505, i16 -29515, i16 -29524, i16 -29534, i16 -29544, i16 -29553, i16 -29563, i16 -29572, i16 -29582, i16 -29592, i16 -29601, i16 -29611, i16 -29621, i16 -29630, i16 -29640, i16 -29649, i16 -29659, i16 -29669, i16 -29678, i16 -29688, i16 -29697, i16 -29707, i16 -29716, i16 -29726, i16 -29736, i16 -29745, i16 -29755, i16 -29764, i16 -29774, i16 -29783, i16 -29793, i16 -29802, i16 -29812, i16 -29821, i16 -29831, i16 -29840, i16 -29850, i16 -29859, i16 -29869, i16 -29878, i16 -29888, i16 -29897, i16 -29907, i16 -29916, i16 -29926, i16 -29935, i16 -29944, i16 -29954, i16 -29963, i16 -29973, i16 -29982, i16 -29992, i16 -30001, i16 -30010, i16 -30020, i16 -30029, i16 -30039, i16 -30048, i16 -30057, i16 -30067, i16 -30076, i16 -30085, i16 -30095, i16 -30104, i16 -30114, i16 -30123, i16 -30132, i16 -30142, i16 -30151, i16 -30160, i16 -30170, i16 -30179, i16 -30188, i16 -30197, i16 -30207, i16 -30216, i16 -30225, i16 -30235, i16 -30244, i16 -30253, i16 -30262, i16 -30272, i16 -30281, i16 -30290, i16 -30299, i16 -30309, i16 -30318, i16 -30327, i16 -30336, i16 -30346, i16 -30355, i16 -30364, i16 -30373, i16 -30383, i16 -30392, i16 -30401, i16 -30410, i16 -30419, i16 -30429, i16 -30438, i16 -30447, i16 -30456, i16 -30465, i16 -30474, i16 -30484, i16 -30493, i16 -30502, i16 -30511, i16 -30520, i16 -30529, i16 -30538, i16 -30548, i16 -30557, i16 -30566, i16 -30575, i16 -30584, i16 -30593, i16 -30602, i16 -30611, i16 -30620, i16 -30629, i16 -30638, i16 -30648, i16 -30657, i16 -30666, i16 -30675, i16 -30684, i16 -30693, i16 -30702, i16 -30711, i16 -30720, i16 -30729, i16 -30738, i16 -30747, i16 -30756, i16 -30765, i16 -30774, i16 -30783, i16 -30792, i16 -30801, i16 -30810, i16 -30819, i16 -30828, i16 -30837, i16 -30846, i16 -30855, i16 -30864, i16 -30873, i16 -30882, i16 -30891, i16 -30900, i16 -30909, i16 -30918, i16 -30926, i16 -30935, i16 -30944, i16 -30953, i16 -30962, i16 -30971, i16 -30980, i16 -30989, i16 -30998, i16 -31007, i16 -31015, i16 -31024, i16 -31033, i16 -31042, i16 -31051, i16 -31060, i16 -31069, i16 -31078, i16 -31086, i16 -31095, i16 -31104, i16 -31113, i16 -31122, i16 -31131, i16 -31139, i16 -31148, i16 -31157, i16 -31166, i16 -31175, i16 -31183, i16 -31192, i16 -31201, i16 -31210, i16 -31218, i16 -31227, i16 -31236, i16 -31245, i16 -31254, i16 -31262, i16 -31271, i16 -31280, i16 -31289, i16 -31297, i16 -31306, i16 -31315, i16 -31323, i16 -31332, i16 -31341, i16 -31350, i16 -31358, i16 -31367, i16 -31376, i16 -31384, i16 -31393, i16 -31402, i16 -31410, i16 -31419, i16 -31428, i16 -31436, i16 -31445, i16 -31454, i16 -31462, i16 -31471, i16 -31480, i16 -31488, i16 -31497, i16 -31506, i16 -31514, i16 -31523, i16 -31531, i16 -31540, i16 -31549, i16 -31557, i16 -31566, i16 -31575, i16 -31583, i16 -31592, i16 -31600, i16 -31609, i16 -31617, i16 -31626, i16 -31635, i16 -31643, i16 -31652, i16 -31660, i16 -31669, i16 -31677, i16 -31686, i16 -31694, i16 -31703, i16 -31711, i16 -31720, i16 -31729, i16 -31737, i16 -31746, i16 -31754, i16 -31763, i16 -31771, i16 -31780, i16 -31788, i16 -31796, i16 -31805, i16 -31813, i16 -31822, i16 -31830, i16 -31839, i16 -31847, i16 -31856, i16 -31864, i16 -31873, i16 -31881, i16 -31890, i16 -31898, i16 -31906, i16 -31915, i16 -31923, i16 -31932, i16 -31940, i16 -31948, i16 -31957, i16 -31965, i16 -31974, i16 -31982, i16 -31990, i16 -31999, i16 -32007, i16 -32016, i16 -32024, i16 -32032, i16 -32041, i16 -32049, i16 -32057, i16 -32066, i16 -32074, i16 -32082, i16 -32091, i16 -32099, i16 -32107, i16 -32116, i16 -32124, i16 -32132, i16 -32141, i16 -32149, i16 -32157, i16 -32166, i16 -32174, i16 -32182, i16 -32190, i16 -32199, i16 -32207, i16 -32215, i16 -32224, i16 -32232, i16 -32240, i16 -32248, i16 -32257, i16 -32265, i16 -32273, i16 -32281, i16 -32290, i16 -32298, i16 -32306, i16 -32314, i16 -32323, i16 -32331, i16 -32339, i16 -32347, i16 -32355, i16 -32364, i16 -32372, i16 -32380, i16 -32388, i16 -32396, i16 -32404, i16 -32413, i16 -32421, i16 -32429, i16 -32437, i16 -32445, i16 -32453, i16 -32462, i16 -32470, i16 -32478, i16 -32486, i16 -32494, i16 -32502, i16 -32510, i16 -32519, i16 -32527, i16 -32535, i16 -32543, i16 -32551, i16 -32559, i16 -32567, i16 -32575, i16 -32583, i16 -32592, i16 -32600, i16 -32608, i16 -32616, i16 -32624, i16 -32632, i16 -32640, i16 -32648, i16 -32656, i16 -32664, i16 -32672, i16 -32680, i16 -32688, i16 -32696, i16 -32704, i16 -32712, i16 -32720, i16 -32728, i16 -32736, i16 -32744, i16 -32752], align 16
@_ZN2xf13frac_bits_lutE = global [63 x i32] [i32 9, i32 8, i32 7, i32 6, i32 6, i32 6, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], align 16
@_ZN2xf13base_addr_lutE = global [63 x i32] [i32 0, i32 512, i32 768, i32 896, i32 960, i32 1024, i32 1088, i32 1120, i32 1152, i32 1184, i32 1200, i32 1216, i32 1232, i32 1248, i32 1264, i32 1280, i32 1296, i32 1304, i32 1312, i32 1320, i32 1328, i32 1336, i32 1344, i32 1352, i32 1360, i32 1362, i32 1364, i32 1366, i32 1368, i32 1370, i32 1372, i32 1374, i32 1376, i32 1378, i32 1380, i32 1382, i32 1384, i32 1386, i32 1388, i32 1390, i32 1392, i32 1394, i32 1396, i32 1398, i32 1400, i32 1402, i32 1404, i32 1406, i32 1408, i32 1410, i32 1412, i32 1414, i32 1416, i32 1418, i32 1420, i32 1422, i32 1424, i32 1426, i32 1428, i32 1430, i32 1432, i32 1434, i32 1436], align 16
@_ZN2xf11atan_lut_fpE = global [1440 x i16] [i16 0, i16 7, i16 15, i16 23, i16 31, i16 39, i16 47, i16 55, i16 63, i16 71, i16 79, i16 87, i16 95, i16 103, i16 111, i16 119, i16 127, i16 135, i16 143, i16 151, i16 159, i16 167, i16 175, i16 183, i16 191, i16 199, i16 207, i16 215, i16 223, i16 231, i16 239, i16 247, i16 255, i16 263, i16 271, i16 279, i16 287, i16 295, i16 303, i16 311, i16 319, i16 327, i16 335, i16 343, i16 351, i16 358, i16 366, i16 374, i16 382, i16 390, i16 398, i16 406, i16 414, i16 422, i16 430, i16 438, i16 446, i16 454, i16 461, i16 469, i16 477, i16 485, i16 493, i16 501, i16 509, i16 517, i16 524, i16 532, i16 540, i16 548, i16 556, i16 564, i16 572, i16 579, i16 587, i16 595, i16 603, i16 611, i16 619, i16 626, i16 634, i16 642, i16 650, i16 658, i16 665, i16 673, i16 681, i16 689, i16 697, i16 704, i16 712, i16 720, i16 728, i16 735, i16 743, i16 751, i16 758, i16 766, i16 774, i16 782, i16 789, i16 797, i16 805, i16 812, i16 820, i16 828, i16 835, i16 843, i16 851, i16 858, i16 866, i16 874, i16 881, i16 889, i16 897, i16 904, i16 912, i16 919, i16 927, i16 935, i16 942, i16 950, i16 957, i16 965, i16 973, i16 980, i16 988, i16 995, i16 1003, i16 1010, i16 1018, i16 1025, i16 1033, i16 1040, i16 1048, i16 1055, i16 1063, i16 1070, i16 1078, i16 1085, i16 1093, i16 1100, i16 1107, i16 1115, i16 1122, i16 1130, i16 1137, i16 1144, i16 1152, i16 1159, i16 1167, i16 1174, i16 1181, i16 1189, i16 1196, i16 1203, i16 1211, i16 1218, i16 1225, i16 1233, i16 1240, i16 1247, i16 1254, i16 1262, i16 1269, i16 1276, i16 1283, i16 1291, i16 1298, i16 1305, i16 1312, i16 1319, i16 1327, i16 1334, i16 1341, i16 1348, i16 1355, i16 1362, i16 1370, i16 1377, i16 1384, i16 1391, i16 1398, i16 1405, i16 1412, i16 1419, i16 1426, i16 1433, i16 1441, i16 1448, i16 1455, i16 1462, i16 1469, i16 1476, i16 1483, i16 1490, i16 1497, i16 1504, i16 1511, i16 1518, i16 1524, i16 1531, i16 1538, i16 1545, i16 1552, i16 1559, i16 1566, i16 1573, i16 1580, i16 1587, i16 1593, i16 1600, i16 1607, i16 1614, i16 1621, i16 1628, i16 1634, i16 1641, i16 1648, i16 1655, i16 1661, i16 1668, i16 1675, i16 1682, i16 1688, i16 1695, i16 1702, i16 1708, i16 1715, i16 1722, i16 1728, i16 1735, i16 1742, i16 1748, i16 1755, i16 1762, i16 1768, i16 1775, i16 1781, i16 1788, i16 1794, i16 1801, i16 1808, i16 1814, i16 1821, i16 1827, i16 1834, i16 1840, i16 1847, i16 1853, i16 1860, i16 1866, i16 1872, i16 1879, i16 1885, i16 1892, i16 1898, i16 1905, i16 1911, i16 1917, i16 1924, i16 1930, i16 1936, i16 1943, i16 1949, i16 1955, i16 1962, i16 1968, i16 1974, i16 1980, i16 1987, i16 1993, i16 1999, i16 2005, i16 2012, i16 2018, i16 2024, i16 2030, i16 2036, i16 2043, i16 2049, i16 2055, i16 2061, i16 2067, i16 2073, i16 2079, i16 2086, i16 2092, i16 2098, i16 2104, i16 2110, i16 2116, i16 2122, i16 2128, i16 2134, i16 2140, i16 2146, i16 2152, i16 2158, i16 2164, i16 2170, i16 2176, i16 2182, i16 2188, i16 2194, i16 2200, i16 2205, i16 2211, i16 2217, i16 2223, i16 2229, i16 2235, i16 2241, i16 2246, i16 2252, i16 2258, i16 2264, i16 2270, i16 2275, i16 2281, i16 2287, i16 2293, i16 2298, i16 2304, i16 2310, i16 2316, i16 2321, i16 2327, i16 2333, i16 2338, i16 2344, i16 2350, i16 2355, i16 2361, i16 2366, i16 2372, i16 2378, i16 2383, i16 2389, i16 2394, i16 2400, i16 2406, i16 2411, i16 2417, i16 2422, i16 2428, i16 2433, i16 2439, i16 2444, i16 2450, i16 2455, i16 2460, i16 2466, i16 2471, i16 2477, i16 2482, i16 2488, i16 2493, i16 2498, i16 2504, i16 2509, i16 2514, i16 2520, i16 2525, i16 2530, i16 2536, i16 2541, i16 2546, i16 2552, i16 2557, i16 2562, i16 2567, i16 2573, i16 2578, i16 2583, i16 2588, i16 2593, i16 2599, i16 2604, i16 2609, i16 2614, i16 2619, i16 2624, i16 2630, i16 2635, i16 2640, i16 2645, i16 2650, i16 2655, i16 2660, i16 2665, i16 2670, i16 2675, i16 2680, i16 2685, i16 2690, i16 2695, i16 2700, i16 2705, i16 2710, i16 2715, i16 2720, i16 2725, i16 2730, i16 2735, i16 2740, i16 2745, i16 2750, i16 2755, i16 2760, i16 2765, i16 2769, i16 2774, i16 2779, i16 2784, i16 2789, i16 2794, i16 2798, i16 2803, i16 2808, i16 2813, i16 2818, i16 2822, i16 2827, i16 2832, i16 2837, i16 2841, i16 2846, i16 2851, i16 2855, i16 2860, i16 2865, i16 2869, i16 2874, i16 2879, i16 2883, i16 2888, i16 2893, i16 2897, i16 2902, i16 2907, i16 2911, i16 2916, i16 2920, i16 2925, i16 2929, i16 2934, i16 2939, i16 2943, i16 2948, i16 2952, i16 2957, i16 2961, i16 2966, i16 2970, i16 2975, i16 2979, i16 2984, i16 2988, i16 2992, i16 2997, i16 3001, i16 3006, i16 3010, i16 3014, i16 3019, i16 3023, i16 3028, i16 3032, i16 3036, i16 3041, i16 3045, i16 3049, i16 3054, i16 3058, i16 3062, i16 3067, i16 3071, i16 3075, i16 3079, i16 3084, i16 3088, i16 3092, i16 3096, i16 3101, i16 3105, i16 3109, i16 3113, i16 3117, i16 3122, i16 3126, i16 3130, i16 3134, i16 3138, i16 3142, i16 3147, i16 3151, i16 3155, i16 3159, i16 3163, i16 3167, i16 3171, i16 3175, i16 3179, i16 3183, i16 3188, i16 3192, i16 3196, i16 3200, i16 3204, i16 3208, i16 3212, i16 3216, i16 3224, i16 3232, i16 3240, i16 3247, i16 3255, i16 3263, i16 3271, i16 3279, i16 3286, i16 3294, i16 3302, i16 3309, i16 3317, i16 3325, i16 3332, i16 3340, i16 3347, i16 3355, i16 3362, i16 3370, i16 3377, i16 3384, i16 3392, i16 3399, i16 3406, i16 3413, i16 3421, i16 3428, i16 3435, i16 3442, i16 3449, i16 3456, i16 3463, i16 3470, i16 3477, i16 3484, i16 3491, i16 3498, i16 3505, i16 3512, i16 3519, i16 3526, i16 3532, i16 3539, i16 3546, i16 3553, i16 3559, i16 3566, i16 3572, i16 3579, i16 3586, i16 3592, i16 3599, i16 3605, i16 3612, i16 3618, i16 3625, i16 3631, i16 3637, i16 3644, i16 3650, i16 3656, i16 3663, i16 3669, i16 3675, i16 3681, i16 3687, i16 3694, i16 3700, i16 3706, i16 3712, i16 3718, i16 3724, i16 3730, i16 3736, i16 3742, i16 3748, i16 3754, i16 3760, i16 3766, i16 3772, i16 3777, i16 3783, i16 3789, i16 3795, i16 3801, i16 3806, i16 3812, i16 3818, i16 3823, i16 3829, i16 3835, i16 3840, i16 3846, i16 3851, i16 3857, i16 3863, i16 3868, i16 3873, i16 3879, i16 3884, i16 3890, i16 3895, i16 3901, i16 3906, i16 3911, i16 3917, i16 3922, i16 3927, i16 3932, i16 3938, i16 3943, i16 3948, i16 3953, i16 3959, i16 3964, i16 3969, i16 3974, i16 3979, i16 3984, i16 3989, i16 3994, i16 3999, i16 4004, i16 4009, i16 4014, i16 4019, i16 4024, i16 4029, i16 4034, i16 4039, i16 4044, i16 4048, i16 4053, i16 4058, i16 4063, i16 4068, i16 4072, i16 4077, i16 4082, i16 4087, i16 4091, i16 4096, i16 4101, i16 4105, i16 4110, i16 4114, i16 4119, i16 4124, i16 4128, i16 4133, i16 4137, i16 4142, i16 4146, i16 4151, i16 4155, i16 4160, i16 4164, i16 4168, i16 4173, i16 4177, i16 4182, i16 4186, i16 4190, i16 4195, i16 4199, i16 4203, i16 4208, i16 4212, i16 4216, i16 4220, i16 4225, i16 4229, i16 4233, i16 4237, i16 4241, i16 4245, i16 4250, i16 4254, i16 4258, i16 4262, i16 4266, i16 4270, i16 4274, i16 4278, i16 4282, i16 4286, i16 4290, i16 4294, i16 4298, i16 4302, i16 4306, i16 4310, i16 4314, i16 4318, i16 4322, i16 4326, i16 4329, i16 4333, i16 4337, i16 4341, i16 4345, i16 4349, i16 4352, i16 4356, i16 4360, i16 4364, i16 4367, i16 4371, i16 4375, i16 4378, i16 4382, i16 4386, i16 4390, i16 4393, i16 4397, i16 4400, i16 4404, i16 4408, i16 4411, i16 4415, i16 4418, i16 4422, i16 4426, i16 4429, i16 4433, i16 4436, i16 4440, i16 4443, i16 4447, i16 4450, i16 4454, i16 4457, i16 4460, i16 4464, i16 4467, i16 4471, i16 4474, i16 4477, i16 4481, i16 4484, i16 4487, i16 4491, i16 4494, i16 4497, i16 4501, i16 4504, i16 4507, i16 4511, i16 4514, i16 4517, i16 4520, i16 4524, i16 4527, i16 4530, i16 4533, i16 4540, i16 4546, i16 4552, i16 4559, i16 4565, i16 4571, i16 4577, i16 4583, i16 4589, i16 4595, i16 4601, i16 4607, i16 4613, i16 4619, i16 4625, i16 4631, i16 4637, i16 4642, i16 4648, i16 4654, i16 4659, i16 4665, i16 4671, i16 4676, i16 4682, i16 4687, i16 4693, i16 4698, i16 4703, i16 4709, i16 4714, i16 4719, i16 4725, i16 4730, i16 4735, i16 4740, i16 4745, i16 4750, i16 4755, i16 4761, i16 4766, i16 4771, i16 4776, i16 4780, i16 4785, i16 4790, i16 4795, i16 4800, i16 4805, i16 4810, i16 4814, i16 4819, i16 4824, i16 4828, i16 4833, i16 4838, i16 4842, i16 4847, i16 4851, i16 4856, i16 4860, i16 4865, i16 4869, i16 4874, i16 4878, i16 4883, i16 4887, i16 4891, i16 4896, i16 4900, i16 4904, i16 4908, i16 4913, i16 4917, i16 4921, i16 4925, i16 4929, i16 4933, i16 4937, i16 4941, i16 4945, i16 4949, i16 4953, i16 4957, i16 4961, i16 4965, i16 4969, i16 4973, i16 4977, i16 4981, i16 4985, i16 4989, i16 4992, i16 4996, i16 5000, i16 5004, i16 5007, i16 5011, i16 5015, i16 5018, i16 5022, i16 5026, i16 5029, i16 5033, i16 5037, i16 5040, i16 5044, i16 5047, i16 5051, i16 5054, i16 5058, i16 5061, i16 5065, i16 5068, i16 5071, i16 5075, i16 5078, i16 5082, i16 5085, i16 5088, i16 5092, i16 5095, i16 5098, i16 5101, i16 5105, i16 5108, i16 5111, i16 5114, i16 5121, i16 5127, i16 5133, i16 5139, i16 5146, i16 5152, i16 5158, i16 5164, i16 5170, i16 5175, i16 5181, i16 5187, i16 5193, i16 5198, i16 5204, i16 5210, i16 5215, i16 5221, i16 5226, i16 5231, i16 5237, i16 5242, i16 5247, i16 5252, i16 5257, i16 5263, i16 5268, i16 5273, i16 5278, i16 5283, i16 5287, i16 5292, i16 5297, i16 5302, i16 5307, i16 5311, i16 5316, i16 5321, i16 5325, i16 5330, i16 5334, i16 5339, i16 5343, i16 5347, i16 5352, i16 5356, i16 5360, i16 5365, i16 5369, i16 5373, i16 5377, i16 5381, i16 5386, i16 5390, i16 5394, i16 5398, i16 5402, i16 5406, i16 5410, i16 5413, i16 5417, i16 5421, i16 5425, i16 5429, i16 5432, i16 5436, i16 5440, i16 5444, i16 5447, i16 5451, i16 5454, i16 5458, i16 5462, i16 5465, i16 5469, i16 5472, i16 5475, i16 5479, i16 5482, i16 5486, i16 5489, i16 5492, i16 5496, i16 5499, i16 5502, i16 5505, i16 5509, i16 5512, i16 5515, i16 5518, i16 5521, i16 5524, i16 5527, i16 5530, i16 5533, i16 5536, i16 5539, i16 5542, i16 5545, i16 5548, i16 5551, i16 5554, i16 5557, i16 5560, i16 5563, i16 5566, i16 5568, i16 5571, i16 5574, i16 5577, i16 5579, i16 5582, i16 5585, i16 5588, i16 5590, i16 5593, i16 5596, i16 5598, i16 5601, i16 5603, i16 5606, i16 5609, i16 5611, i16 5614, i16 5616, i16 5619, i16 5621, i16 5624, i16 5626, i16 5628, i16 5631, i16 5633, i16 5636, i16 5638, i16 5640, i16 5643, i16 5645, i16 5647, i16 5650, i16 5652, i16 5654, i16 5657, i16 5659, i16 5661, i16 5663, i16 5666, i16 5668, i16 5670, i16 5672, i16 5674, i16 5677, i16 5679, i16 5681, i16 5683, i16 5685, i16 5687, i16 5689, i16 5691, i16 5693, i16 5695, i16 5697, i16 5699, i16 5702, i16 5704, i16 5706, i16 5707, i16 5709, i16 5711, i16 5713, i16 5715, i16 5717, i16 5719, i16 5721, i16 5723, i16 5725, i16 5727, i16 5729, i16 5731, i16 5732, i16 5734, i16 5736, i16 5738, i16 5740, i16 5742, i16 5743, i16 5745, i16 5747, i16 5749, i16 5750, i16 5752, i16 5754, i16 5756, i16 5759, i16 5762, i16 5766, i16 5769, i16 5772, i16 5776, i16 5779, i16 5782, i16 5785, i16 5789, i16 5792, i16 5795, i16 5798, i16 5801, i16 5804, i16 5807, i16 5810, i16 5813, i16 5816, i16 5818, i16 5821, i16 5824, i16 5827, i16 5830, i16 5832, i16 5835, i16 5838, i16 5840, i16 5843, i16 5846, i16 5848, i16 5851, i16 5853, i16 5856, i16 5858, i16 5861, i16 5863, i16 5866, i16 5868, i16 5871, i16 5873, i16 5875, i16 5878, i16 5880, i16 5882, i16 5885, i16 5887, i16 5889, i16 5891, i16 5894, i16 5896, i16 5898, i16 5900, i16 5902, i16 5904, i16 5906, i16 5909, i16 5911, i16 5913, i16 5915, i16 5917, i16 5919, i16 5921, i16 5923, i16 5925, i16 5927, i16 5929, i16 5930, i16 5932, i16 5934, i16 5936, i16 5938, i16 5940, i16 5942, i16 5943, i16 5945, i16 5947, i16 5949, i16 5951, i16 5952, i16 5954, i16 5956, i16 5958, i16 5959, i16 5961, i16 5963, i16 5964, i16 5966, i16 5968, i16 5969, i16 5971, i16 5972, i16 5974, i16 5976, i16 5977, i16 5979, i16 5982, i16 5985, i16 5988, i16 5991, i16 5994, i16 5997, i16 6000, i16 6002, i16 6005, i16 6008, i16 6011, i16 6013, i16 6016, i16 6019, i16 6021, i16 6024, i16 6026, i16 6029, i16 6031, i16 6034, i16 6036, i16 6038, i16 6041, i16 6043, i16 6045, i16 6048, i16 6050, i16 6052, i16 6054, i16 6056, i16 6059, i16 6061, i16 6063, i16 6065, i16 6067, i16 6069, i16 6071, i16 6073, i16 6075, i16 6077, i16 6079, i16 6081, i16 6082, i16 6084, i16 6086, i16 6088, i16 6090, i16 6091, i16 6093, i16 6095, i16 6097, i16 6098, i16 6100, i16 6102, i16 6103, i16 6105, i16 6107, i16 6108, i16 6110, i16 6111, i16 6113, i16 6114, i16 6116, i16 6118, i16 6119, i16 6121, i16 6122, i16 6123, i16 6125, i16 6126, i16 6128, i16 6129, i16 6131, i16 6132, i16 6133, i16 6135, i16 6136, i16 6137, i16 6139, i16 6140, i16 6141, i16 6142, i16 6144, i16 6145, i16 6146, i16 6147, i16 6149, i16 6150, i16 6151, i16 6152, i16 6154, i16 6155, i16 6156, i16 6157, i16 6158, i16 6159, i16 6160, i16 6162, i16 6163, i16 6164, i16 6165, i16 6166, i16 6167, i16 6168, i16 6169, i16 6170, i16 6171, i16 6172, i16 6173, i16 6174, i16 6175, i16 6176, i16 6178, i16 6180, i16 6182, i16 6184, i16 6186, i16 6188, i16 6190, i16 6191, i16 6193, i16 6195, i16 6196, i16 6198, i16 6200, i16 6201, i16 6203, i16 6205, i16 6206, i16 6208, i16 6209, i16 6211, i16 6212, i16 6214, i16 6215, i16 6217, i16 6218, i16 6219, i16 6221, i16 6222, i16 6223, i16 6225, i16 6226, i16 6227, i16 6229, i16 6230, i16 6231, i16 6232, i16 6234, i16 6235, i16 6236, i16 6237, i16 6238, i16 6239, i16 6240, i16 6242, i16 6243, i16 6244, i16 6245, i16 6246, i16 6247, i16 6248, i16 6249, i16 6250, i16 6251, i16 6252, i16 6253, i16 6254, i16 6255, i16 6256, i16 6257, i16 6258, i16 6259, i16 6260, i16 6260, i16 6261, i16 6265, i16 6268, i16 6271, i16 6274, i16 6277, i16 6280, i16 6283, i16 6286, i16 6288, i16 6291, i16 6293, i16 6295, i16 6298, i16 6300, i16 6302, i16 6304, i16 6306, i16 6308, i16 6310, i16 6312, i16 6313, i16 6315, i16 6317, i16 6318, i16 6320, i16 6321, i16 6323, i16 6324, i16 6326, i16 6327, i16 6328, i16 6330, i16 6331, i16 6332, i16 6333, i16 6334, i16 6336, i16 6337, i16 6338, i16 6339, i16 6340, i16 6341, i16 6342, i16 6343, i16 6344, i16 6345, i16 6346, i16 6347, i16 6347, i16 6348, i16 6349, i16 6350, i16 6351, i16 6352, i16 6352, i16 6353, i16 6354, i16 6355, i16 6355, i16 6356, i16 6357, i16 6357, i16 6358, i16 6359, i16 6359, i16 6360, i16 6361, i16 6361, i16 6362, i16 6363, i16 6363, i16 6364, i16 6364, i16 6365, i16 6365, i16 6366, i16 6366, i16 6367, i16 6367], align 16
@.str = private unnamed_addr constant [110 x i8] c"((_src_matx.rows <= ROWS ) && (_src_matx.cols <= COLS)) && \22ROWS and COLS should be greater than input image\22\00", align 1
@.str1 = private unnamed_addr constant [13 x i8] c"xf_phase.hpp\00", align 1
@__PRETTY_FUNCTION__._ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_ = private unnamed_addr constant [223 x i8] c"void p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1(struct xf_Mat_2_256_256_1_ &, struct xf_Mat_2_256_256_1_ &, struct xf_Mat_2_256_256_1_ &)\00", align 1
@.str2 = private unnamed_addr constant [110 x i8] c"((_src_maty.rows <= ROWS ) && (_src_maty.cols <= COLS)) && \22ROWS and COLS should be greater than input image\22\00", align 1
@.str3 = private unnamed_addr constant [121 x i8] c"((_src_matx.rows == _src_maty.rows ) && (_src_matx.cols == _src_maty.cols)) && \22Both input images should have same size\22\00", align 1
@.str4 = private unnamed_addr constant [125 x i8] c"((_src_matx.rows == _dst_mat.rows ) && (_src_matx.cols == _dst_mat.cols)) && \22Input and output image should be of same size\22\00", align 1
@.str5 = private unnamed_addr constant [105 x i8] c"((N1 == 16-M1) && (N2==16-M2) && (M1==M2)) && \22xs and ys should be of 16-bit and same fixed point type.\22\00", align 1
@.str6 = private unnamed_addr constant [10 x i8] c"xf_math.h\00", align 1
@__PRETTY_FUNCTION__._ZL29p_ZN2xf13Atan2LookupFPEssiiiissiiii = private unnamed_addr constant [70 x i8] c"short p_ZN2xf13Atan2LookupFPEssiiii(short, short, int, int, int, int)\00", align 1
@.str7 = private unnamed_addr constant [79 x i8] c"(M<=16) && \22Integer part of x should always be less than or equal to 16 bits.\22\00", align 1
@__PRETTY_FUNCTION__._ZL20p_ZN2xf7InverseEtiPctiPc = private unnamed_addr constant [63 x i8] c"unsigned int p_ZN2xf7InverseEtiPc(unsigned short, int, char *)\00", align 1
@.str8 = private unnamed_addr constant [143 x i8] c"(_rows > 0) && (_rows <= ROWS) && (_cols > 0) && (_cols <= COLS) && \22The number of rows and columns must be less than the template arguments.\22\00", align 1
@.str9 = private unnamed_addr constant [13 x i8] c"xf_structs.h\00", align 1
@__PRETTY_FUNCTION__._ZL38p_ZN2xf16Mat_2_256_256_1_4initIEEiib_1P19xf_Mat_2_256_256_1_iib = private unnamed_addr constant [90 x i8] c"void p_ZN2xf16Mat_2_256_256_1_4initIEEiib_1(struct xf_Mat_2_256_256_1_ *, int, int, bool)\00", align 1

define void @_Z11phase_accelP7ap_uintILi256EES1_S1_ii(%class.ap_uint* %img_inp1, %class.ap_uint* %img_inp2, %class.ap_uint* %img_out, i32 %rows, i32 %cols) uwtable {
  %1 = alloca %class.ap_uint*, align 8
  %2 = alloca %class.ap_uint*, align 8
  %3 = alloca %class.ap_uint*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %pROWS = alloca i32, align 4
  %pCOLS = alloca i32, align 4
  %pNPC1 = alloca i32, align 4
  %_src1 = alloca %struct.xf_Mat_2_256_256_1_, align 4
  %_src2 = alloca %struct.xf_Mat_2_256_256_1_, align 4
  %_dst = alloca %struct.xf_Mat_2_256_256_1_, align 4
  store %class.ap_uint* %img_inp1, %class.ap_uint** %1, align 8
  store %class.ap_uint* %img_inp2, %class.ap_uint** %2, align 8
  store %class.ap_uint* %img_out, %class.ap_uint** %3, align 8
  store i32 %rows, i32* %4, align 4
  store i32 %cols, i32* %5, align 4
  store i32 256, i32* %pROWS, align 4
  store i32 256, i32* %pCOLS, align 4
  store i32 1, i32* %pNPC1, align 4
  call void @_ZN19xf_Mat_2_256_256_1_C1Ev(%struct.xf_Mat_2_256_256_1_* %_src1)
  call void @_ZL33p_ZN2xf16Mat_2_256_256_1_C2IEEv_1P19xf_Mat_2_256_256_1_(%struct.xf_Mat_2_256_256_1_* %_src1)
  %6 = load i32* %4, align 4
  %7 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %_src1, i32 0, i32 1
  store i32 %6, i32* %7, align 4
  %8 = load i32* %5, align 4
  %9 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %_src1, i32 0, i32 2
  store i32 %8, i32* %9, align 4
  call void @_ZN19xf_Mat_2_256_256_1_C1Ev(%struct.xf_Mat_2_256_256_1_* %_src2)
  call void @_ZL33p_ZN2xf16Mat_2_256_256_1_C2IEEv_1P19xf_Mat_2_256_256_1_(%struct.xf_Mat_2_256_256_1_* %_src2)
  %10 = load i32* %4, align 4
  %11 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %_src2, i32 0, i32 1
  store i32 %10, i32* %11, align 4
  %12 = load i32* %5, align 4
  %13 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %_src2, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  call void @_ZN19xf_Mat_2_256_256_1_C1Ev(%struct.xf_Mat_2_256_256_1_* %_dst)
  call void @_ZL33p_ZN2xf16Mat_2_256_256_1_C2IEEv_1P19xf_Mat_2_256_256_1_(%struct.xf_Mat_2_256_256_1_* %_dst)
  %14 = load i32* %4, align 4
  %15 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %_dst, i32 0, i32 1
  store i32 %14, i32* %15, align 4
  %16 = load i32* %5, align 4
  %17 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %_dst, i32 0, i32 2
  store i32 %16, i32* %17, align 4
  %18 = load %class.ap_uint** %1, align 8
  call void @_ZL95p_ZN2xf11Array2xfMatILi256ELi2ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi2ELi256ELi256ELi1EE_1P7ap_uintILi256EER19xf_Mat_2_256_256_1_(%class.ap_uint* %18, %struct.xf_Mat_2_256_256_1_* %_src1)
  %19 = load %class.ap_uint** %2, align 8
  call void @_ZL95p_ZN2xf11Array2xfMatILi256ELi2ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi2ELi256ELi256ELi1EE_1P7ap_uintILi256EER19xf_Mat_2_256_256_1_(%class.ap_uint* %19, %struct.xf_Mat_2_256_256_1_* %_src2)
  call void @_ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_(%struct.xf_Mat_2_256_256_1_* %_src1, %struct.xf_Mat_2_256_256_1_* %_src2, %struct.xf_Mat_2_256_256_1_* %_dst)
  %20 = load %class.ap_uint** %3, align 8
  call void @_ZL95p_ZN2xf11xfMat2ArrayILi256ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EEP7ap_uintILi256EE_1R19xf_Mat_2_256_256_1_P7ap_uintILi256EE(%struct.xf_Mat_2_256_256_1_* %_dst, %class.ap_uint* %20)
  ret void
}

define linkonce_odr void @_ZN19xf_Mat_2_256_256_1_C1Ev(%struct.xf_Mat_2_256_256_1_* %this) unnamed_addr uwtable inlinehint align 2 {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  store %struct.xf_Mat_2_256_256_1_* %this, %struct.xf_Mat_2_256_256_1_** %1, align 8
  %2 = load %struct.xf_Mat_2_256_256_1_** %1
  call void @_ZN19xf_Mat_2_256_256_1_C2Ev(%struct.xf_Mat_2_256_256_1_* %2)
  ret void
}

define internal void @_ZL33p_ZN2xf16Mat_2_256_256_1_C2IEEv_1P19xf_Mat_2_256_256_1_(%struct.xf_Mat_2_256_256_1_* %this_) uwtable {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  store %struct.xf_Mat_2_256_256_1_* %this_, %struct.xf_Mat_2_256_256_1_** %1, align 8
  %2 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  call void @_ZL38p_ZN2xf16Mat_2_256_256_1_4initIEEiib_1P19xf_Mat_2_256_256_1_iib(%struct.xf_Mat_2_256_256_1_* %2, i32 256, i32 256, i1 zeroext true)
  ret void
}

define internal void @_ZL95p_ZN2xf11Array2xfMatILi256ELi2ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi2ELi256ELi256ELi1EE_1P7ap_uintILi256EER19xf_Mat_2_256_256_1_(%class.ap_uint* %srcPtr, %struct.xf_Mat_2_256_256_1_* %dstMat) uwtable {
  %1 = alloca %class.ap_uint*, align 8
  %2 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %au = alloca %struct.xf_accel_utils, align 1
  store %class.ap_uint* %srcPtr, %class.ap_uint** %1, align 8
  store %struct.xf_Mat_2_256_256_1_* %dstMat, %struct.xf_Mat_2_256_256_1_** %2, align 8
  %3 = load %class.ap_uint** %1, align 8
  %4 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  call void @_ZL108p_ZN2xf11accel_utils11Array2xfMatILi256ELi2ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi2ELi256ELi256ELi1EE_1P14xf_accel_utilsP7ap_uintILi256EER19xf_Mat_2_256_256_1_(%struct.xf_accel_utils* %au, %class.ap_uint* %3, %struct.xf_Mat_2_256_256_1_* %4)
  ret void
}

define internal void @_ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_(%struct.xf_Mat_2_256_256_1_* %_src_matx, %struct.xf_Mat_2_256_256_1_* %_src_maty, %struct.xf_Mat_2_256_256_1_* %_dst_mat) uwtable {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %2 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %3 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %imgwidth = alloca i16, align 2
  %imgheight = alloca i16, align 2
  store %struct.xf_Mat_2_256_256_1_* %_src_matx, %struct.xf_Mat_2_256_256_1_** %1, align 8
  store %struct.xf_Mat_2_256_256_1_* %_src_maty, %struct.xf_Mat_2_256_256_1_** %2, align 8
  store %struct.xf_Mat_2_256_256_1_* %_dst_mat, %struct.xf_Mat_2_256_256_1_** %3, align 8
  %4 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %5 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %4, i32 0, i32 1
  %6 = load i32* %5, align 4
  %7 = icmp sle i32 %6, 256
  br i1 %7, label %8, label %14

; <label>:8                                       ; preds = %0
  %9 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %10 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %9, i32 0, i32 2
  %11 = load i32* %10, align 4
  %12 = icmp sle i32 %11, 256
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %8
  br label %16

; <label>:14                                      ; preds = %8, %0
  call void @__assert_fail(i8* getelementptr inbounds ([110 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0), i32 180, i8* getelementptr inbounds ([223 x i8]* @__PRETTY_FUNCTION__._ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %16

; <label>:16                                      ; preds = %15, %13
  %17 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %18 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %17, i32 0, i32 1
  %19 = load i32* %18, align 4
  %20 = icmp sle i32 %19, 256
  br i1 %20, label %21, label %27

; <label>:21                                      ; preds = %16
  %22 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %23 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %22, i32 0, i32 2
  %24 = load i32* %23, align 4
  %25 = icmp sle i32 %24, 256
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %21
  br label %29

; <label>:27                                      ; preds = %21, %16
  call void @__assert_fail(i8* getelementptr inbounds ([110 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0), i32 181, i8* getelementptr inbounds ([223 x i8]* @__PRETTY_FUNCTION__._ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %29

; <label>:29                                      ; preds = %28, %26
  %30 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %31 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %30, i32 0, i32 1
  %32 = load i32* %31, align 4
  %33 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %34 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %33, i32 0, i32 1
  %35 = load i32* %34, align 4
  %36 = icmp eq i32 %32, %35
  br i1 %36, label %37, label %46

; <label>:37                                      ; preds = %29
  %38 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %39 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %38, i32 0, i32 2
  %40 = load i32* %39, align 4
  %41 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %42 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %41, i32 0, i32 2
  %43 = load i32* %42, align 4
  %44 = icmp eq i32 %40, %43
  br i1 %44, label %45, label %46

; <label>:45                                      ; preds = %37
  br label %48

; <label>:46                                      ; preds = %37, %29
  call void @__assert_fail(i8* getelementptr inbounds ([121 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0), i32 182, i8* getelementptr inbounds ([223 x i8]* @__PRETTY_FUNCTION__._ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %48

; <label>:48                                      ; preds = %47, %45
  %49 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %50 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %49, i32 0, i32 1
  %51 = load i32* %50, align 4
  %52 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %53 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %52, i32 0, i32 1
  %54 = load i32* %53, align 4
  %55 = icmp eq i32 %51, %54
  br i1 %55, label %56, label %65

; <label>:56                                      ; preds = %48
  %57 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %58 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %57, i32 0, i32 2
  %59 = load i32* %58, align 4
  %60 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %61 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %60, i32 0, i32 2
  %62 = load i32* %61, align 4
  %63 = icmp eq i32 %59, %62
  br i1 %63, label %64, label %65

; <label>:64                                      ; preds = %56
  br label %67

; <label>:65                                      ; preds = %56, %48
  call void @__assert_fail(i8* getelementptr inbounds ([125 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0), i32 183, i8* getelementptr inbounds ([223 x i8]* @__PRETTY_FUNCTION__._ZL127p_ZN2xf5phaseILi1ELi2ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EE_1R19xf_Mat_2_256_256_1_S0_S0_, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %67

; <label>:67                                      ; preds = %66, %64
  %68 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %69 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %68, i32 0, i32 2
  %70 = load i32* %69, align 4
  %71 = ashr i32 %70, 0
  %72 = trunc i32 %71 to i16
  store i16 %72, i16* %imgwidth, align 2
  %73 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %74 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %73, i32 0, i32 1
  %75 = load i32* %74, align 4
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %imgheight, align 2
  %77 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %78 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %79 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  call void @_ZL159p_ZN2xf13xfPhaseKernelILi2ELi2ELi256ELi256ELi3ELi3ELi1ELi5ELi5ELi256EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EEiRtRt_1R19xf_Mat_2_256_256_1_S0_S0_iRtS1_(%struct.xf_Mat_2_256_256_1_* %77, %struct.xf_Mat_2_256_256_1_* %78, %struct.xf_Mat_2_256_256_1_* %79, i32 1, i16* %imgheight, i16* %imgwidth)
  ret void
}

define internal void @_ZL95p_ZN2xf11xfMat2ArrayILi256ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EEP7ap_uintILi256EE_1R19xf_Mat_2_256_256_1_P7ap_uintILi256EE(%struct.xf_Mat_2_256_256_1_* %srcMat, %class.ap_uint* %dstPtr) uwtable {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %2 = alloca %class.ap_uint*, align 8
  %au = alloca %struct.xf_accel_utils, align 1
  store %struct.xf_Mat_2_256_256_1_* %srcMat, %struct.xf_Mat_2_256_256_1_** %1, align 8
  store %class.ap_uint* %dstPtr, %class.ap_uint** %2, align 8
  %3 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %4 = load %class.ap_uint** %2, align 8
  call void @_ZL108p_ZN2xf11accel_utils11xfMat2ArrayILi256ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EEP7ap_uintILi256EE_1P14xf_accel_utilsR19xf_Mat_2_256_256_1_P7ap_uintILi256EE(%struct.xf_accel_utils* %au, %struct.xf_Mat_2_256_256_1_* %3, %class.ap_uint* %4)
  ret void
}

define internal void @_ZL108p_ZN2xf11accel_utils11xfMat2ArrayILi256ELi2ELi256ELi256ELi1EEER3MatILi2ELi256ELi256ELi1EEP7ap_uintILi256EE_1P14xf_accel_utilsR19xf_Mat_2_256_256_1_P7ap_uintILi256EE(%struct.xf_accel_utils* %this_, %struct.xf_Mat_2_256_256_1_* %srcMat, %class.ap_uint* %dstPtr) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %3 = alloca %class.ap_uint*, align 8
  %ch_width = alloca i32, align 4
  %strm = alloca %"class.hls::stream", align 1
  %rows = alloca i32, align 4
  %cols = alloca i32, align 4
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %struct.xf_Mat_2_256_256_1_* %srcMat, %struct.xf_Mat_2_256_256_1_** %2, align 8
  store %class.ap_uint* %dstPtr, %class.ap_uint** %3, align 8
  store i32 16, i32* %ch_width, align 4
  call void @_ZN3hls6streamI7ap_uintILi256EEEC1Ev(%"class.hls::stream"* %strm)
  %4 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %5 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %4, i32 0, i32 1
  %6 = load i32* %5, align 4
  store i32 %6, i32* %rows, align 4
  %7 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %8 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %7, i32 0, i32 2
  %9 = load i32* %8, align 4
  store i32 %9, i32* %cols, align 4
  %10 = load %struct.xf_accel_utils** %1, align 8
  %11 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  call void @_ZL127p_ZN2xf11accel_utils13xfMat2hlsStrmILi256ELi2ELi256ELi256ELi1ELi65536EEER3MatILi2ELi256ELi256ELi1EER6streamI7ap_uintILi256EEE_1P14xf_accel_utilsR19xf_Mat_2_256_256_1_RN3hls6streamI7ap_uintILi256EEEE(%struct.xf_accel_utils* %10, %struct.xf_Mat_2_256_256_1_* %11, %"class.hls::stream"* %strm)
  %12 = load %struct.xf_accel_utils** %1, align 8
  %13 = load %class.ap_uint** %3, align 8
  %14 = load i32* %rows, align 4
  %15 = load i32* %cols, align 4
  call void @_ZL123p_ZN2xf11accel_utils13hlsStrm2ArrayILi256ELi256ELi256ELi1ELi1ELi16ELi4096EEER6streamI7ap_uintILi256EEEP7ap_uintILi256EEii_1P14xf_accel_utilsRN3hls6streamI7ap_uintILi256EEEEPS4_ii(%struct.xf_accel_utils* %12, %"class.hls::stream"* %strm, %class.ap_uint* %13, i32 %14, i32 %15)
  ret void
}

declare void @_ZN3hls6streamI7ap_uintILi256EEEC1Ev(%"class.hls::stream"*)

define internal void @_ZL127p_ZN2xf11accel_utils13xfMat2hlsStrmILi256ELi2ELi256ELi256ELi1ELi65536EEER3MatILi2ELi256ELi256ELi1EER6streamI7ap_uintILi256EEE_1P14xf_accel_utilsR19xf_Mat_2_256_256_1_RN3hls6streamI7ap_uintILi256EEEE(%struct.xf_accel_utils* %this_, %struct.xf_Mat_2_256_256_1_* %srcMat, %"class.hls::stream"* %dstStrm) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %3 = alloca %"class.hls::stream"*, align 8
  %rows = alloca i32, align 4
  %cols = alloca i32, align 4
  %loop_count = alloca i32, align 4
  %bits_to_add = alloca i32, align 4
  %N_size = alloca i32, align 4
  %r = alloca %class.ap_uint, align 1
  %in = alloca %class.ap_uint.0, align 1
  %i = alloca i32, align 4
  %4 = alloca %class.ap_uint.0, align 1
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %struct.xf_Mat_2_256_256_1_* %srcMat, %struct.xf_Mat_2_256_256_1_** %2, align 8
  store %"class.hls::stream"* %dstStrm, %"class.hls::stream"** %3, align 8
  %5 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %6 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %5, i32 0, i32 1
  %7 = load i32* %6, align 4
  store i32 %7, i32* %rows, align 4
  %8 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %9 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %8, i32 0, i32 2
  %10 = load i32* %9, align 4
  store i32 %10, i32* %cols, align 4
  %11 = load i32* %rows, align 4
  %12 = load i32* %cols, align 4
  %13 = mul nsw i32 %11, %12
  %14 = sdiv i32 %13, 1
  store i32 %14, i32* %loop_count, align 4
  store i32 256, i32* %bits_to_add, align 4
  store i32 16, i32* %N_size, align 4
  call void @_ZN7ap_uintILi256EEC1Ev(%class.ap_uint* %r)
  call void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0* %in)
  br label %15

; <label>:15                                      ; preds = %0
  store i32 0, i32* %i, align 4
  br label %16

; <label>:16                                      ; preds = %64, %15
  %17 = load i32* %i, align 4
  %18 = load i32* %loop_count, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %67

; <label>:20                                      ; preds = %16
  %21 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %22 = load i32* %i, align 4
  %23 = call i16 @_ZL36p_ZN2xf16Mat_2_256_256_1_4readIEEi_1P19xf_Mat_2_256_256_1_i(%struct.xf_Mat_2_256_256_1_* %21, i32 %22)
  %24 = getelementptr %class.ap_uint.0* %4, i32 0, i32 0
  %25 = bitcast [2 x i8]* %24 to i16*
  store i16 %23, i16* %25, align 1
  %26 = call %class.ap_uint.0* @_ZN7ap_uintILi16EEaSERKS0_(%class.ap_uint.0* %in, %class.ap_uint.0* %4)
  %27 = load i32* %bits_to_add, align 4
  %28 = icmp sle i32 %27, 16
  br i1 %28, label %29, label %52

; <label>:29                                      ; preds = %20
  %30 = load i32* %bits_to_add, align 4
  %31 = sub nsw i32 %30, 1
  %32 = call i64* @_ZN7ap_uintILi16EE5rangeEii(%class.ap_uint.0* %in, i32 %31, i32 0)
  %33 = load i64* %32
  %34 = load i32* %bits_to_add, align 4
  %35 = sub nsw i32 256, %34
  %36 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 255, i32 %35)
  store i64 %33, i64* %36
  %37 = load %"class.hls::stream"** %3, align 8
  call void @_ZN3hls6streamI7ap_uintILi256EEE5writeERKS2_(%"class.hls::stream"* %37, %class.ap_uint* %r)
  %38 = load i32* %bits_to_add, align 4
  %39 = icmp ne i32 %38, 16
  br i1 %39, label %40, label %48

; <label>:40                                      ; preds = %29
  %41 = load i32* %bits_to_add, align 4
  %42 = call i64* @_ZN7ap_uintILi16EE5rangeEii(%class.ap_uint.0* %in, i32 15, i32 %41)
  %43 = load i64* %42
  %44 = load i32* %bits_to_add, align 4
  %45 = sub nsw i32 16, %44
  %46 = sub nsw i32 %45, 1
  %47 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 %46, i32 0)
  store i64 %43, i64* %47
  br label %48

; <label>:48                                      ; preds = %40, %29
  %49 = load i32* %bits_to_add, align 4
  %50 = sub nsw i32 16, %49
  %51 = sub nsw i32 256, %50
  store i32 %51, i32* %bits_to_add, align 4
  br label %63

; <label>:52                                      ; preds = %20
  %53 = call i64 @_ZNK7ap_uintILi16EEcvmEv(%class.ap_uint.0* %in)
  %54 = load i32* %bits_to_add, align 4
  %55 = sub nsw i32 256, %54
  %56 = add nsw i32 %55, 16
  %57 = sub nsw i32 %56, 1
  %58 = load i32* %bits_to_add, align 4
  %59 = sub nsw i32 256, %58
  %60 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 %57, i32 %59)
  store i64 %53, i64* %60
  %61 = load i32* %bits_to_add, align 4
  %62 = sub nsw i32 %61, 16
  store i32 %62, i32* %bits_to_add, align 4
  br label %63

; <label>:63                                      ; preds = %52, %48
  br label %64

; <label>:64                                      ; preds = %63
  %65 = load i32* %i, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %i, align 4
  br label %16

; <label>:67                                      ; preds = %16
  %68 = load i32* %bits_to_add, align 4
  %69 = icmp ne i32 %68, 256
  br i1 %69, label %70, label %72

; <label>:70                                      ; preds = %67
  %71 = load %"class.hls::stream"** %3, align 8
  call void @_ZN3hls6streamI7ap_uintILi256EEE5writeERKS2_(%"class.hls::stream"* %71, %class.ap_uint* %r)
  br label %72

; <label>:72                                      ; preds = %70, %67
  ret void
}

define internal void @_ZL123p_ZN2xf11accel_utils13hlsStrm2ArrayILi256ELi256ELi256ELi1ELi1ELi16ELi4096EEER6streamI7ap_uintILi256EEEP7ap_uintILi256EEii_1P14xf_accel_utilsRN3hls6streamI7ap_uintILi256EEEEPS4_ii(%struct.xf_accel_utils* %this_, %"class.hls::stream"* %srcStrm, %class.ap_uint* %dstPtr, i32 %rows, i32 %cols) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %"class.hls::stream"*, align 8
  %3 = alloca %class.ap_uint*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %pixel_width = alloca i32, align 4
  %loop_count = alloca i32, align 4
  %i = alloca i32, align 4
  %6 = alloca %class.ap_uint, align 1
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %"class.hls::stream"* %srcStrm, %"class.hls::stream"** %2, align 8
  store %class.ap_uint* %dstPtr, %class.ap_uint** %3, align 8
  store i32 %rows, i32* %4, align 4
  store i32 %cols, i32* %5, align 4
  store i32 16, i32* %pixel_width, align 4
  %7 = load i32* %4, align 4
  %8 = load i32* %5, align 4
  %9 = mul nsw i32 %7, %8
  %10 = load i32* %pixel_width, align 4
  %11 = mul nsw i32 %9, %10
  %12 = add nsw i32 %11, 256
  %13 = sub nsw i32 %12, 1
  %14 = sdiv i32 %13, 256
  store i32 %14, i32* %loop_count, align 4
  store i32 0, i32* %i, align 4
  br label %15

; <label>:15                                      ; preds = %26, %0
  %16 = load i32* %i, align 4
  %17 = load i32* %loop_count, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %29

; <label>:19                                      ; preds = %15
  %20 = load i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = load %class.ap_uint** %3, align 8
  %23 = getelementptr inbounds %class.ap_uint* %22, i64 %21
  %24 = load %"class.hls::stream"** %2, align 8
  call void @_ZN3hls6streamI7ap_uintILi256EEE4readEv(%class.ap_uint* sret %6, %"class.hls::stream"* %24)
  %25 = call %class.ap_uint* @_ZN7ap_uintILi256EEaSERKS0_(%class.ap_uint* %23, %class.ap_uint* %6)
  br label %26

; <label>:26                                      ; preds = %19
  %27 = load i32* %i, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %i, align 4
  br label %15

; <label>:29                                      ; preds = %15
  ret void
}

declare %class.ap_uint* @_ZN7ap_uintILi256EEaSERKS0_(%class.ap_uint*, %class.ap_uint*)

declare void @_ZN3hls6streamI7ap_uintILi256EEE4readEv(%class.ap_uint* sret, %"class.hls::stream"*)

declare void @_ZN7ap_uintILi256EEC1Ev(%class.ap_uint*)

declare void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0*)

declare %class.ap_uint.0* @_ZN7ap_uintILi16EEaSERKS0_(%class.ap_uint.0*, %class.ap_uint.0*)

define internal i16 @_ZL36p_ZN2xf16Mat_2_256_256_1_4readIEEi_1P19xf_Mat_2_256_256_1_i(%struct.xf_Mat_2_256_256_1_* %this_, i32 %index) nounwind uwtable {
  %1 = alloca %class.ap_uint.0, align 1
  %2 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %3 = alloca i32, align 4
  store %struct.xf_Mat_2_256_256_1_* %this_, %struct.xf_Mat_2_256_256_1_** %2, align 8
  store i32 %index, i32* %3, align 4
  %4 = load i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %7 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %6, i32 0, i32 4
  %8 = getelementptr inbounds [65536 x %class.ap_uint.0]* %7, i32 0, i64 %5
  %9 = bitcast %class.ap_uint.0* %1 to i8*
  %10 = bitcast %class.ap_uint.0* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 2, i32 1, i1 false)
  %11 = getelementptr %class.ap_uint.0* %1, i32 0, i32 0
  %12 = bitcast [2 x i8]* %11 to i16*
  %13 = load i16* %12, align 1
  ret i16 %13
}

declare i64* @_ZN7ap_uintILi16EE5rangeEii(%class.ap_uint.0*, i32, i32)

declare i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint*, i32, i32)

declare void @_ZN3hls6streamI7ap_uintILi256EEE5writeERKS2_(%"class.hls::stream"*, %class.ap_uint*)

declare i64 @_ZNK7ap_uintILi16EEcvmEv(%class.ap_uint.0*)

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare void @__assert_fail(i8*, i8*, i32, i8*) noreturn nounwind

define internal void @_ZL159p_ZN2xf13xfPhaseKernelILi2ELi2ELi256ELi256ELi3ELi3ELi1ELi5ELi5ELi256EEER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EER3MatILi2ELi256ELi256ELi1EEiRtRt_1R19xf_Mat_2_256_256_1_S0_S0_iRtS1_(%struct.xf_Mat_2_256_256_1_* %_src1, %struct.xf_Mat_2_256_256_1_* %_src2, %struct.xf_Mat_2_256_256_1_* %_dst_mat, i32 %_out_format, i16* %imgheight, i16* %imgwidth) uwtable {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %2 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %3 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16*, align 8
  %6 = alloca i16*, align 8
  %M1 = alloca i32, align 4
  %N1 = alloca i32, align 4
  %M2 = alloca i32, align 4
  %N2 = alloca i32, align 4
  %val_src1 = alloca %class.ap_uint.0, align 1
  %val_src2 = alloca %class.ap_uint.0, align 1
  %val_dst = alloca %class.ap_uint.0, align 1
  %p = alloca i16, align 2
  %q = alloca i16, align 2
  %ret = alloca i16, align 2
  %result = alloca i16, align 2
  %result_temp = alloca i32, align 4
  %i = alloca %class.ap_uint.1, align 1
  %7 = alloca %class.ap_uint.1, align 1
  %j = alloca %class.ap_uint.1, align 1
  %8 = alloca %class.ap_uint.1, align 1
  %9 = alloca %class.ap_uint.0, align 1
  %10 = alloca %class.ap_uint.1, align 1
  %11 = alloca %class.ap_uint.1, align 1
  %12 = alloca %class.ap_int, align 1
  %13 = alloca %class.ap_uint.0, align 1
  %14 = alloca %class.ap_uint.1, align 1
  %15 = alloca %class.ap_uint.1, align 1
  %16 = alloca %class.ap_int, align 1
  %proc_loop = alloca i32, align 4
  %step = alloca i32, align 4
  %k = alloca %class.ap_uint.2, align 1
  %17 = alloca %class.ap_uint.2, align 1
  %_in_k = alloca %class.ap_uint.2, align 1
  %18 = alloca %class.ap_uint.2, align 1
  %19 = alloca %class.ap_uint.2, align 1
  %20 = alloca %class.ap_uint.2, align 1
  %21 = alloca %class.ap_uint.2, align 1
  %22 = alloca %class.ap_uint.2, align 1
  %23 = alloca %class.ap_uint.1, align 1
  %24 = alloca %class.ap_uint.1, align 1
  %25 = alloca %class.ap_int, align 1
  %26 = alloca %class.ap_uint.0, align 1
  %27 = alloca %class.ap_uint.1, align 1
  %28 = alloca %class.ap_uint.1, align 1
  store %struct.xf_Mat_2_256_256_1_* %_src1, %struct.xf_Mat_2_256_256_1_** %1, align 8
  store %struct.xf_Mat_2_256_256_1_* %_src2, %struct.xf_Mat_2_256_256_1_** %2, align 8
  store %struct.xf_Mat_2_256_256_1_* %_dst_mat, %struct.xf_Mat_2_256_256_1_** %3, align 8
  store i32 %_out_format, i32* %4, align 4
  store i16* %imgheight, i16** %5, align 8
  store i16* %imgwidth, i16** %6, align 8
  store i32 1, i32* %M1, align 4
  %29 = load i32* %M1, align 4
  %30 = sub nsw i32 16, %29
  store i32 %30, i32* %N1, align 4
  %31 = load i32* %M1, align 4
  store i32 %31, i32* %M2, align 4
  %32 = load i32* %M2, align 4
  %33 = sub nsw i32 16, %32
  store i32 %33, i32* %N2, align 4
  call void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0* %val_src1)
  call void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0* %val_src2)
  call void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0* %val_dst)
  store i16 0, i16* %ret, align 2
  store i32 0, i32* %result_temp, align 4
  br label %34

; <label>:34                                      ; preds = %0
  call void @_ZN7ap_uintILi13EEC1Ei(%class.ap_uint.1* %i, i32 0)
  br label %35

; <label>:35                                      ; preds = %224, %34
  %36 = bitcast %class.ap_uint.1* %7 to i8*
  %37 = bitcast %class.ap_uint.1* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 2, i32 1, i1 false)
  %38 = load i16** %5, align 8
  %39 = load i16* %38, align 2
  %40 = getelementptr %class.ap_uint.1* %7, i32 0, i32 0
  %41 = bitcast [2 x i8]* %40 to i16*
  %42 = load i16* %41, align 1
  %43 = call zeroext i1 @_ZltILi13EEb7ap_uintIXT_EEt(i16 %42, i16 zeroext %39)
  br i1 %43, label %44, label %228

; <label>:44                                      ; preds = %35
  br label %45

; <label>:45                                      ; preds = %44
  call void @_ZN7ap_uintILi13EEC1Ei(%class.ap_uint.1* %j, i32 0)
  br label %46

; <label>:46                                      ; preds = %219, %45
  %47 = bitcast %class.ap_uint.1* %8 to i8*
  %48 = bitcast %class.ap_uint.1* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 2, i32 1, i1 false)
  %49 = load i16** %6, align 8
  %50 = load i16* %49, align 2
  %51 = getelementptr %class.ap_uint.1* %8, i32 0, i32 0
  %52 = bitcast [2 x i8]* %51 to i16*
  %53 = load i16* %52, align 1
  %54 = call zeroext i1 @_ZltILi13EEb7ap_uintIXT_EEt(i16 %53, i16 zeroext %50)
  br i1 %54, label %55, label %223

; <label>:55                                      ; preds = %46
  %56 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %57 = load i16** %6, align 8
  %58 = load i16* %57, align 2
  %59 = call i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.1* %i, i16 zeroext %58)
  %60 = getelementptr %class.ap_uint.1* %10, i32 0, i32 0
  %61 = bitcast [2 x i8]* %60 to i16*
  store i16 %59, i16* %61, align 1
  %62 = bitcast %class.ap_uint.1* %11 to i8*
  %63 = bitcast %class.ap_uint.1* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 2, i32 1, i1 false)
  %64 = getelementptr %class.ap_uint.1* %10, i32 0, i32 0
  %65 = bitcast [2 x i8]* %64 to i16*
  %66 = load i16* %65, align 1
  %67 = getelementptr %class.ap_uint.1* %11, i32 0, i32 0
  %68 = bitcast [2 x i8]* %67 to i16*
  %69 = load i16* %68, align 1
  %70 = call i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16 %66, i16 %69)
  %71 = getelementptr %class.ap_int* %12, i32 0, i32 0
  %72 = bitcast [4 x i8]* %71 to i32*
  store i32 %70, i32* %72, align 1
  %73 = call i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int* %12)
  %74 = trunc i64 %73 to i32
  %75 = call i16 @_ZL36p_ZN2xf16Mat_2_256_256_1_4readIEEi_1P19xf_Mat_2_256_256_1_i(%struct.xf_Mat_2_256_256_1_* %56, i32 %74)
  %76 = getelementptr %class.ap_uint.0* %9, i32 0, i32 0
  %77 = bitcast [2 x i8]* %76 to i16*
  store i16 %75, i16* %77, align 1
  %78 = call %class.ap_uint.0* @_ZN7ap_uintILi16EEaSERKS0_(%class.ap_uint.0* %val_src1, %class.ap_uint.0* %9)
  %79 = load %struct.xf_Mat_2_256_256_1_** %2, align 8
  %80 = load i16** %6, align 8
  %81 = load i16* %80, align 2
  %82 = call i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.1* %i, i16 zeroext %81)
  %83 = getelementptr %class.ap_uint.1* %14, i32 0, i32 0
  %84 = bitcast [2 x i8]* %83 to i16*
  store i16 %82, i16* %84, align 1
  %85 = bitcast %class.ap_uint.1* %15 to i8*
  %86 = bitcast %class.ap_uint.1* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 2, i32 1, i1 false)
  %87 = getelementptr %class.ap_uint.1* %14, i32 0, i32 0
  %88 = bitcast [2 x i8]* %87 to i16*
  %89 = load i16* %88, align 1
  %90 = getelementptr %class.ap_uint.1* %15, i32 0, i32 0
  %91 = bitcast [2 x i8]* %90 to i16*
  %92 = load i16* %91, align 1
  %93 = call i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16 %89, i16 %92)
  %94 = getelementptr %class.ap_int* %16, i32 0, i32 0
  %95 = bitcast [4 x i8]* %94 to i32*
  store i32 %93, i32* %95, align 1
  %96 = call i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int* %16)
  %97 = trunc i64 %96 to i32
  %98 = call i16 @_ZL36p_ZN2xf16Mat_2_256_256_1_4readIEEi_1P19xf_Mat_2_256_256_1_i(%struct.xf_Mat_2_256_256_1_* %79, i32 %97)
  %99 = getelementptr %class.ap_uint.0* %13, i32 0, i32 0
  %100 = bitcast [2 x i8]* %99 to i16*
  store i16 %98, i16* %100, align 1
  %101 = call %class.ap_uint.0* @_ZN7ap_uintILi16EEaSERKS0_(%class.ap_uint.0* %val_src2, %class.ap_uint.0* %13)
  store i32 16, i32* %proc_loop, align 4
  store i32 16, i32* %step, align 4
  br label %102

; <label>:102                                     ; preds = %55
  call void @_ZN7ap_uintILi9EEC1Ei(%class.ap_uint.2* %k, i32 0)
  br label %103

; <label>:103                                     ; preds = %190, %102
  %104 = bitcast %class.ap_uint.2* %17 to i8*
  %105 = bitcast %class.ap_uint.2* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %105, i64 2, i32 1, i1 false)
  %106 = getelementptr %class.ap_uint.2* %17, i32 0, i32 0
  %107 = bitcast [2 x i8]* %106 to i16*
  %108 = load i16* %107, align 1
  %109 = call zeroext i1 @_ZleILi9EEb7ap_uintIXT_EEl(i16 %108, i64 0)
  br i1 %109, label %110, label %194

; <label>:110                                     ; preds = %103
  %111 = call i16 @_ZmlILi9EE7ap_uintIXT_EElRKS1_(i64 16, %class.ap_uint.2* %k)
  %112 = getelementptr %class.ap_uint.2* %18, i32 0, i32 0
  %113 = bitcast [2 x i8]* %112 to i16*
  store i16 %111, i16* %113, align 1
  %114 = call i16 @_ZplILi9EE7ap_uintIXT_EElRKS1_(i64 0, %class.ap_uint.2* %18)
  %115 = getelementptr %class.ap_uint.2* %_in_k, i32 0, i32 0
  %116 = bitcast [2 x i8]* %115 to i16*
  store i16 %114, i16* %116, align 1
  %117 = load i32* %step, align 4
  %118 = sub nsw i32 %117, 1
  %119 = call i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.2* %_in_k, i32 %118)
  %120 = getelementptr %class.ap_uint.2* %19, i32 0, i32 0
  %121 = bitcast [2 x i8]* %120 to i16*
  store i16 %119, i16* %121, align 1
  %122 = call i64* @_ZN7ap_uintILi16EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0* %val_src1, %class.ap_uint.2* %19, %class.ap_uint.2* %_in_k)
  %123 = load i64* %122
  %124 = trunc i64 %123 to i16
  store i16 %124, i16* %p, align 2
  %125 = load i32* %step, align 4
  %126 = sub nsw i32 %125, 1
  %127 = call i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.2* %_in_k, i32 %126)
  %128 = getelementptr %class.ap_uint.2* %20, i32 0, i32 0
  %129 = bitcast [2 x i8]* %128 to i16*
  store i16 %127, i16* %129, align 1
  %130 = call i64* @_ZN7ap_uintILi16EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0* %val_src2, %class.ap_uint.2* %20, %class.ap_uint.2* %_in_k)
  %131 = load i64* %130
  %132 = trunc i64 %131 to i16
  store i16 %132, i16* %q, align 2
  %133 = load i16* %p, align 2
  %134 = load i16* %q, align 2
  %135 = load i32* %M1, align 4
  %136 = load i32* %N1, align 4
  %137 = load i32* %M2, align 4
  %138 = load i32* %N2, align 4
  %139 = call signext i16 @_ZL29p_ZN2xf13Atan2LookupFPEssiiiissiiii(i16 signext %133, i16 signext %134, i32 %135, i32 %136, i32 %137, i32 %138)
  store i16 %139, i16* %ret, align 2
  %140 = load i16* %ret, align 2
  %141 = sext i16 %140 to i32
  %142 = icmp slt i32 %141, 0
  br i1 %142, label %143, label %148

; <label>:143                                     ; preds = %110
  %144 = load i16* %ret, align 2
  %145 = sext i16 %144 to i32
  %146 = add nsw i32 %145, 12867
  %147 = add nsw i32 %146, 12867
  store i32 %147, i32* %result_temp, align 4
  br label %165

; <label>:148                                     ; preds = %110
  %149 = load i16* %ret, align 2
  %150 = sext i16 %149 to i32
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %161

; <label>:152                                     ; preds = %148
  %153 = load i16* %q, align 2
  %154 = sext i16 %153 to i32
  %155 = icmp slt i32 %154, 0
  br i1 %155, label %156, label %161

; <label>:156                                     ; preds = %152
  %157 = load i16* %ret, align 2
  %158 = sext i16 %157 to i32
  %159 = add nsw i32 %158, 12867
  %160 = add nsw i32 %159, 12867
  store i32 %160, i32* %result_temp, align 4
  br label %164

; <label>:161                                     ; preds = %152, %148
  %162 = load i16* %ret, align 2
  %163 = sext i16 %162 to i32
  store i32 %163, i32* %result_temp, align 4
  br label %164

; <label>:164                                     ; preds = %161, %156
  br label %165

; <label>:165                                     ; preds = %164, %143
  %166 = load i32* %4, align 4
  %167 = icmp eq i32 %166, 1
  br i1 %167, label %168, label %174

; <label>:168                                     ; preds = %165
  %169 = load i32* %result_temp, align 4
  %170 = mul nsw i32 58671, %169
  %171 = add nsw i32 %170, 32768
  %172 = ashr i32 %171, 16
  %173 = trunc i32 %172 to i16
  store i16 %173, i16* %result, align 2
  br label %181

; <label>:174                                     ; preds = %165
  %175 = load i32* %4, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %180

; <label>:177                                     ; preds = %174
  %178 = load i32* %result_temp, align 4
  %179 = trunc i32 %178 to i16
  store i16 %179, i16* %result, align 2
  br label %180

; <label>:180                                     ; preds = %177, %174
  br label %181

; <label>:181                                     ; preds = %180, %168
  %182 = load i16* %result, align 2
  %183 = sext i16 %182 to i64
  %184 = load i32* %step, align 4
  %185 = sub nsw i32 %184, 1
  %186 = call i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.2* %_in_k, i32 %185)
  %187 = getelementptr %class.ap_uint.2* %21, i32 0, i32 0
  %188 = bitcast [2 x i8]* %187 to i16*
  store i16 %186, i16* %188, align 1
  %189 = call i64* @_ZN7ap_uintILi16EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0* %val_dst, %class.ap_uint.2* %21, %class.ap_uint.2* %_in_k)
  store i64 %183, i64* %189
  br label %190

; <label>:190                                     ; preds = %181
  %191 = call i16 @_ZN7ap_uintILi9EEppEi(%class.ap_uint.2* %k, i32 0)
  %192 = getelementptr %class.ap_uint.2* %22, i32 0, i32 0
  %193 = bitcast [2 x i8]* %192 to i16*
  store i16 %191, i16* %193, align 1
  br label %103

; <label>:194                                     ; preds = %103
  %195 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %196 = load i16** %6, align 8
  %197 = load i16* %196, align 2
  %198 = call i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.1* %i, i16 zeroext %197)
  %199 = getelementptr %class.ap_uint.1* %23, i32 0, i32 0
  %200 = bitcast [2 x i8]* %199 to i16*
  store i16 %198, i16* %200, align 1
  %201 = bitcast %class.ap_uint.1* %24 to i8*
  %202 = bitcast %class.ap_uint.1* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %201, i8* %202, i64 2, i32 1, i1 false)
  %203 = getelementptr %class.ap_uint.1* %23, i32 0, i32 0
  %204 = bitcast [2 x i8]* %203 to i16*
  %205 = load i16* %204, align 1
  %206 = getelementptr %class.ap_uint.1* %24, i32 0, i32 0
  %207 = bitcast [2 x i8]* %206 to i16*
  %208 = load i16* %207, align 1
  %209 = call i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16 %205, i16 %208)
  %210 = getelementptr %class.ap_int* %25, i32 0, i32 0
  %211 = bitcast [4 x i8]* %210 to i32*
  store i32 %209, i32* %211, align 1
  %212 = call i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int* %25)
  %213 = trunc i64 %212 to i32
  %214 = bitcast %class.ap_uint.0* %26 to i8*
  %215 = bitcast %class.ap_uint.0* %val_dst to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %214, i8* %215, i64 2, i32 1, i1 false)
  %216 = getelementptr %class.ap_uint.0* %26, i32 0, i32 0
  %217 = bitcast [2 x i8]* %216 to i16*
  %218 = load i16* %217, align 1
  call void @_ZL52p_ZN2xf16Mat_2_256_256_1_5writeIEEi7ap_uintILi16EE_1P19xf_Mat_2_256_256_1_i7ap_uintILi16EE(%struct.xf_Mat_2_256_256_1_* %195, i32 %213, i16 %218)
  br label %219

; <label>:219                                     ; preds = %194
  %220 = call i16 @_ZN7ap_uintILi13EEppEi(%class.ap_uint.1* %j, i32 0)
  %221 = getelementptr %class.ap_uint.1* %27, i32 0, i32 0
  %222 = bitcast [2 x i8]* %221 to i16*
  store i16 %220, i16* %222, align 1
  br label %46

; <label>:223                                     ; preds = %46
  br label %224

; <label>:224                                     ; preds = %223
  %225 = call i16 @_ZN7ap_uintILi13EEppEi(%class.ap_uint.1* %i, i32 0)
  %226 = getelementptr %class.ap_uint.1* %28, i32 0, i32 0
  %227 = bitcast [2 x i8]* %226 to i16*
  store i16 %225, i16* %227, align 1
  br label %35

; <label>:228                                     ; preds = %35
  ret void
}

declare void @_ZN7ap_uintILi13EEC1Ei(%class.ap_uint.1*, i32)

declare zeroext i1 @_ZltILi13EEb7ap_uintIXT_EEt(i16, i16 zeroext)

declare i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16, i16)

declare i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.1*, i16 zeroext)

declare i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int*)

declare void @_ZN7ap_uintILi9EEC1Ei(%class.ap_uint.2*, i32)

declare zeroext i1 @_ZleILi9EEb7ap_uintIXT_EEl(i16, i64)

declare i16 @_ZplILi9EE7ap_uintIXT_EElRKS1_(i64, %class.ap_uint.2*)

declare i16 @_ZmlILi9EE7ap_uintIXT_EElRKS1_(i64, %class.ap_uint.2*)

declare i64* @_ZN7ap_uintILi16EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0*, %class.ap_uint.2*, %class.ap_uint.2*)

declare i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.2*, i32)

define internal signext i16 @_ZL29p_ZN2xf13Atan2LookupFPEssiiiissiiii(i16 signext %xs, i16 signext %ys, i32 %M1, i32 %N1, i32 %M2, i32 %N2) uwtable {
  %1 = alloca i16, align 2
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %theta = alloca i16, align 2
  %s1 = alloca i8, align 1
  %s2 = alloca i8, align 1
  %s = alloca i8, align 1
  %gy_fp = alloca i64, align 8
  %gx_fp = alloca i64, align 8
  %frac_extractor = alloca i64, align 8
  %k2_fp = alloca i64, align 8
  %int_part = alloca i16, align 2
  %frac_part = alloca i32, align 4
  %frac_ind = alloca i32, align 4
  %frac_bits = alloca i32, align 4
  %MOut = alloca i8, align 1
  %NOut = alloca i8, align 1
  %ind = alloca i32, align 4
  store i16 %xs, i16* %2, align 2
  store i16 %ys, i16* %3, align 2
  store i32 %M1, i32* %4, align 4
  store i32 %N1, i32* %5, align 4
  store i32 %M2, i32* %6, align 4
  store i32 %N2, i32* %7, align 4
  %8 = load i32* %5, align 4
  %9 = load i32* %4, align 4
  %10 = sub nsw i32 16, %9
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %22

; <label>:12                                      ; preds = %0
  %13 = load i32* %7, align 4
  %14 = load i32* %6, align 4
  %15 = sub nsw i32 16, %14
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %22

; <label>:17                                      ; preds = %12
  %18 = load i32* %4, align 4
  %19 = load i32* %6, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %17
  br label %24

; <label>:22                                      ; preds = %17, %12, %0
  call void @__assert_fail(i8* getelementptr inbounds ([105 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str6, i32 0, i32 0), i32 462, i8* getelementptr inbounds ([70 x i8]* @__PRETTY_FUNCTION__._ZL29p_ZN2xf13Atan2LookupFPEssiiiissiiii, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %24

; <label>:24                                      ; preds = %23, %21
  %25 = load i16* %3, align 2
  %26 = sext i16 %25 to i32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

; <label>:28                                      ; preds = %24
  %29 = load i16* %2, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

; <label>:32                                      ; preds = %28
  store i16 0, i16* %1
  br label %180

; <label>:33                                      ; preds = %28, %24
  %34 = load i16* %2, align 2
  %35 = sext i16 %34 to i64
  store i64 %35, i64* %gx_fp, align 8
  store i8 1, i8* %s1, align 1
  %36 = load i16* %3, align 2
  %37 = sext i16 %36 to i64
  store i64 %37, i64* %gy_fp, align 8
  store i8 1, i8* %s2, align 1
  %38 = load i16* %2, align 2
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %46

; <label>:41                                      ; preds = %33
  %42 = load i16* %2, align 2
  %43 = sext i16 %42 to i32
  %44 = sub nsw i32 0, %43
  %45 = sext i32 %44 to i64
  store i64 %45, i64* %gx_fp, align 8
  store i8 -1, i8* %s1, align 1
  br label %46

; <label>:46                                      ; preds = %41, %33
  %47 = load i16* %3, align 2
  %48 = sext i16 %47 to i32
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %55

; <label>:50                                      ; preds = %46
  %51 = load i16* %3, align 2
  %52 = sext i16 %51 to i32
  %53 = sub nsw i32 0, %52
  %54 = sext i32 %53 to i64
  store i64 %54, i64* %gy_fp, align 8
  store i8 -1, i8* %s2, align 1
  br label %55

; <label>:55                                      ; preds = %50, %46
  %56 = load i8* %s1, align 1
  %57 = sext i8 %56 to i32
  %58 = load i8* %s2, align 1
  %59 = sext i8 %58 to i32
  %60 = mul nsw i32 %57, %59
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %s, align 1
  %62 = load i64* %gx_fp, align 8
  %63 = trunc i64 %62 to i16
  %64 = load i64* %gy_fp, align 8
  %65 = trunc i64 %64 to i16
  %66 = load i32* %4, align 4
  %67 = load i32* %6, align 4
  %68 = call i32 @_ZL28p_ZN2xf10DivideYByXEttiiPcPcttiiPcS_(i16 zeroext %63, i16 zeroext %65, i32 %66, i32 %67, i8* %MOut, i8* %NOut)
  %69 = zext i32 %68 to i64
  store i64 %69, i64* %k2_fp, align 8
  %70 = load i8* %NOut, align 1
  %71 = sext i8 %70 to i32
  %72 = shl i32 1, %71
  %73 = sub nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  store i64 %74, i64* %frac_extractor, align 8
  %75 = load i64* %k2_fp, align 8
  %76 = load i8* %NOut, align 1
  %77 = sext i8 %76 to i32
  %78 = zext i32 %77 to i64
  %79 = lshr i64 %75, %78
  %80 = trunc i64 %79 to i16
  store i16 %80, i16* %int_part, align 2
  %81 = load i64* %k2_fp, align 8
  %82 = load i64* %frac_extractor, align 8
  %83 = and i64 %81, %82
  %84 = trunc i64 %83 to i32
  store i32 %84, i32* %frac_part, align 4
  %85 = load i16* %int_part, align 2
  %86 = zext i16 %85 to i32
  %87 = icmp slt i32 %86, 63
  br i1 %87, label %88, label %109

; <label>:88                                      ; preds = %55
  %89 = load i16* %int_part, align 2
  %90 = zext i16 %89 to i64
  %91 = getelementptr inbounds [63 x i32]* @_ZN2xf13frac_bits_lutE, i32 0, i64 %90
  %92 = load i32* %91, align 4
  store i32 %92, i32* %frac_bits, align 4
  %93 = load i32* %frac_part, align 4
  %94 = load i8* %NOut, align 1
  %95 = sext i8 %94 to i32
  %96 = load i32* %frac_bits, align 4
  %97 = sub i32 %95, %96
  %98 = lshr i32 %93, %97
  store i32 %98, i32* %frac_ind, align 4
  %99 = load i16* %int_part, align 2
  %100 = zext i16 %99 to i64
  %101 = getelementptr inbounds [63 x i32]* @_ZN2xf13base_addr_lutE, i32 0, i64 %100
  %102 = load i32* %101, align 4
  %103 = load i32* %frac_ind, align 4
  %104 = add i32 %102, %103
  store i32 %104, i32* %ind, align 4
  %105 = load i32* %ind, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [1440 x i16]* @_ZN2xf11atan_lut_fpE, i32 0, i64 %106
  %108 = load i16* %107, align 2
  store i16 %108, i16* %theta, align 2
  br label %110

; <label>:109                                     ; preds = %55
  store i16 6433, i16* %theta, align 2
  br label %110

; <label>:110                                     ; preds = %109, %88
  %111 = load i64* %gx_fp, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %114

; <label>:113                                     ; preds = %110
  store i16 6433, i16* %theta, align 2
  br label %114

; <label>:114                                     ; preds = %113, %110
  %115 = load i8* %s, align 1
  %116 = sext i8 %115 to i32
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %118, label %123

; <label>:118                                     ; preds = %114
  %119 = load i16* %theta, align 2
  %120 = sext i16 %119 to i32
  %121 = sub nsw i32 0, %120
  %122 = trunc i32 %121 to i16
  store i16 %122, i16* %theta, align 2
  br label %123

; <label>:123                                     ; preds = %118, %114
  %124 = load i16* %2, align 2
  %125 = sext i16 %124 to i32
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %129

; <label>:127                                     ; preds = %123
  %128 = load i16* %theta, align 2
  store i16 %128, i16* %1
  br label %180

; <label>:129                                     ; preds = %123
  %130 = load i16* %3, align 2
  %131 = sext i16 %130 to i32
  %132 = icmp sge i32 %131, 0
  br i1 %132, label %133, label %142

; <label>:133                                     ; preds = %129
  %134 = load i16* %2, align 2
  %135 = sext i16 %134 to i32
  %136 = icmp slt i32 %135, 0
  br i1 %136, label %137, label %142

; <label>:137                                     ; preds = %133
  %138 = load i16* %theta, align 2
  %139 = sext i16 %138 to i32
  %140 = add nsw i32 12867, %139
  %141 = trunc i32 %140 to i16
  store i16 %141, i16* %1
  br label %180

; <label>:142                                     ; preds = %133, %129
  %143 = load i16* %3, align 2
  %144 = sext i16 %143 to i32
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %146, label %155

; <label>:146                                     ; preds = %142
  %147 = load i16* %2, align 2
  %148 = sext i16 %147 to i32
  %149 = icmp slt i32 %148, 0
  br i1 %149, label %150, label %155

; <label>:150                                     ; preds = %146
  %151 = load i16* %theta, align 2
  %152 = sext i16 %151 to i32
  %153 = sub nsw i32 %152, 12867
  %154 = trunc i32 %153 to i16
  store i16 %154, i16* %1
  br label %180

; <label>:155                                     ; preds = %146, %142
  %156 = load i16* %3, align 2
  %157 = sext i16 %156 to i32
  %158 = icmp sgt i32 %157, 0
  br i1 %158, label %159, label %164

; <label>:159                                     ; preds = %155
  %160 = load i16* %2, align 2
  %161 = sext i16 %160 to i32
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

; <label>:163                                     ; preds = %159
  store i16 6433, i16* %1
  br label %180

; <label>:164                                     ; preds = %159, %155
  %165 = load i16* %3, align 2
  %166 = sext i16 %165 to i32
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %168, label %173

; <label>:168                                     ; preds = %164
  %169 = load i16* %2, align 2
  %170 = sext i16 %169 to i32
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %173

; <label>:172                                     ; preds = %168
  store i16 -6433, i16* %1
  br label %180

; <label>:173                                     ; preds = %168, %164
  br label %174

; <label>:174                                     ; preds = %173
  br label %175

; <label>:175                                     ; preds = %174
  br label %176

; <label>:176                                     ; preds = %175
  br label %177

; <label>:177                                     ; preds = %176
  br label %178

; <label>:178                                     ; preds = %177
  %179 = load i16* %theta, align 2
  store i16 %179, i16* %1
  br label %180

; <label>:180                                     ; preds = %178, %172, %163, %150, %137, %127, %32
  %181 = load i16* %1
  ret i16 %181
}

declare i16 @_ZN7ap_uintILi9EEppEi(%class.ap_uint.2*, i32)

define internal void @_ZL52p_ZN2xf16Mat_2_256_256_1_5writeIEEi7ap_uintILi16EE_1P19xf_Mat_2_256_256_1_i7ap_uintILi16EE(%struct.xf_Mat_2_256_256_1_* %this_, i32 %index, i16 %val.coerce) uwtable {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %2 = alloca i32, align 4
  %val = alloca %class.ap_uint.0, align 2
  store %struct.xf_Mat_2_256_256_1_* %this_, %struct.xf_Mat_2_256_256_1_** %1, align 8
  store i32 %index, i32* %2, align 4
  %3 = getelementptr %class.ap_uint.0* %val, i32 0, i32 0
  %4 = bitcast [2 x i8]* %3 to i16*
  store i16 %val.coerce, i16* %4, align 1
  %5 = load i32* %2, align 4
  %6 = sext i32 %5 to i64
  %7 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %8 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %7, i32 0, i32 4
  %9 = getelementptr inbounds [65536 x %class.ap_uint.0]* %8, i32 0, i64 %6
  %10 = call %class.ap_uint.0* @_ZN7ap_uintILi16EEaSERKS0_(%class.ap_uint.0* %9, %class.ap_uint.0* %val)
  ret void
}

declare i16 @_ZN7ap_uintILi13EEppEi(%class.ap_uint.1*, i32)

define internal i32 @_ZL28p_ZN2xf10DivideYByXEttiiPcPcttiiPcS_(i16 zeroext %x, i16 zeroext %y, i32 %M1, i32 %M2, i8* %out_M, i8* %out_N) uwtable {
  %1 = alloca i16, align 2
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %div_val = alloca i32, align 4
  %MOut = alloca i8, align 1
  %NOut = alloca i8, align 1
  %x_inv = alloca i32, align 4
  store i16 %x, i16* %1, align 2
  store i16 %y, i16* %2, align 2
  store i32 %M1, i32* %3, align 4
  store i32 %M2, i32* %4, align 4
  store i8* %out_M, i8** %5, align 8
  store i8* %out_N, i8** %6, align 8
  %7 = load i16* %1, align 2
  %8 = load i32* %3, align 4
  %9 = call i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %7, i32 %8, i8* %NOut)
  store i32 %9, i32* %x_inv, align 4
  %10 = load i8* %NOut, align 1
  %11 = sext i8 %10 to i32
  %12 = sub nsw i32 16, %11
  %13 = load i32* %4, align 4
  %14 = add nsw i32 %12, %13
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %MOut, align 1
  %16 = load i8* %NOut, align 1
  %17 = sext i8 %16 to i32
  %18 = add nsw i32 %17, 16
  %19 = load i32* %4, align 4
  %20 = sub nsw i32 %18, %19
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %NOut, align 1
  %22 = load i16* %2, align 2
  %23 = zext i16 %22 to i32
  %24 = load i32* %x_inv, align 4
  %25 = mul i32 %23, %24
  store i32 %25, i32* %div_val, align 4
  %26 = load i8* %MOut, align 1
  %27 = load i8** %5, align 8
  store i8 %26, i8* %27, align 1
  %28 = load i8* %NOut, align 1
  %29 = load i8** %6, align 8
  store i8 %28, i8* %29, align 1
  %30 = load i32* %div_val, align 4
  ret i32 %30
}

define internal i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %x, i32 %M, i8* %N) nounwind uwtable {
  %1 = alloca i32, align 4
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %val = alloca i32, align 4
  %index = alloca i32, align 4
  %B_L = alloca i32, align 4
  %tmp = alloca i32, align 4
  %pos = alloca i32, align 4
  %block = alloca i32, align 4
  %shift = alloca i32, align 4
  %x1 = alloca i16, align 2
  %x2 = alloca i16, align 2
  %x3 = alloca i16, align 2
  %x4 = alloca i16, align 2
  %tmpx = alloca i16, align 2
  store i16 %x, i16* %2, align 2
  store i32 %M, i32* %3, align 4
  store i8* %N, i8** %4, align 8
  %5 = load i32* %3, align 4
  %6 = icmp sle i32 %5, 16
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  br label %10

; <label>:8                                       ; preds = %0
  call void @__assert_fail(i8* getelementptr inbounds ([79 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str6, i32 0, i32 0), i32 234, i8* getelementptr inbounds ([63 x i8]* @__PRETTY_FUNCTION__._ZL20p_ZN2xf7InverseEtiPctiPc, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %10

; <label>:10                                      ; preds = %9, %7
  store i32 0, i32* %val, align 4
  store i32 17, i32* %B_L, align 4
  store i32 4, i32* %tmp, align 4
  store i32 0, i32* %block, align 4
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %shift, align 4
  %11 = load i16* %2, align 2
  %12 = zext i16 %11 to i32
  %13 = ashr i32 %12, 12
  %14 = and i32 %13, 15
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %x1, align 2
  %16 = load i16* %2, align 2
  %17 = zext i16 %16 to i32
  %18 = ashr i32 %17, 8
  %19 = and i32 %18, 15
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %x2, align 2
  %21 = load i16* %2, align 2
  %22 = zext i16 %21 to i32
  %23 = ashr i32 %22, 4
  %24 = and i32 %23, 15
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %x3, align 2
  %26 = load i16* %2, align 2
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, 15
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %x4, align 2
  store i16 0, i16* %tmpx, align 2
  %30 = load i16* %2, align 2
  %31 = zext i16 %30 to i32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %10
  %34 = load i16* getelementptr inbounds ([2049 x i16]* @_ZN2xf12division_lutE, i32 0, i64 0), align 2
  %35 = zext i16 %34 to i32
  store i32 %35, i32* %1
  br label %174

; <label>:36                                      ; preds = %10
  %37 = load i16* %x1, align 2
  %38 = zext i16 %37 to i32
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %62

; <label>:40                                      ; preds = %36
  %41 = load i16* %x1, align 2
  store i16 %41, i16* %tmpx, align 2
  store i32 0, i32* %block, align 4
  store i32 0, i32* %tmp, align 4
  br label %42

; <label>:42                                      ; preds = %58, %40
  %43 = load i32* %tmp, align 4
  %44 = icmp slt i32 %43, 4
  br i1 %44, label %45, label %61

; <label>:45                                      ; preds = %42
  %46 = load i16* %x1, align 2
  %47 = zext i16 %46 to i32
  %48 = load i32* %tmp, align 4
  %49 = sub nsw i32 3, %48
  %50 = ashr i32 %47, %49
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %tmpx, align 2
  %52 = load i16* %tmpx, align 2
  %53 = icmp ne i16 %52, 0
  br i1 %53, label %54, label %57

; <label>:54                                      ; preds = %45
  %55 = load i32* %tmp, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %pos, align 4
  br label %61

; <label>:57                                      ; preds = %45
  br label %58

; <label>:58                                      ; preds = %57
  %59 = load i32* %tmp, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %tmp, align 4
  br label %42

; <label>:61                                      ; preds = %54, %42
  br label %138

; <label>:62                                      ; preds = %36
  %63 = load i16* %x2, align 2
  %64 = zext i16 %63 to i32
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %88

; <label>:66                                      ; preds = %62
  store i32 1, i32* %block, align 4
  %67 = load i16* %x2, align 2
  store i16 %67, i16* %tmpx, align 2
  store i32 0, i32* %tmp, align 4
  br label %68

; <label>:68                                      ; preds = %84, %66
  %69 = load i32* %tmp, align 4
  %70 = icmp slt i32 %69, 4
  br i1 %70, label %71, label %87

; <label>:71                                      ; preds = %68
  %72 = load i16* %x2, align 2
  %73 = zext i16 %72 to i32
  %74 = load i32* %tmp, align 4
  %75 = sub nsw i32 3, %74
  %76 = ashr i32 %73, %75
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %tmpx, align 2
  %78 = load i16* %tmpx, align 2
  %79 = icmp ne i16 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %71
  %81 = load i32* %tmp, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %pos, align 4
  br label %87

; <label>:83                                      ; preds = %71
  br label %84

; <label>:84                                      ; preds = %83
  %85 = load i32* %tmp, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %tmp, align 4
  br label %68

; <label>:87                                      ; preds = %80, %68
  br label %137

; <label>:88                                      ; preds = %62
  %89 = load i16* %x3, align 2
  %90 = zext i16 %89 to i32
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %114

; <label>:92                                      ; preds = %88
  store i32 2, i32* %block, align 4
  %93 = load i16* %x3, align 2
  store i16 %93, i16* %tmpx, align 2
  store i32 0, i32* %tmp, align 4
  br label %94

; <label>:94                                      ; preds = %110, %92
  %95 = load i32* %tmp, align 4
  %96 = icmp slt i32 %95, 4
  br i1 %96, label %97, label %113

; <label>:97                                      ; preds = %94
  %98 = load i16* %x3, align 2
  %99 = zext i16 %98 to i32
  %100 = load i32* %tmp, align 4
  %101 = sub nsw i32 3, %100
  %102 = ashr i32 %99, %101
  %103 = trunc i32 %102 to i16
  store i16 %103, i16* %tmpx, align 2
  %104 = load i16* %tmpx, align 2
  %105 = icmp ne i16 %104, 0
  br i1 %105, label %106, label %109

; <label>:106                                     ; preds = %97
  %107 = load i32* %tmp, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %pos, align 4
  br label %113

; <label>:109                                     ; preds = %97
  br label %110

; <label>:110                                     ; preds = %109
  %111 = load i32* %tmp, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %tmp, align 4
  br label %94

; <label>:113                                     ; preds = %106, %94
  br label %136

; <label>:114                                     ; preds = %88
  store i32 3, i32* %block, align 4
  %115 = load i16* %x4, align 2
  store i16 %115, i16* %tmpx, align 2
  store i32 0, i32* %tmp, align 4
  br label %116

; <label>:116                                     ; preds = %132, %114
  %117 = load i32* %tmp, align 4
  %118 = icmp slt i32 %117, 4
  br i1 %118, label %119, label %135

; <label>:119                                     ; preds = %116
  %120 = load i16* %x4, align 2
  %121 = zext i16 %120 to i32
  %122 = load i32* %tmp, align 4
  %123 = sub nsw i32 3, %122
  %124 = ashr i32 %121, %123
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %tmpx, align 2
  %126 = load i16* %tmpx, align 2
  %127 = icmp ne i16 %126, 0
  br i1 %127, label %128, label %131

; <label>:128                                     ; preds = %119
  %129 = load i32* %tmp, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %pos, align 4
  br label %135

; <label>:131                                     ; preds = %119
  br label %132

; <label>:132                                     ; preds = %131
  %133 = load i32* %tmp, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %tmp, align 4
  br label %116

; <label>:135                                     ; preds = %128, %116
  br label %136

; <label>:136                                     ; preds = %135, %113
  br label %137

; <label>:137                                     ; preds = %136, %87
  br label %138

; <label>:138                                     ; preds = %137, %61
  br label %139

; <label>:139                                     ; preds = %138
  %140 = load i32* %block, align 4
  %141 = mul nsw i32 4, %140
  %142 = load i32* %pos, align 4
  %143 = add nsw i32 %141, %142
  store i32 %143, i32* %B_L, align 4
  store i32 4, i32* %shift, align 4
  %144 = load i32* %B_L, align 4
  %145 = icmp sge i32 %144, 1
  br i1 %145, label %146, label %155

; <label>:146                                     ; preds = %139
  %147 = load i16* %2, align 2
  %148 = zext i16 %147 to i32
  %149 = load i32* %B_L, align 4
  %150 = sub nsw i32 %149, 1
  %151 = shl i32 %148, %150
  %152 = and i32 %151, 32767
  %153 = load i32* %shift, align 4
  %154 = ashr i32 %152, %153
  store i32 %154, i32* %index, align 4
  br label %161

; <label>:155                                     ; preds = %139
  %156 = load i16* %2, align 2
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 32767
  %159 = load i32* %shift, align 4
  %160 = ashr i32 %158, %159
  store i32 %160, i32* %index, align 4
  br label %161

; <label>:161                                     ; preds = %155, %146
  %162 = load i32* %index, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [2049 x i16]* @_ZN2xf12division_lutE, i32 0, i64 %163
  %165 = load i16* %164, align 2
  %166 = zext i16 %165 to i32
  store i32 %166, i32* %val, align 4
  %167 = load i32* %3, align 4
  %168 = add nsw i32 %167, 16
  %169 = load i32* %B_L, align 4
  %170 = sub nsw i32 %168, %169
  %171 = trunc i32 %170 to i8
  %172 = load i8** %4, align 8
  store i8 %171, i8* %172, align 1
  %173 = load i32* %val, align 4
  store i32 %173, i32* %1
  br label %174

; <label>:174                                     ; preds = %161, %33
  %175 = load i32* %1
  ret i32 %175
}

define internal void @_ZL108p_ZN2xf11accel_utils11Array2xfMatILi256ELi2ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi2ELi256ELi256ELi1EE_1P14xf_accel_utilsP7ap_uintILi256EER19xf_Mat_2_256_256_1_(%struct.xf_accel_utils* %this_, %class.ap_uint* %srcPtr, %struct.xf_Mat_2_256_256_1_* %dstMat) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %class.ap_uint*, align 8
  %3 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %ch_width = alloca i32, align 4
  %strm = alloca %"class.hls::stream", align 1
  %rows = alloca i32, align 4
  %cols = alloca i32, align 4
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %class.ap_uint* %srcPtr, %class.ap_uint** %2, align 8
  store %struct.xf_Mat_2_256_256_1_* %dstMat, %struct.xf_Mat_2_256_256_1_** %3, align 8
  store i32 16, i32* %ch_width, align 4
  call void @_ZN3hls6streamI7ap_uintILi256EEEC1Ev(%"class.hls::stream"* %strm)
  %4 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %5 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %4, i32 0, i32 1
  %6 = load i32* %5, align 4
  store i32 %6, i32* %rows, align 4
  %7 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %8 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %7, i32 0, i32 2
  %9 = load i32* %8, align 4
  store i32 %9, i32* %cols, align 4
  %10 = load %struct.xf_accel_utils** %1, align 8
  %11 = load %class.ap_uint** %2, align 8
  %12 = load i32* %rows, align 4
  %13 = load i32* %cols, align 4
  call void @_ZL123p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi256ELi256ELi1ELi1ELi16ELi4096EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEii_1P14xf_accel_utilsP7ap_uintILi256EERN3hls6streamIS2_EEii(%struct.xf_accel_utils* %10, %class.ap_uint* %11, %"class.hls::stream"* %strm, i32 %12, i32 %13)
  %14 = load %struct.xf_accel_utils** %1, align 8
  %15 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  call void @_ZL127p_ZN2xf11accel_utils13hlsStrm2xfMatILi256ELi2ELi256ELi256ELi1ELi65536EEER6streamI7ap_uintILi256EEER3MatILi2ELi256ELi256ELi1EE_1P14xf_accel_utilsRN3hls6streamI7ap_uintILi256EEEER19xf_Mat_2_256_256_1_(%struct.xf_accel_utils* %14, %"class.hls::stream"* %strm, %struct.xf_Mat_2_256_256_1_* %15)
  ret void
}

define internal void @_ZL123p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi256ELi256ELi1ELi1ELi16ELi4096EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEii_1P14xf_accel_utilsP7ap_uintILi256EERN3hls6streamIS2_EEii(%struct.xf_accel_utils* %this_, %class.ap_uint* %srcPtr, %"class.hls::stream"* %dstStrm, i32 %rows, i32 %cols) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %class.ap_uint*, align 8
  %3 = alloca %"class.hls::stream"*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %pixel_width = alloca i32, align 4
  %loop_count = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %class.ap_uint* %srcPtr, %class.ap_uint** %2, align 8
  store %"class.hls::stream"* %dstStrm, %"class.hls::stream"** %3, align 8
  store i32 %rows, i32* %4, align 4
  store i32 %cols, i32* %5, align 4
  store i32 16, i32* %pixel_width, align 4
  %6 = load i32* %4, align 4
  %7 = load i32* %5, align 4
  %8 = mul nsw i32 %6, %7
  %9 = load i32* %pixel_width, align 4
  %10 = mul nsw i32 %8, %9
  %11 = add nsw i32 %10, 256
  %12 = sub nsw i32 %11, 1
  %13 = sdiv i32 %12, 256
  store i32 %13, i32* %loop_count, align 4
  store i32 0, i32* %i, align 4
  br label %14

; <label>:14                                      ; preds = %24, %0
  %15 = load i32* %i, align 4
  %16 = load i32* %loop_count, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %14
  %19 = load %"class.hls::stream"** %3, align 8
  %20 = load i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = load %class.ap_uint** %2, align 8
  %23 = getelementptr inbounds %class.ap_uint* %22, i64 %21
  call void @_ZN3hls6streamI7ap_uintILi256EEE5writeERKS2_(%"class.hls::stream"* %19, %class.ap_uint* %23)
  br label %24

; <label>:24                                      ; preds = %18
  %25 = load i32* %i, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %i, align 4
  br label %14

; <label>:27                                      ; preds = %14
  ret void
}

define internal void @_ZL127p_ZN2xf11accel_utils13hlsStrm2xfMatILi256ELi2ELi256ELi256ELi1ELi65536EEER6streamI7ap_uintILi256EEER3MatILi2ELi256ELi256ELi1EE_1P14xf_accel_utilsRN3hls6streamI7ap_uintILi256EEEER19xf_Mat_2_256_256_1_(%struct.xf_accel_utils* %this_, %"class.hls::stream"* %srcStrm, %struct.xf_Mat_2_256_256_1_* %dstMat) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %"class.hls::stream"*, align 8
  %3 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %rows = alloca i32, align 4
  %cols = alloca i32, align 4
  %loop_count = alloca i32, align 4
  %valid_bits = alloca i32, align 4
  %N_size = alloca i32, align 4
  %r = alloca %class.ap_uint, align 1
  %out = alloca %class.ap_uint.0, align 1
  %i = alloca i32, align 4
  %4 = alloca %class.ap_uint, align 1
  %5 = alloca %class.ap_uint.0, align 1
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %"class.hls::stream"* %srcStrm, %"class.hls::stream"** %2, align 8
  store %struct.xf_Mat_2_256_256_1_* %dstMat, %struct.xf_Mat_2_256_256_1_** %3, align 8
  %6 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %7 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %6, i32 0, i32 1
  %8 = load i32* %7, align 4
  store i32 %8, i32* %rows, align 4
  %9 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %10 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %9, i32 0, i32 2
  %11 = load i32* %10, align 4
  store i32 %11, i32* %cols, align 4
  %12 = load i32* %rows, align 4
  %13 = load i32* %cols, align 4
  %14 = mul nsw i32 %12, %13
  %15 = sdiv i32 %14, 1
  store i32 %15, i32* %loop_count, align 4
  store i32 0, i32* %valid_bits, align 4
  store i32 16, i32* %N_size, align 4
  call void @_ZN7ap_uintILi256EEC1Ev(%class.ap_uint* %r)
  call void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0* %out)
  br label %16

; <label>:16                                      ; preds = %0
  store i32 0, i32* %i, align 4
  br label %17

; <label>:17                                      ; preds = %68, %16
  %18 = load i32* %i, align 4
  %19 = load i32* %loop_count, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %71

; <label>:21                                      ; preds = %17
  %22 = load i32* %valid_bits, align 4
  %23 = icmp slt i32 %22, 16
  br i1 %23, label %24, label %48

; <label>:24                                      ; preds = %21
  %25 = load i32* %valid_bits, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %35

; <label>:27                                      ; preds = %24
  %28 = load i32* %valid_bits, align 4
  %29 = sub nsw i32 256, %28
  %30 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 255, i32 %29)
  %31 = load i64* %30
  %32 = load i32* %valid_bits, align 4
  %33 = sub nsw i32 %32, 1
  %34 = call i64* @_ZN7ap_uintILi16EE5rangeEii(%class.ap_uint.0* %out, i32 %33, i32 0)
  store i64 %31, i64* %34
  br label %35

; <label>:35                                      ; preds = %27, %24
  %36 = load %"class.hls::stream"** %2, align 8
  call void @_ZN3hls6streamI7ap_uintILi256EEE4readEv(%class.ap_uint* sret %4, %"class.hls::stream"* %36)
  %37 = call %class.ap_uint* @_ZN7ap_uintILi256EEaSERKS0_(%class.ap_uint* %r, %class.ap_uint* %4)
  %38 = load i32* %valid_bits, align 4
  %39 = sub nsw i32 16, %38
  %40 = sub nsw i32 %39, 1
  %41 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 %40, i32 0)
  %42 = load i64* %41
  %43 = load i32* %valid_bits, align 4
  %44 = call i64* @_ZN7ap_uintILi16EE5rangeEii(%class.ap_uint.0* %out, i32 15, i32 %43)
  store i64 %42, i64* %44
  %45 = load i32* %valid_bits, align 4
  %46 = sub nsw i32 16, %45
  %47 = sub nsw i32 256, %46
  store i32 %47, i32* %valid_bits, align 4
  br label %60

; <label>:48                                      ; preds = %21
  %49 = load i32* %valid_bits, align 4
  %50 = sub nsw i32 256, %49
  %51 = add nsw i32 %50, 16
  %52 = sub nsw i32 %51, 1
  %53 = load i32* %valid_bits, align 4
  %54 = sub nsw i32 256, %53
  %55 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 %52, i32 %54)
  %56 = load i64* %55
  %57 = call %class.ap_uint.0* @_ZN7ap_uintILi16EEaSEm(%class.ap_uint.0* %out, i64 %56)
  %58 = load i32* %valid_bits, align 4
  %59 = sub nsw i32 %58, 16
  store i32 %59, i32* %valid_bits, align 4
  br label %60

; <label>:60                                      ; preds = %48, %35
  %61 = load %struct.xf_Mat_2_256_256_1_** %3, align 8
  %62 = load i32* %i, align 4
  %63 = bitcast %class.ap_uint.0* %5 to i8*
  %64 = bitcast %class.ap_uint.0* %out to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 2, i32 1, i1 false)
  %65 = getelementptr %class.ap_uint.0* %5, i32 0, i32 0
  %66 = bitcast [2 x i8]* %65 to i16*
  %67 = load i16* %66, align 1
  call void @_ZL52p_ZN2xf16Mat_2_256_256_1_5writeIEEi7ap_uintILi16EE_1P19xf_Mat_2_256_256_1_i7ap_uintILi16EE(%struct.xf_Mat_2_256_256_1_* %61, i32 %62, i16 %67)
  br label %68

; <label>:68                                      ; preds = %60
  %69 = load i32* %i, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %i, align 4
  br label %17

; <label>:71                                      ; preds = %17
  ret void
}

declare %class.ap_uint.0* @_ZN7ap_uintILi16EEaSEm(%class.ap_uint.0*, i64)

define internal void @_ZL38p_ZN2xf16Mat_2_256_256_1_4initIEEiib_1P19xf_Mat_2_256_256_1_iib(%struct.xf_Mat_2_256_256_1_* %this_, i32 %_rows, i32 %_cols, i1 zeroext %allocate) nounwind uwtable {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  store %struct.xf_Mat_2_256_256_1_* %this_, %struct.xf_Mat_2_256_256_1_** %1, align 8
  store i32 %_rows, i32* %2, align 4
  store i32 %_cols, i32* %3, align 4
  %5 = zext i1 %allocate to i8
  store i8 %5, i8* %4, align 1
  %6 = load i32* %2, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %18

; <label>:8                                       ; preds = %0
  %9 = load i32* %2, align 4
  %10 = icmp sle i32 %9, 256
  br i1 %10, label %11, label %18

; <label>:11                                      ; preds = %8
  %12 = load i32* %3, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %11
  %15 = load i32* %3, align 4
  %16 = icmp sle i32 %15, 256
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %14
  br label %20

; <label>:18                                      ; preds = %14, %11, %8, %0
  call void @__assert_fail(i8* getelementptr inbounds ([143 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str9, i32 0, i32 0), i32 517, i8* getelementptr inbounds ([90 x i8]* @__PRETTY_FUNCTION__._ZL38p_ZN2xf16Mat_2_256_256_1_4initIEEiib_1P19xf_Mat_2_256_256_1_iib, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %20

; <label>:20                                      ; preds = %19, %17
  %21 = load i32* %2, align 4
  %22 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %23 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %22, i32 0, i32 1
  store i32 %21, i32* %23, align 4
  %24 = load i32* %3, align 4
  %25 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %26 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %25, i32 0, i32 2
  store i32 %24, i32* %26, align 4
  %27 = load i32* %2, align 4
  %28 = load i32* %3, align 4
  %29 = ashr i32 %28, 0
  %30 = mul nsw i32 %27, %29
  %31 = load %struct.xf_Mat_2_256_256_1_** %1, align 8
  %32 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %31, i32 0, i32 3
  store i32 %30, i32* %32, align 4
  %33 = load i8* %4, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %35, label %36

; <label>:35                                      ; preds = %20
  br label %36

; <label>:36                                      ; preds = %35, %20
  ret void
}

define linkonce_odr void @_ZN19xf_Mat_2_256_256_1_C2Ev(%struct.xf_Mat_2_256_256_1_* %this) unnamed_addr uwtable inlinehint align 2 {
  %1 = alloca %struct.xf_Mat_2_256_256_1_*, align 8
  store %struct.xf_Mat_2_256_256_1_* %this, %struct.xf_Mat_2_256_256_1_** %1, align 8
  %2 = load %struct.xf_Mat_2_256_256_1_** %1
  %3 = getelementptr inbounds %struct.xf_Mat_2_256_256_1_* %2, i32 0, i32 4
  %4 = getelementptr inbounds [65536 x %class.ap_uint.0]* %3, i32 0, i32 0
  %5 = getelementptr inbounds %class.ap_uint.0* %4, i64 65536
  br label %6

; <label>:6                                       ; preds = %6, %0
  %7 = phi %class.ap_uint.0* [ %4, %0 ], [ %8, %6 ]
  call void @_ZN7ap_uintILi16EEC1Ev(%class.ap_uint.0* %7)
  %8 = getelementptr inbounds %class.ap_uint.0* %7, i64 1
  %9 = icmp eq %class.ap_uint.0* %8, %5
  br i1 %9, label %10, label %6

; <label>:10                                      ; preds = %6
  ret void
}
