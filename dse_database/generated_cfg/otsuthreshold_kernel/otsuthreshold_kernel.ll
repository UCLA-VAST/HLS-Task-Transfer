; ModuleID = '/home/vagrant/software-gnn/dse_database/ast_kernels/otsuthreshold_kernel.cpp'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.ap_uint = type { [32 x i8] }
%struct.xf_Mat_0_256_256_1_ = type { i8, i32, i32, i32, [65536 x %class.ap_uint.0] }
%class.ap_uint.0 = type { [1 x i8] }
%struct.xf_accel_utils = type { i8 }
%class.ap_uint.4 = type { [2 x i8] }
%class.ap_uint.5 = type { [1 x i8] }
%class.ap_uint.6 = type { [2 x i8] }
%class.ap_int.7 = type { [4 x i8] }
%class.ap_uint.8 = type { [2 x i8] }
%class.ap_uint.1 = type { [5 x i8] }
%class.ap_uint.2 = type { [6 x i8] }
%class.ap_uint.3 = type { [4 x i8] }
%class.ap_int = type { [12 x i8] }
%"class.hls::stream" = type { %class.ap_uint }

@_ZN2xf12division_lutE = global [2049 x i16] [i16 -1, i16 -1, i16 -1, i16 -32, i16 -64, i16 -96, i16 -128, i16 -160, i16 -192, i16 -224, i16 -256, i16 -287, i16 -319, i16 -351, i16 -382, i16 -414, i16 -445, i16 -477, i16 -509, i16 -540, i16 -571, i16 -603, i16 -634, i16 -666, i16 -697, i16 -728, i16 -760, i16 -791, i16 -822, i16 -853, i16 -884, i16 -916, i16 -947, i16 -978, i16 -1009, i16 -1040, i16 -1071, i16 -1102, i16 -1133, i16 -1163, i16 -1194, i16 -1225, i16 -1256, i16 -1287, i16 -1317, i16 -1348, i16 -1379, i16 -1410, i16 -1440, i16 -1471, i16 -1501, i16 -1532, i16 -1562, i16 -1593, i16 -1623, i16 -1654, i16 -1684, i16 -1714, i16 -1745, i16 -1775, i16 -1805, i16 -1836, i16 -1866, i16 -1896, i16 -1926, i16 -1956, i16 -1986, i16 -2017, i16 -2047, i16 -2077, i16 -2107, i16 -2137, i16 -2166, i16 -2196, i16 -2226, i16 -2256, i16 -2286, i16 -2316, i16 -2345, i16 -2375, i16 -2405, i16 -2435, i16 -2464, i16 -2494, i16 -2523, i16 -2553, i16 -2583, i16 -2612, i16 -2642, i16 -2671, i16 -2700, i16 -2730, i16 -2759, i16 -2789, i16 -2818, i16 -2847, i16 -2876, i16 -2906, i16 -2935, i16 -2964, i16 -2993, i16 -3022, i16 -3052, i16 -3081, i16 -3110, i16 -3139, i16 -3168, i16 -3197, i16 -3226, i16 -3254, i16 -3283, i16 -3312, i16 -3341, i16 -3370, i16 -3399, i16 -3427, i16 -3456, i16 -3485, i16 -3514, i16 -3542, i16 -3571, i16 -3599, i16 -3628, i16 -3656, i16 -3685, i16 -3714, i16 -3742, i16 -3770, i16 -3799, i16 -3827, i16 -3856, i16 -3884, i16 -3912, i16 -3940, i16 -3969, i16 -3997, i16 -4025, i16 -4053, i16 -4081, i16 -4110, i16 -4138, i16 -4166, i16 -4194, i16 -4222, i16 -4250, i16 -4278, i16 -4306, i16 -4334, i16 -4362, i16 -4389, i16 -4417, i16 -4445, i16 -4473, i16 -4501, i16 -4528, i16 -4556, i16 -4584, i16 -4612, i16 -4639, i16 -4667, i16 -4694, i16 -4722, i16 -4749, i16 -4777, i16 -4804, i16 -4832, i16 -4859, i16 -4887, i16 -4914, i16 -4942, i16 -4969, i16 -4996, i16 -5024, i16 -5051, i16 -5078, i16 -5105, i16 -5132, i16 -5160, i16 -5187, i16 -5214, i16 -5241, i16 -5268, i16 -5295, i16 -5322, i16 -5349, i16 -5376, i16 -5403, i16 -5430, i16 -5457, i16 -5484, i16 -5511, i16 -5538, i16 -5564, i16 -5591, i16 -5618, i16 -5645, i16 -5671, i16 -5698, i16 -5725, i16 -5751, i16 -5778, i16 -5805, i16 -5831, i16 -5858, i16 -5884, i16 -5911, i16 -5937, i16 -5964, i16 -5990, i16 -6016, i16 -6043, i16 -6069, i16 -6096, i16 -6122, i16 -6148, i16 -6174, i16 -6201, i16 -6227, i16 -6253, i16 -6279, i16 -6305, i16 -6332, i16 -6358, i16 -6384, i16 -6410, i16 -6436, i16 -6462, i16 -6488, i16 -6514, i16 -6540, i16 -6566, i16 -6592, i16 -6617, i16 -6643, i16 -6669, i16 -6695, i16 -6721, i16 -6746, i16 -6772, i16 -6798, i16 -6824, i16 -6849, i16 -6875, i16 -6901, i16 -6926, i16 -6952, i16 -6977, i16 -7003, i16 -7028, i16 -7054, i16 -7079, i16 -7105, i16 -7130, i16 -7156, i16 -7181, i16 -7206, i16 -7232, i16 -7257, i16 -7282, i16 -7308, i16 -7333, i16 -7358, i16 -7383, i16 -7408, i16 -7434, i16 -7459, i16 -7484, i16 -7509, i16 -7534, i16 -7559, i16 -7584, i16 -7609, i16 -7634, i16 -7659, i16 -7684, i16 -7709, i16 -7734, i16 -7759, i16 -7784, i16 -7808, i16 -7833, i16 -7858, i16 -7883, i16 -7908, i16 -7932, i16 -7957, i16 -7982, i16 -8006, i16 -8031, i16 -8056, i16 -8080, i16 -8105, i16 -8129, i16 -8154, i16 -8178, i16 -8203, i16 -8227, i16 -8252, i16 -8276, i16 -8301, i16 -8325, i16 -8350, i16 -8374, i16 -8398, i16 -8423, i16 -8447, i16 -8471, i16 -8495, i16 -8520, i16 -8544, i16 -8568, i16 -8592, i16 -8616, i16 -8640, i16 -8665, i16 -8689, i16 -8713, i16 -8737, i16 -8761, i16 -8785, i16 -8809, i16 -8833, i16 -8857, i16 -8881, i16 -8905, i16 -8928, i16 -8952, i16 -8976, i16 -9000, i16 -9024, i16 -9048, i16 -9071, i16 -9095, i16 -9119, i16 -9142, i16 -9166, i16 -9190, i16 -9213, i16 -9237, i16 -9261, i16 -9284, i16 -9308, i16 -9331, i16 -9355, i16 -9378, i16 -9402, i16 -9425, i16 -9449, i16 -9472, i16 -9496, i16 -9519, i16 -9542, i16 -9566, i16 -9589, i16 -9612, i16 -9636, i16 -9659, i16 -9682, i16 -9705, i16 -9729, i16 -9752, i16 -9775, i16 -9798, i16 -9821, i16 -9844, i16 -9868, i16 -9891, i16 -9914, i16 -9937, i16 -9960, i16 -9983, i16 -10006, i16 -10029, i16 -10052, i16 -10075, i16 -10098, i16 -10120, i16 -10143, i16 -10166, i16 -10189, i16 -10212, i16 -10235, i16 -10257, i16 -10280, i16 -10303, i16 -10326, i16 -10348, i16 -10371, i16 -10394, i16 -10416, i16 -10439, i16 -10462, i16 -10484, i16 -10507, i16 -10529, i16 -10552, i16 -10574, i16 -10597, i16 -10619, i16 -10642, i16 -10664, i16 -10687, i16 -10709, i16 -10731, i16 -10754, i16 -10776, i16 -10798, i16 -10821, i16 -10843, i16 -10865, i16 -10888, i16 -10910, i16 -10932, i16 -10954, i16 -10976, i16 -10999, i16 -11021, i16 -11043, i16 -11065, i16 -11087, i16 -11109, i16 -11131, i16 -11153, i16 -11175, i16 -11197, i16 -11219, i16 -11241, i16 -11263, i16 -11285, i16 -11307, i16 -11329, i16 -11351, i16 -11373, i16 -11395, i16 -11416, i16 -11438, i16 -11460, i16 -11482, i16 -11504, i16 -11525, i16 -11547, i16 -11569, i16 -11590, i16 -11612, i16 -11634, i16 -11655, i16 -11677, i16 -11699, i16 -11720, i16 -11742, i16 -11763, i16 -11785, i16 -11806, i16 -11828, i16 -11849, i16 -11871, i16 -11892, i16 -11914, i16 -11935, i16 -11957, i16 -11978, i16 -11999, i16 -12021, i16 -12042, i16 -12063, i16 -12085, i16 -12106, i16 -12127, i16 -12148, i16 -12170, i16 -12191, i16 -12212, i16 -12233, i16 -12254, i16 -12275, i16 -12297, i16 -12318, i16 -12339, i16 -12360, i16 -12381, i16 -12402, i16 -12423, i16 -12444, i16 -12465, i16 -12486, i16 -12507, i16 -12528, i16 -12549, i16 -12570, i16 -12591, i16 -12612, i16 -12632, i16 -12653, i16 -12674, i16 -12695, i16 -12716, i16 -12736, i16 -12757, i16 -12778, i16 -12799, i16 -12819, i16 -12840, i16 -12861, i16 -12881, i16 -12902, i16 -12923, i16 -12943, i16 -12964, i16 -12985, i16 -13005, i16 -13026, i16 -13046, i16 -13067, i16 -13087, i16 -13108, i16 -13128, i16 -13149, i16 -13169, i16 -13189, i16 -13210, i16 -13230, i16 -13251, i16 -13271, i16 -13291, i16 -13312, i16 -13332, i16 -13352, i16 -13373, i16 -13393, i16 -13413, i16 -13433, i16 -13454, i16 -13474, i16 -13494, i16 -13514, i16 -13534, i16 -13554, i16 -13575, i16 -13595, i16 -13615, i16 -13635, i16 -13655, i16 -13675, i16 -13695, i16 -13715, i16 -13735, i16 -13755, i16 -13775, i16 -13795, i16 -13815, i16 -13835, i16 -13855, i16 -13875, i16 -13894, i16 -13914, i16 -13934, i16 -13954, i16 -13974, i16 -13994, i16 -14013, i16 -14033, i16 -14053, i16 -14073, i16 -14092, i16 -14112, i16 -14132, i16 -14151, i16 -14171, i16 -14191, i16 -14210, i16 -14230, i16 -14250, i16 -14269, i16 -14289, i16 -14308, i16 -14328, i16 -14347, i16 -14367, i16 -14386, i16 -14406, i16 -14425, i16 -14445, i16 -14464, i16 -14484, i16 -14503, i16 -14523, i16 -14542, i16 -14561, i16 -14581, i16 -14600, i16 -14619, i16 -14639, i16 -14658, i16 -14677, i16 -14696, i16 -14716, i16 -14735, i16 -14754, i16 -14773, i16 -14793, i16 -14812, i16 -14831, i16 -14850, i16 -14869, i16 -14888, i16 -14907, i16 -14926, i16 -14946, i16 -14965, i16 -14984, i16 -15003, i16 -15022, i16 -15041, i16 -15060, i16 -15079, i16 -15098, i16 -15117, i16 -15136, i16 -15154, i16 -15173, i16 -15192, i16 -15211, i16 -15230, i16 -15249, i16 -15268, i16 -15287, i16 -15305, i16 -15324, i16 -15343, i16 -15362, i16 -15380, i16 -15399, i16 -15418, i16 -15437, i16 -15455, i16 -15474, i16 -15493, i16 -15511, i16 -15530, i16 -15549, i16 -15567, i16 -15586, i16 -15604, i16 -15623, i16 -15641, i16 -15660, i16 -15679, i16 -15697, i16 -15716, i16 -15734, i16 -15752, i16 -15771, i16 -15789, i16 -15808, i16 -15826, i16 -15845, i16 -15863, i16 -15881, i16 -15900, i16 -15918, i16 -15936, i16 -15955, i16 -15973, i16 -15991, i16 -16010, i16 -16028, i16 -16046, i16 -16064, i16 -16083, i16 -16101, i16 -16119, i16 -16137, i16 -16155, i16 -16174, i16 -16192, i16 -16210, i16 -16228, i16 -16246, i16 -16264, i16 -16282, i16 -16300, i16 -16318, i16 -16336, i16 -16354, i16 -16372, i16 -16390, i16 -16408, i16 -16426, i16 -16444, i16 -16462, i16 -16480, i16 -16498, i16 -16516, i16 -16534, i16 -16552, i16 -16570, i16 -16588, i16 -16605, i16 -16623, i16 -16641, i16 -16659, i16 -16677, i16 -16695, i16 -16712, i16 -16730, i16 -16748, i16 -16766, i16 -16783, i16 -16801, i16 -16819, i16 -16836, i16 -16854, i16 -16872, i16 -16889, i16 -16907, i16 -16924, i16 -16942, i16 -16960, i16 -16977, i16 -16995, i16 -17012, i16 -17030, i16 -17047, i16 -17065, i16 -17082, i16 -17100, i16 -17117, i16 -17135, i16 -17152, i16 -17170, i16 -17187, i16 -17205, i16 -17222, i16 -17239, i16 -17257, i16 -17274, i16 -17291, i16 -17309, i16 -17326, i16 -17343, i16 -17361, i16 -17378, i16 -17395, i16 -17413, i16 -17430, i16 -17447, i16 -17464, i16 -17481, i16 -17499, i16 -17516, i16 -17533, i16 -17550, i16 -17567, i16 -17584, i16 -17602, i16 -17619, i16 -17636, i16 -17653, i16 -17670, i16 -17687, i16 -17704, i16 -17721, i16 -17738, i16 -17755, i16 -17772, i16 -17789, i16 -17806, i16 -17823, i16 -17840, i16 -17857, i16 -17874, i16 -17891, i16 -17908, i16 -17925, i16 -17942, i16 -17958, i16 -17975, i16 -17992, i16 -18009, i16 -18026, i16 -18043, i16 -18059, i16 -18076, i16 -18093, i16 -18110, i16 -18126, i16 -18143, i16 -18160, i16 -18177, i16 -18193, i16 -18210, i16 -18227, i16 -18243, i16 -18260, i16 -18277, i16 -18293, i16 -18310, i16 -18327, i16 -18343, i16 -18360, i16 -18376, i16 -18393, i16 -18409, i16 -18426, i16 -18443, i16 -18459, i16 -18476, i16 -18492, i16 -18509, i16 -18525, i16 -18541, i16 -18558, i16 -18574, i16 -18591, i16 -18607, i16 -18624, i16 -18640, i16 -18656, i16 -18673, i16 -18689, i16 -18705, i16 -18722, i16 -18738, i16 -18754, i16 -18771, i16 -18787, i16 -18803, i16 -18820, i16 -18836, i16 -18852, i16 -18868, i16 -18885, i16 -18901, i16 -18917, i16 -18933, i16 -18949, i16 -18965, i16 -18982, i16 -18998, i16 -19014, i16 -19030, i16 -19046, i16 -19062, i16 -19078, i16 -19094, i16 -19110, i16 -19126, i16 -19143, i16 -19159, i16 -19175, i16 -19191, i16 -19207, i16 -19223, i16 -19239, i16 -19255, i16 -19270, i16 -19286, i16 -19302, i16 -19318, i16 -19334, i16 -19350, i16 -19366, i16 -19382, i16 -19398, i16 -19414, i16 -19429, i16 -19445, i16 -19461, i16 -19477, i16 -19493, i16 -19508, i16 -19524, i16 -19540, i16 -19556, i16 -19572, i16 -19587, i16 -19603, i16 -19619, i16 -19634, i16 -19650, i16 -19666, i16 -19681, i16 -19697, i16 -19713, i16 -19728, i16 -19744, i16 -19760, i16 -19775, i16 -19791, i16 -19806, i16 -19822, i16 -19838, i16 -19853, i16 -19869, i16 -19884, i16 -19900, i16 -19915, i16 -19931, i16 -19946, i16 -19962, i16 -19977, i16 -19993, i16 -20008, i16 -20024, i16 -20039, i16 -20054, i16 -20070, i16 -20085, i16 -20101, i16 -20116, i16 -20131, i16 -20147, i16 -20162, i16 -20177, i16 -20193, i16 -20208, i16 -20223, i16 -20239, i16 -20254, i16 -20269, i16 -20284, i16 -20300, i16 -20315, i16 -20330, i16 -20345, i16 -20361, i16 -20376, i16 -20391, i16 -20406, i16 -20421, i16 -20436, i16 -20452, i16 -20467, i16 -20482, i16 -20497, i16 -20512, i16 -20527, i16 -20542, i16 -20557, i16 -20572, i16 -20587, i16 -20603, i16 -20618, i16 -20633, i16 -20648, i16 -20663, i16 -20678, i16 -20693, i16 -20708, i16 -20723, i16 -20738, i16 -20752, i16 -20767, i16 -20782, i16 -20797, i16 -20812, i16 -20827, i16 -20842, i16 -20857, i16 -20872, i16 -20887, i16 -20901, i16 -20916, i16 -20931, i16 -20946, i16 -20961, i16 -20975, i16 -20990, i16 -21005, i16 -21020, i16 -21035, i16 -21049, i16 -21064, i16 -21079, i16 -21094, i16 -21108, i16 -21123, i16 -21138, i16 -21152, i16 -21167, i16 -21182, i16 -21196, i16 -21211, i16 -21226, i16 -21240, i16 -21255, i16 -21269, i16 -21284, i16 -21299, i16 -21313, i16 -21328, i16 -21342, i16 -21357, i16 -21371, i16 -21386, i16 -21400, i16 -21415, i16 -21429, i16 -21444, i16 -21458, i16 -21473, i16 -21487, i16 -21502, i16 -21516, i16 -21531, i16 -21545, i16 -21560, i16 -21574, i16 -21588, i16 -21603, i16 -21617, i16 -21631, i16 -21646, i16 -21660, i16 -21674, i16 -21689, i16 -21703, i16 -21717, i16 -21732, i16 -21746, i16 -21760, i16 -21775, i16 -21789, i16 -21803, i16 -21817, i16 -21832, i16 -21846, i16 -21860, i16 -21874, i16 -21888, i16 -21903, i16 -21917, i16 -21931, i16 -21945, i16 -21959, i16 -21973, i16 -21988, i16 -22002, i16 -22016, i16 -22030, i16 -22044, i16 -22058, i16 -22072, i16 -22086, i16 -22100, i16 -22114, i16 -22128, i16 -22142, i16 -22156, i16 -22171, i16 -22185, i16 -22199, i16 -22213, i16 -22226, i16 -22240, i16 -22254, i16 -22268, i16 -22282, i16 -22296, i16 -22310, i16 -22324, i16 -22338, i16 -22352, i16 -22366, i16 -22380, i16 -22394, i16 -22407, i16 -22421, i16 -22435, i16 -22449, i16 -22463, i16 -22477, i16 -22490, i16 -22504, i16 -22518, i16 -22532, i16 -22546, i16 -22559, i16 -22573, i16 -22587, i16 -22601, i16 -22614, i16 -22628, i16 -22642, i16 -22655, i16 -22669, i16 -22683, i16 -22696, i16 -22710, i16 -22724, i16 -22737, i16 -22751, i16 -22765, i16 -22778, i16 -22792, i16 -22806, i16 -22819, i16 -22833, i16 -22846, i16 -22860, i16 -22874, i16 -22887, i16 -22901, i16 -22914, i16 -22928, i16 -22941, i16 -22955, i16 -22968, i16 -22982, i16 -22995, i16 -23009, i16 -23022, i16 -23036, i16 -23049, i16 -23063, i16 -23076, i16 -23089, i16 -23103, i16 -23116, i16 -23130, i16 -23143, i16 -23156, i16 -23170, i16 -23183, i16 -23197, i16 -23210, i16 -23223, i16 -23237, i16 -23250, i16 -23263, i16 -23277, i16 -23290, i16 -23303, i16 -23316, i16 -23330, i16 -23343, i16 -23356, i16 -23369, i16 -23383, i16 -23396, i16 -23409, i16 -23422, i16 -23436, i16 -23449, i16 -23462, i16 -23475, i16 -23488, i16 -23502, i16 -23515, i16 -23528, i16 -23541, i16 -23554, i16 -23567, i16 -23580, i16 -23593, i16 -23607, i16 -23620, i16 -23633, i16 -23646, i16 -23659, i16 -23672, i16 -23685, i16 -23698, i16 -23711, i16 -23724, i16 -23737, i16 -23750, i16 -23763, i16 -23776, i16 -23789, i16 -23802, i16 -23815, i16 -23828, i16 -23841, i16 -23854, i16 -23867, i16 -23880, i16 -23893, i16 -23906, i16 -23919, i16 -23931, i16 -23944, i16 -23957, i16 -23970, i16 -23983, i16 -23996, i16 -24009, i16 -24022, i16 -24034, i16 -24047, i16 -24060, i16 -24073, i16 -24086, i16 -24098, i16 -24111, i16 -24124, i16 -24137, i16 -24150, i16 -24162, i16 -24175, i16 -24188, i16 -24201, i16 -24213, i16 -24226, i16 -24239, i16 -24251, i16 -24264, i16 -24277, i16 -24290, i16 -24302, i16 -24315, i16 -24327, i16 -24340, i16 -24353, i16 -24365, i16 -24378, i16 -24391, i16 -24403, i16 -24416, i16 -24428, i16 -24441, i16 -24454, i16 -24466, i16 -24479, i16 -24491, i16 -24504, i16 -24516, i16 -24529, i16 -24541, i16 -24554, i16 -24566, i16 -24579, i16 -24591, i16 -24604, i16 -24616, i16 -24629, i16 -24641, i16 -24654, i16 -24666, i16 -24679, i16 -24691, i16 -24704, i16 -24716, i16 -24728, i16 -24741, i16 -24753, i16 -24766, i16 -24778, i16 -24790, i16 -24803, i16 -24815, i16 -24827, i16 -24840, i16 -24852, i16 -24864, i16 -24877, i16 -24889, i16 -24901, i16 -24914, i16 -24926, i16 -24938, i16 -24951, i16 -24963, i16 -24975, i16 -24987, i16 -25000, i16 -25012, i16 -25024, i16 -25036, i16 -25048, i16 -25061, i16 -25073, i16 -25085, i16 -25097, i16 -25109, i16 -25122, i16 -25134, i16 -25146, i16 -25158, i16 -25170, i16 -25182, i16 -25195, i16 -25207, i16 -25219, i16 -25231, i16 -25243, i16 -25255, i16 -25267, i16 -25279, i16 -25291, i16 -25303, i16 -25315, i16 -25327, i16 -25340, i16 -25352, i16 -25364, i16 -25376, i16 -25388, i16 -25400, i16 -25412, i16 -25424, i16 -25436, i16 -25448, i16 -25460, i16 -25472, i16 -25483, i16 -25495, i16 -25507, i16 -25519, i16 -25531, i16 -25543, i16 -25555, i16 -25567, i16 -25579, i16 -25591, i16 -25603, i16 -25615, i16 -25626, i16 -25638, i16 -25650, i16 -25662, i16 -25674, i16 -25686, i16 -25697, i16 -25709, i16 -25721, i16 -25733, i16 -25745, i16 -25756, i16 -25768, i16 -25780, i16 -25792, i16 -25804, i16 -25815, i16 -25827, i16 -25839, i16 -25851, i16 -25862, i16 -25874, i16 -25886, i16 -25897, i16 -25909, i16 -25921, i16 -25933, i16 -25944, i16 -25956, i16 -25968, i16 -25979, i16 -25991, i16 -26003, i16 -26014, i16 -26026, i16 -26037, i16 -26049, i16 -26061, i16 -26072, i16 -26084, i16 -26095, i16 -26107, i16 -26119, i16 -26130, i16 -26142, i16 -26153, i16 -26165, i16 -26176, i16 -26188, i16 -26200, i16 -26211, i16 -26223, i16 -26234, i16 -26246, i16 -26257, i16 -26269, i16 -26280, i16 -26292, i16 -26303, i16 -26314, i16 -26326, i16 -26337, i16 -26349, i16 -26360, i16 -26372, i16 -26383, i16 -26395, i16 -26406, i16 -26417, i16 -26429, i16 -26440, i16 -26452, i16 -26463, i16 -26474, i16 -26486, i16 -26497, i16 -26508, i16 -26520, i16 -26531, i16 -26542, i16 -26554, i16 -26565, i16 -26576, i16 -26588, i16 -26599, i16 -26610, i16 -26622, i16 -26633, i16 -26644, i16 -26655, i16 -26667, i16 -26678, i16 -26689, i16 -26700, i16 -26712, i16 -26723, i16 -26734, i16 -26745, i16 -26756, i16 -26768, i16 -26779, i16 -26790, i16 -26801, i16 -26812, i16 -26824, i16 -26835, i16 -26846, i16 -26857, i16 -26868, i16 -26879, i16 -26890, i16 -26902, i16 -26913, i16 -26924, i16 -26935, i16 -26946, i16 -26957, i16 -26968, i16 -26979, i16 -26990, i16 -27001, i16 -27012, i16 -27024, i16 -27035, i16 -27046, i16 -27057, i16 -27068, i16 -27079, i16 -27090, i16 -27101, i16 -27112, i16 -27123, i16 -27134, i16 -27145, i16 -27156, i16 -27167, i16 -27178, i16 -27189, i16 -27200, i16 -27210, i16 -27221, i16 -27232, i16 -27243, i16 -27254, i16 -27265, i16 -27276, i16 -27287, i16 -27298, i16 -27309, i16 -27320, i16 -27330, i16 -27341, i16 -27352, i16 -27363, i16 -27374, i16 -27385, i16 -27396, i16 -27406, i16 -27417, i16 -27428, i16 -27439, i16 -27450, i16 -27461, i16 -27471, i16 -27482, i16 -27493, i16 -27504, i16 -27514, i16 -27525, i16 -27536, i16 -27547, i16 -27558, i16 -27568, i16 -27579, i16 -27590, i16 -27600, i16 -27611, i16 -27622, i16 -27633, i16 -27643, i16 -27654, i16 -27665, i16 -27675, i16 -27686, i16 -27697, i16 -27707, i16 -27718, i16 -27729, i16 -27739, i16 -27750, i16 -27761, i16 -27771, i16 -27782, i16 -27792, i16 -27803, i16 -27814, i16 -27824, i16 -27835, i16 -27845, i16 -27856, i16 -27867, i16 -27877, i16 -27888, i16 -27898, i16 -27909, i16 -27919, i16 -27930, i16 -27940, i16 -27951, i16 -27962, i16 -27972, i16 -27983, i16 -27993, i16 -28004, i16 -28014, i16 -28025, i16 -28035, i16 -28046, i16 -28056, i16 -28066, i16 -28077, i16 -28087, i16 -28098, i16 -28108, i16 -28119, i16 -28129, i16 -28140, i16 -28150, i16 -28160, i16 -28171, i16 -28181, i16 -28192, i16 -28202, i16 -28212, i16 -28223, i16 -28233, i16 -28243, i16 -28254, i16 -28264, i16 -28274, i16 -28285, i16 -28295, i16 -28306, i16 -28316, i16 -28326, i16 -28336, i16 -28347, i16 -28357, i16 -28367, i16 -28378, i16 -28388, i16 -28398, i16 -28408, i16 -28419, i16 -28429, i16 -28439, i16 -28450, i16 -28460, i16 -28470, i16 -28480, i16 -28490, i16 -28501, i16 -28511, i16 -28521, i16 -28531, i16 -28542, i16 -28552, i16 -28562, i16 -28572, i16 -28582, i16 -28592, i16 -28603, i16 -28613, i16 -28623, i16 -28633, i16 -28643, i16 -28653, i16 -28663, i16 -28674, i16 -28684, i16 -28694, i16 -28704, i16 -28714, i16 -28724, i16 -28734, i16 -28744, i16 -28754, i16 -28765, i16 -28775, i16 -28785, i16 -28795, i16 -28805, i16 -28815, i16 -28825, i16 -28835, i16 -28845, i16 -28855, i16 -28865, i16 -28875, i16 -28885, i16 -28895, i16 -28905, i16 -28915, i16 -28925, i16 -28935, i16 -28945, i16 -28955, i16 -28965, i16 -28975, i16 -28985, i16 -28995, i16 -29005, i16 -29015, i16 -29025, i16 -29035, i16 -29044, i16 -29054, i16 -29064, i16 -29074, i16 -29084, i16 -29094, i16 -29104, i16 -29114, i16 -29124, i16 -29134, i16 -29143, i16 -29153, i16 -29163, i16 -29173, i16 -29183, i16 -29193, i16 -29203, i16 -29212, i16 -29222, i16 -29232, i16 -29242, i16 -29252, i16 -29261, i16 -29271, i16 -29281, i16 -29291, i16 -29301, i16 -29310, i16 -29320, i16 -29330, i16 -29340, i16 -29349, i16 -29359, i16 -29369, i16 -29379, i16 -29388, i16 -29398, i16 -29408, i16 -29418, i16 -29427, i16 -29437, i16 -29447, i16 -29456, i16 -29466, i16 -29476, i16 -29486, i16 -29495, i16 -29505, i16 -29515, i16 -29524, i16 -29534, i16 -29544, i16 -29553, i16 -29563, i16 -29572, i16 -29582, i16 -29592, i16 -29601, i16 -29611, i16 -29621, i16 -29630, i16 -29640, i16 -29649, i16 -29659, i16 -29669, i16 -29678, i16 -29688, i16 -29697, i16 -29707, i16 -29716, i16 -29726, i16 -29736, i16 -29745, i16 -29755, i16 -29764, i16 -29774, i16 -29783, i16 -29793, i16 -29802, i16 -29812, i16 -29821, i16 -29831, i16 -29840, i16 -29850, i16 -29859, i16 -29869, i16 -29878, i16 -29888, i16 -29897, i16 -29907, i16 -29916, i16 -29926, i16 -29935, i16 -29944, i16 -29954, i16 -29963, i16 -29973, i16 -29982, i16 -29992, i16 -30001, i16 -30010, i16 -30020, i16 -30029, i16 -30039, i16 -30048, i16 -30057, i16 -30067, i16 -30076, i16 -30085, i16 -30095, i16 -30104, i16 -30114, i16 -30123, i16 -30132, i16 -30142, i16 -30151, i16 -30160, i16 -30170, i16 -30179, i16 -30188, i16 -30197, i16 -30207, i16 -30216, i16 -30225, i16 -30235, i16 -30244, i16 -30253, i16 -30262, i16 -30272, i16 -30281, i16 -30290, i16 -30299, i16 -30309, i16 -30318, i16 -30327, i16 -30336, i16 -30346, i16 -30355, i16 -30364, i16 -30373, i16 -30383, i16 -30392, i16 -30401, i16 -30410, i16 -30419, i16 -30429, i16 -30438, i16 -30447, i16 -30456, i16 -30465, i16 -30474, i16 -30484, i16 -30493, i16 -30502, i16 -30511, i16 -30520, i16 -30529, i16 -30538, i16 -30548, i16 -30557, i16 -30566, i16 -30575, i16 -30584, i16 -30593, i16 -30602, i16 -30611, i16 -30620, i16 -30629, i16 -30638, i16 -30648, i16 -30657, i16 -30666, i16 -30675, i16 -30684, i16 -30693, i16 -30702, i16 -30711, i16 -30720, i16 -30729, i16 -30738, i16 -30747, i16 -30756, i16 -30765, i16 -30774, i16 -30783, i16 -30792, i16 -30801, i16 -30810, i16 -30819, i16 -30828, i16 -30837, i16 -30846, i16 -30855, i16 -30864, i16 -30873, i16 -30882, i16 -30891, i16 -30900, i16 -30909, i16 -30918, i16 -30926, i16 -30935, i16 -30944, i16 -30953, i16 -30962, i16 -30971, i16 -30980, i16 -30989, i16 -30998, i16 -31007, i16 -31015, i16 -31024, i16 -31033, i16 -31042, i16 -31051, i16 -31060, i16 -31069, i16 -31078, i16 -31086, i16 -31095, i16 -31104, i16 -31113, i16 -31122, i16 -31131, i16 -31139, i16 -31148, i16 -31157, i16 -31166, i16 -31175, i16 -31183, i16 -31192, i16 -31201, i16 -31210, i16 -31218, i16 -31227, i16 -31236, i16 -31245, i16 -31254, i16 -31262, i16 -31271, i16 -31280, i16 -31289, i16 -31297, i16 -31306, i16 -31315, i16 -31323, i16 -31332, i16 -31341, i16 -31350, i16 -31358, i16 -31367, i16 -31376, i16 -31384, i16 -31393, i16 -31402, i16 -31410, i16 -31419, i16 -31428, i16 -31436, i16 -31445, i16 -31454, i16 -31462, i16 -31471, i16 -31480, i16 -31488, i16 -31497, i16 -31506, i16 -31514, i16 -31523, i16 -31531, i16 -31540, i16 -31549, i16 -31557, i16 -31566, i16 -31575, i16 -31583, i16 -31592, i16 -31600, i16 -31609, i16 -31617, i16 -31626, i16 -31635, i16 -31643, i16 -31652, i16 -31660, i16 -31669, i16 -31677, i16 -31686, i16 -31694, i16 -31703, i16 -31711, i16 -31720, i16 -31729, i16 -31737, i16 -31746, i16 -31754, i16 -31763, i16 -31771, i16 -31780, i16 -31788, i16 -31796, i16 -31805, i16 -31813, i16 -31822, i16 -31830, i16 -31839, i16 -31847, i16 -31856, i16 -31864, i16 -31873, i16 -31881, i16 -31890, i16 -31898, i16 -31906, i16 -31915, i16 -31923, i16 -31932, i16 -31940, i16 -31948, i16 -31957, i16 -31965, i16 -31974, i16 -31982, i16 -31990, i16 -31999, i16 -32007, i16 -32016, i16 -32024, i16 -32032, i16 -32041, i16 -32049, i16 -32057, i16 -32066, i16 -32074, i16 -32082, i16 -32091, i16 -32099, i16 -32107, i16 -32116, i16 -32124, i16 -32132, i16 -32141, i16 -32149, i16 -32157, i16 -32166, i16 -32174, i16 -32182, i16 -32190, i16 -32199, i16 -32207, i16 -32215, i16 -32224, i16 -32232, i16 -32240, i16 -32248, i16 -32257, i16 -32265, i16 -32273, i16 -32281, i16 -32290, i16 -32298, i16 -32306, i16 -32314, i16 -32323, i16 -32331, i16 -32339, i16 -32347, i16 -32355, i16 -32364, i16 -32372, i16 -32380, i16 -32388, i16 -32396, i16 -32404, i16 -32413, i16 -32421, i16 -32429, i16 -32437, i16 -32445, i16 -32453, i16 -32462, i16 -32470, i16 -32478, i16 -32486, i16 -32494, i16 -32502, i16 -32510, i16 -32519, i16 -32527, i16 -32535, i16 -32543, i16 -32551, i16 -32559, i16 -32567, i16 -32575, i16 -32583, i16 -32592, i16 -32600, i16 -32608, i16 -32616, i16 -32624, i16 -32632, i16 -32640, i16 -32648, i16 -32656, i16 -32664, i16 -32672, i16 -32680, i16 -32688, i16 -32696, i16 -32704, i16 -32712, i16 -32720, i16 -32728, i16 -32736, i16 -32744, i16 -32752], align 16
@.str = private unnamed_addr constant [108 x i8] c"((_src_mat.rows <= ROWS ) && (_src_mat.cols <= COLS)) && \22ROWS and COLS should be greater than input image\22\00", align 1
@.str1 = private unnamed_addr constant [21 x i8] c"xf_otsuthreshold.hpp\00", align 1
@__PRETTY_FUNCTION__._ZL76p_ZN2xf13OtsuThresholdILi0ELi256ELi256ELi1EEER3MatILi0ELi256ELi256ELi1EERh_1R19xf_Mat_0_256_256_1_Rh = private unnamed_addr constant [129 x i8] c"void p_ZN2xf13OtsuThresholdILi0ELi256ELi256ELi1EEER3MatILi0ELi256ELi256ELi1EERh_1(struct xf_Mat_0_256_256_1_ &, unsigned char &)\00", align 1
@.str2 = private unnamed_addr constant [79 x i8] c"(M<=16) && \22Integer part of x should always be less than or equal to 16 bits.\22\00", align 1
@.str3 = private unnamed_addr constant [10 x i8] c"xf_math.h\00", align 1
@__PRETTY_FUNCTION__._ZL20p_ZN2xf7InverseEtiPctiPc = private unnamed_addr constant [63 x i8] c"unsigned int p_ZN2xf7InverseEtiPc(unsigned short, int, char *)\00", align 1
@.str4 = private unnamed_addr constant [143 x i8] c"(_rows > 0) && (_rows <= ROWS) && (_cols > 0) && (_cols <= COLS) && \22The number of rows and columns must be less than the template arguments.\22\00", align 1
@.str5 = private unnamed_addr constant [13 x i8] c"xf_structs.h\00", align 1
@__PRETTY_FUNCTION__._ZL38p_ZN2xf16Mat_0_256_256_1_4initIEEiib_1P19xf_Mat_0_256_256_1_iib = private unnamed_addr constant [90 x i8] c"void p_ZN2xf16Mat_0_256_256_1_4initIEEiib_1(struct xf_Mat_0_256_256_1_ *, int, int, bool)\00", align 1

define void @_Z19otsuthreshold_accelP7ap_uintILi256EEPhii(%class.ap_uint* %img_inp, i8* %Otsuval, i32 %rows, i32 %cols) uwtable {
  %1 = alloca %class.ap_uint*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %pROWS = alloca i32, align 4
  %pCOLS = alloca i32, align 4
  %pNPC1 = alloca i32, align 4
  %Otsuval_loc = alloca i8, align 1
  %in_mat = alloca %struct.xf_Mat_0_256_256_1_, align 4
  store %class.ap_uint* %img_inp, %class.ap_uint** %1, align 8
  store i8* %Otsuval, i8** %2, align 8
  store i32 %rows, i32* %3, align 4
  store i32 %cols, i32* %4, align 4
  store i32 256, i32* %pROWS, align 4
  store i32 256, i32* %pCOLS, align 4
  store i32 1, i32* %pNPC1, align 4
  call void @_ZN19xf_Mat_0_256_256_1_C1Ev(%struct.xf_Mat_0_256_256_1_* %in_mat)
  call void @_ZL33p_ZN2xf16Mat_0_256_256_1_C2IEEv_1P19xf_Mat_0_256_256_1_(%struct.xf_Mat_0_256_256_1_* %in_mat)
  %5 = load i32* %3, align 4
  %6 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %in_mat, i32 0, i32 1
  store i32 %5, i32* %6, align 4
  %7 = load i32* %4, align 4
  %8 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %in_mat, i32 0, i32 2
  store i32 %7, i32* %8, align 4
  %9 = load %class.ap_uint** %1, align 8
  call void @_ZL95p_ZN2xf11Array2xfMatILi256ELi0ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi0ELi256ELi256ELi1EE_1P7ap_uintILi256EER19xf_Mat_0_256_256_1_(%class.ap_uint* %9, %struct.xf_Mat_0_256_256_1_* %in_mat)
  call void @_ZL76p_ZN2xf13OtsuThresholdILi0ELi256ELi256ELi1EEER3MatILi0ELi256ELi256ELi1EERh_1R19xf_Mat_0_256_256_1_Rh(%struct.xf_Mat_0_256_256_1_* %in_mat, i8* %Otsuval_loc)
  %10 = load i8* %Otsuval_loc, align 1
  %11 = load i8** %2, align 8
  store i8 %10, i8* %11, align 1
  ret void
}

define linkonce_odr void @_ZN19xf_Mat_0_256_256_1_C1Ev(%struct.xf_Mat_0_256_256_1_* %this) unnamed_addr uwtable inlinehint align 2 {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  store %struct.xf_Mat_0_256_256_1_* %this, %struct.xf_Mat_0_256_256_1_** %1, align 8
  %2 = load %struct.xf_Mat_0_256_256_1_** %1
  call void @_ZN19xf_Mat_0_256_256_1_C2Ev(%struct.xf_Mat_0_256_256_1_* %2)
  ret void
}

define internal void @_ZL33p_ZN2xf16Mat_0_256_256_1_C2IEEv_1P19xf_Mat_0_256_256_1_(%struct.xf_Mat_0_256_256_1_* %this_) uwtable {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  store %struct.xf_Mat_0_256_256_1_* %this_, %struct.xf_Mat_0_256_256_1_** %1, align 8
  %2 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  call void @_ZL38p_ZN2xf16Mat_0_256_256_1_4initIEEiib_1P19xf_Mat_0_256_256_1_iib(%struct.xf_Mat_0_256_256_1_* %2, i32 256, i32 256, i1 zeroext true)
  ret void
}

define internal void @_ZL95p_ZN2xf11Array2xfMatILi256ELi0ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi0ELi256ELi256ELi1EE_1P7ap_uintILi256EER19xf_Mat_0_256_256_1_(%class.ap_uint* %srcPtr, %struct.xf_Mat_0_256_256_1_* %dstMat) uwtable {
  %1 = alloca %class.ap_uint*, align 8
  %2 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %au = alloca %struct.xf_accel_utils, align 1
  store %class.ap_uint* %srcPtr, %class.ap_uint** %1, align 8
  store %struct.xf_Mat_0_256_256_1_* %dstMat, %struct.xf_Mat_0_256_256_1_** %2, align 8
  %3 = load %class.ap_uint** %1, align 8
  %4 = load %struct.xf_Mat_0_256_256_1_** %2, align 8
  call void @_ZL108p_ZN2xf11accel_utils11Array2xfMatILi256ELi0ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi0ELi256ELi256ELi1EE_1P14xf_accel_utilsP7ap_uintILi256EER19xf_Mat_0_256_256_1_(%struct.xf_accel_utils* %au, %class.ap_uint* %3, %struct.xf_Mat_0_256_256_1_* %4)
  ret void
}

define internal void @_ZL76p_ZN2xf13OtsuThresholdILi0ELi256ELi256ELi1EEER3MatILi0ELi256ELi256ELi1EERh_1R19xf_Mat_0_256_256_1_Rh(%struct.xf_Mat_0_256_256_1_* %_src_mat, i8* %_thresh) uwtable {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %2 = alloca i8*, align 8
  %hist = alloca [1 x [256 x i32]], align 16
  %thresh = alloca i8, align 1
  %width = alloca i16, align 2
  %height = alloca i16, align 2
  store %struct.xf_Mat_0_256_256_1_* %_src_mat, %struct.xf_Mat_0_256_256_1_** %1, align 8
  store i8* %_thresh, i8** %2, align 8
  %3 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %4 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %3, i32 0, i32 1
  %5 = load i32* %4, align 4
  %6 = icmp sle i32 %5, 256
  br i1 %6, label %7, label %13

; <label>:7                                       ; preds = %0
  %8 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %9 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %8, i32 0, i32 2
  %10 = load i32* %9, align 4
  %11 = icmp sle i32 %10, 256
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %7
  br label %15

; <label>:13                                      ; preds = %7, %0
  call void @__assert_fail(i8* getelementptr inbounds ([108 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8]* @.str1, i32 0, i32 0), i32 172, i8* getelementptr inbounds ([129 x i8]* @__PRETTY_FUNCTION__._ZL76p_ZN2xf13OtsuThresholdILi0ELi256ELi256ELi1EEER3MatILi0ELi256ELi256ELi1EERh_1R19xf_Mat_0_256_256_1_Rh, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %15

; <label>:15                                      ; preds = %14, %12
  %16 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %17 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %16, i32 0, i32 2
  %18 = load i32* %17, align 4
  %19 = ashr i32 %18, 0
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %width, align 2
  %21 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %22 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %21, i32 0, i32 1
  %23 = load i32* %22, align 4
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %height, align 2
  %25 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %26 = getelementptr inbounds [1 x [256 x i32]]* %hist, i32 0, i32 0
  call void @_ZL107p_ZN2xf17xFHistogramKernelILi0ELi256ELi256ELi0ELi1ELi1ELi128ELi1EEER3MatILi0ELi256ELi256ELi1EEPA256_jRtRt_1R19xf_Mat_0_256_256_1_PA256_jRtS3_(%struct.xf_Mat_0_256_256_1_* %25, [256 x i32]* %26, i16* %height, i16* %width)
  %27 = getelementptr inbounds [1 x [256 x i32]]* %hist, i32 0, i32 0
  %28 = load i16* %height, align 2
  %29 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %30 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %29, i32 0, i32 2
  %31 = load i32* %30, align 4
  %32 = trunc i32 %31 to i16
  call void @_ZL33p_ZN2xf12xfOtsuKernelEPA256_jttRhPA256_jttRh([256 x i32]* %27, i16 zeroext %28, i16 zeroext %32, i8* %thresh)
  %33 = load i8* %thresh, align 1
  %34 = load i8** %2, align 8
  store i8 %33, i8* %34, align 1
  ret void
}

declare void @__assert_fail(i8*, i8*, i32, i8*) noreturn nounwind

define internal void @_ZL107p_ZN2xf17xFHistogramKernelILi0ELi256ELi256ELi0ELi1ELi1ELi128ELi1EEER3MatILi0ELi256ELi256ELi1EEPA256_jRtRt_1R19xf_Mat_0_256_256_1_PA256_jRtS3_(%struct.xf_Mat_0_256_256_1_* %_src_mat, [256 x i32]* %hist_array, i16* %imgheight, i16* %imgwidth) uwtable {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %2 = alloca [256 x i32]*, align 8
  %3 = alloca i16*, align 8
  %4 = alloca i16*, align 8
  %tmp_hist = alloca [1 x [256 x i32]], align 16
  %tmp_hist1 = alloca [1 x [256 x i32]], align 16
  %in_buf = alloca %class.ap_uint.0, align 1
  %in_buf1 = alloca %class.ap_uint.0, align 1
  %temp_buf = alloca %class.ap_uint.0, align 1
  %flag = alloca i8, align 1
  %i = alloca %class.ap_uint.4, align 1
  %5 = alloca %class.ap_uint.4, align 1
  %j = alloca %class.ap_uint.5, align 1
  %6 = alloca %class.ap_uint.5, align 1
  %7 = alloca %class.ap_uint.5, align 1
  %8 = alloca %class.ap_uint.4, align 1
  %row = alloca %class.ap_uint.6, align 1
  %9 = alloca %class.ap_uint.6, align 1
  %col = alloca %class.ap_uint.6, align 1
  %10 = alloca %class.ap_uint.6, align 1
  %11 = alloca %class.ap_uint.0, align 1
  %12 = alloca %class.ap_uint.6, align 1
  %13 = alloca %class.ap_uint.6, align 1
  %14 = alloca %class.ap_int.7, align 1
  %15 = alloca %class.ap_uint.6, align 1
  %16 = alloca %class.ap_uint.0, align 1
  %17 = alloca %class.ap_int.7, align 1
  %18 = alloca %class.ap_uint.6, align 1
  %19 = alloca %class.ap_uint.6, align 1
  %20 = alloca %class.ap_int.7, align 1
  %_l_i = alloca %class.ap_uint.8, align 1
  %_l_j = alloca %class.ap_uint.8, align 1
  %21 = alloca %class.ap_uint.8, align 1
  %_in_l_i = alloca %class.ap_uint.8, align 1
  %22 = alloca %class.ap_uint.8, align 1
  %val = alloca %class.ap_uint.0, align 1
  %val1 = alloca %class.ap_uint.0, align 1
  %23 = alloca %class.ap_uint.8, align 1
  %24 = alloca %class.ap_uint.8, align 1
  %tmpval = alloca i32, align 4
  %tmpval1 = alloca i32, align 4
  %25 = alloca %class.ap_uint.6, align 1
  %26 = alloca %class.ap_uint.8, align 1
  %27 = alloca %class.ap_uint.8, align 1
  %28 = alloca %class.ap_uint.6, align 1
  %29 = alloca %class.ap_uint.6, align 1
  %cnt = alloca i32, align 4
  %p = alloca i32, align 4
  %plane = alloca [1 x i32], align 4
  %i1 = alloca %class.ap_uint.4, align 1
  %30 = alloca %class.ap_uint.4, align 1
  %_l_j_0 = alloca %class.ap_uint.5, align 1
  %_l_k = alloca %class.ap_uint.5, align 1
  %31 = alloca %class.ap_uint.5, align 1
  %value = alloca i32, align 4
  %32 = alloca %class.ap_uint.5, align 1
  %33 = alloca %class.ap_uint.5, align 1
  %34 = alloca %class.ap_uint.4, align 1
  store %struct.xf_Mat_0_256_256_1_* %_src_mat, %struct.xf_Mat_0_256_256_1_** %1, align 8
  store [256 x i32]* %hist_array, [256 x i32]** %2, align 8
  store i16* %imgheight, i16** %3, align 8
  store i16* %imgwidth, i16** %4, align 8
  %35 = bitcast [1 x [256 x i32]]* %tmp_hist to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 1024, i32 16, i1 false)
  %36 = bitcast [1 x [256 x i32]]* %tmp_hist1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 1024, i32 16, i1 false)
  call void @_ZN7ap_uintILi8EEC1Ev(%class.ap_uint.0* %in_buf)
  call void @_ZN7ap_uintILi8EEC1Ev(%class.ap_uint.0* %in_buf1)
  call void @_ZN7ap_uintILi8EEC1Ev(%class.ap_uint.0* %temp_buf)
  store i8 0, i8* %flag, align 1
  br label %37

; <label>:37                                      ; preds = %0
  call void @_ZN7ap_uintILi10EEC1Ei(%class.ap_uint.4* %i, i32 0)
  br label %38

; <label>:38                                      ; preds = %67, %37
  %39 = bitcast %class.ap_uint.4* %5 to i8*
  %40 = bitcast %class.ap_uint.4* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 2, i32 1, i1 false)
  %41 = getelementptr %class.ap_uint.4* %5, i32 0, i32 0
  %42 = bitcast [2 x i8]* %41 to i16*
  %43 = load i16* %42, align 1
  %44 = call zeroext i1 @_ZltILi10EEb7ap_uintIXT_EEi(i16 %43, i32 256)
  br i1 %44, label %45, label %71

; <label>:45                                      ; preds = %38
  call void @_ZN7ap_uintILi5EEC1Ei(%class.ap_uint.5* %j, i32 0)
  br label %46

; <label>:46                                      ; preds = %62, %45
  %47 = bitcast %class.ap_uint.5* %6 to i8*
  %48 = bitcast %class.ap_uint.5* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 1, i32 1, i1 false)
  %49 = getelementptr %class.ap_uint.5* %6, i32 0, i32 0
  %50 = bitcast [1 x i8]* %49 to i8*
  %51 = load i8* %50, align 1
  %52 = call zeroext i1 @_ZltILi5EEb7ap_uintIXT_EEi(i8 %51, i32 1)
  br i1 %52, label %53, label %66

; <label>:53                                      ; preds = %46
  %54 = call i64 @_ZNK7ap_uintILi10EEcvmEv(%class.ap_uint.4* %i)
  %55 = call i64 @_ZNK7ap_uintILi5EEcvmEv(%class.ap_uint.5* %j)
  %56 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist, i32 0, i64 %55
  %57 = getelementptr inbounds [256 x i32]* %56, i32 0, i64 %54
  store i32 0, i32* %57, align 4
  %58 = call i64 @_ZNK7ap_uintILi10EEcvmEv(%class.ap_uint.4* %i)
  %59 = call i64 @_ZNK7ap_uintILi5EEcvmEv(%class.ap_uint.5* %j)
  %60 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist1, i32 0, i64 %59
  %61 = getelementptr inbounds [256 x i32]* %60, i32 0, i64 %58
  store i32 0, i32* %61, align 4
  br label %62

; <label>:62                                      ; preds = %53
  %63 = call i8 @_ZN7ap_uintILi5EEppEi(%class.ap_uint.5* %j, i32 0)
  %64 = getelementptr %class.ap_uint.5* %7, i32 0, i32 0
  %65 = bitcast [1 x i8]* %64 to i8*
  store i8 %63, i8* %65, align 1
  br label %46

; <label>:66                                      ; preds = %46
  br label %67

; <label>:67                                      ; preds = %66
  %68 = call i16 @_ZN7ap_uintILi10EEppEi(%class.ap_uint.4* %i, i32 0)
  %69 = getelementptr %class.ap_uint.4* %8, i32 0, i32 0
  %70 = bitcast [2 x i8]* %69 to i16*
  store i16 %68, i16* %70, align 1
  br label %38

; <label>:71                                      ; preds = %38
  br label %72

; <label>:72                                      ; preds = %71
  call void @_ZN7ap_uintILi13EEC1Ei(%class.ap_uint.6* %row, i32 0)
  br label %73

; <label>:73                                      ; preds = %234, %72
  %74 = bitcast %class.ap_uint.6* %9 to i8*
  %75 = bitcast %class.ap_uint.6* %row to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %74, i8* %75, i64 2, i32 1, i1 false)
  %76 = load i16** %3, align 8
  %77 = load i16* %76, align 2
  %78 = getelementptr %class.ap_uint.6* %9, i32 0, i32 0
  %79 = bitcast [2 x i8]* %78 to i16*
  %80 = load i16* %79, align 1
  %81 = call zeroext i1 @_ZltILi13EEb7ap_uintIXT_EEt(i16 %80, i16 zeroext %77)
  br i1 %81, label %82, label %238

; <label>:82                                      ; preds = %73
  br label %83

; <label>:83                                      ; preds = %82
  call void @_ZN7ap_uintILi13EEC1Ei(%class.ap_uint.6* %col, i32 0)
  br label %84

; <label>:84                                      ; preds = %228, %83
  %85 = bitcast %class.ap_uint.6* %10 to i8*
  %86 = bitcast %class.ap_uint.6* %col to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 2, i32 1, i1 false)
  %87 = load i16** %4, align 8
  %88 = load i16* %87, align 2
  %89 = getelementptr %class.ap_uint.6* %10, i32 0, i32 0
  %90 = bitcast [2 x i8]* %89 to i16*
  %91 = load i16* %90, align 1
  %92 = call zeroext i1 @_ZltILi13EEb7ap_uintIXT_EEt(i16 %91, i16 zeroext %88)
  br i1 %92, label %93, label %233

; <label>:93                                      ; preds = %84
  %94 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %95 = load i16** %4, align 8
  %96 = load i16* %95, align 2
  %97 = call i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.6* %row, i16 zeroext %96)
  %98 = getelementptr %class.ap_uint.6* %12, i32 0, i32 0
  %99 = bitcast [2 x i8]* %98 to i16*
  store i16 %97, i16* %99, align 1
  %100 = bitcast %class.ap_uint.6* %13 to i8*
  %101 = bitcast %class.ap_uint.6* %col to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 2, i32 1, i1 false)
  %102 = getelementptr %class.ap_uint.6* %12, i32 0, i32 0
  %103 = bitcast [2 x i8]* %102 to i16*
  %104 = load i16* %103, align 1
  %105 = getelementptr %class.ap_uint.6* %13, i32 0, i32 0
  %106 = bitcast [2 x i8]* %105 to i16*
  %107 = load i16* %106, align 1
  %108 = call i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16 %104, i16 %107)
  %109 = getelementptr %class.ap_int.7* %14, i32 0, i32 0
  %110 = bitcast [4 x i8]* %109 to i32*
  store i32 %108, i32* %110, align 1
  %111 = call i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int.7* %14)
  %112 = trunc i64 %111 to i32
  %113 = call i8 @_ZL36p_ZN2xf16Mat_0_256_256_1_4readIEEi_1P19xf_Mat_0_256_256_1_i(%struct.xf_Mat_0_256_256_1_* %94, i32 %112)
  %114 = getelementptr %class.ap_uint.0* %11, i32 0, i32 0
  %115 = bitcast [1 x i8]* %114 to i8*
  store i8 %113, i8* %115, align 1
  %116 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSERKS0_(%class.ap_uint.0* %in_buf, %class.ap_uint.0* %11)
  %117 = bitcast %class.ap_uint.6* %15 to i8*
  %118 = bitcast %class.ap_uint.6* %col to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %117, i8* %118, i64 2, i32 1, i1 false)
  %119 = load i16** %4, align 8
  %120 = load i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = sub nsw i32 %121, 1
  %123 = getelementptr %class.ap_uint.6* %15, i32 0, i32 0
  %124 = bitcast [2 x i8]* %123 to i16*
  %125 = load i16* %124, align 1
  %126 = call zeroext i1 @_ZeqILi13EEb7ap_uintIXT_EEi(i16 %125, i32 %122)
  br i1 %126, label %127, label %129

; <label>:127                                     ; preds = %93
  %128 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSEi(%class.ap_uint.0* %in_buf1, i32 0)
  br label %156

; <label>:129                                     ; preds = %93
  %130 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %131 = load i16** %4, align 8
  %132 = load i16* %131, align 2
  %133 = call i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.6* %row, i16 zeroext %132)
  %134 = getelementptr %class.ap_uint.6* %18, i32 0, i32 0
  %135 = bitcast [2 x i8]* %134 to i16*
  store i16 %133, i16* %135, align 1
  %136 = bitcast %class.ap_uint.6* %19 to i8*
  %137 = bitcast %class.ap_uint.6* %col to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %136, i8* %137, i64 2, i32 1, i1 false)
  %138 = getelementptr %class.ap_uint.6* %18, i32 0, i32 0
  %139 = bitcast [2 x i8]* %138 to i16*
  %140 = load i16* %139, align 1
  %141 = getelementptr %class.ap_uint.6* %19, i32 0, i32 0
  %142 = bitcast [2 x i8]* %141 to i16*
  %143 = load i16* %142, align 1
  %144 = call i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16 %140, i16 %143)
  %145 = getelementptr %class.ap_int.7* %17, i32 0, i32 0
  %146 = bitcast [4 x i8]* %145 to i32*
  store i32 %144, i32* %146, align 1
  %147 = call i32 @_ZplILi26EE6ap_intIXT_EERKS1_i(%class.ap_int.7* %17, i32 1)
  %148 = getelementptr %class.ap_int.7* %20, i32 0, i32 0
  %149 = bitcast [4 x i8]* %148 to i32*
  store i32 %147, i32* %149, align 1
  %150 = call i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int.7* %20)
  %151 = trunc i64 %150 to i32
  %152 = call i8 @_ZL36p_ZN2xf16Mat_0_256_256_1_4readIEEi_1P19xf_Mat_0_256_256_1_i(%struct.xf_Mat_0_256_256_1_* %130, i32 %151)
  %153 = getelementptr %class.ap_uint.0* %16, i32 0, i32 0
  %154 = bitcast [1 x i8]* %153 to i8*
  store i8 %152, i8* %154, align 1
  %155 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSERKS0_(%class.ap_uint.0* %in_buf1, %class.ap_uint.0* %16)
  br label %156

; <label>:156                                     ; preds = %129, %127
  call void @_ZN7ap_uintILi9EEC1Ei(%class.ap_uint.8* %_l_i, i32 0)
  call void @_ZN7ap_uintILi9EEC1Ei(%class.ap_uint.8* %_l_j, i32 0)
  br label %157

; <label>:157                                     ; preds = %156
  %158 = call %class.ap_uint.8* @_ZN7ap_uintILi9EEaSEi(%class.ap_uint.8* %_l_i, i32 0)
  br label %159

; <label>:159                                     ; preds = %222, %157
  %160 = bitcast %class.ap_uint.8* %21 to i8*
  %161 = bitcast %class.ap_uint.8* %_l_i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %161, i64 2, i32 1, i1 false)
  %162 = getelementptr %class.ap_uint.8* %21, i32 0, i32 0
  %163 = bitcast [2 x i8]* %162 to i16*
  %164 = load i16* %163, align 1
  %165 = call zeroext i1 @_ZleILi9EEb7ap_uintIXT_EEl(i16 %164, i64 0)
  br i1 %165, label %166, label %226

; <label>:166                                     ; preds = %159
  %167 = call i16 @_ZmlILi9EE7ap_uintIXT_EElRKS1_(i64 8, %class.ap_uint.8* %_l_i)
  %168 = getelementptr %class.ap_uint.8* %22, i32 0, i32 0
  %169 = bitcast [2 x i8]* %168 to i16*
  store i16 %167, i16* %169, align 1
  %170 = call i16 @_ZplILi9EE7ap_uintIXT_EElRKS1_(i64 0, %class.ap_uint.8* %22)
  %171 = getelementptr %class.ap_uint.8* %_in_l_i, i32 0, i32 0
  %172 = bitcast [2 x i8]* %171 to i16*
  store i16 %170, i16* %172, align 1
  call void @_ZN7ap_uintILi8EEC1Ei(%class.ap_uint.0* %val, i32 0)
  call void @_ZN7ap_uintILi8EEC1Ei(%class.ap_uint.0* %val1, i32 0)
  %173 = call i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.8* %_in_l_i, i32 7)
  %174 = getelementptr %class.ap_uint.8* %23, i32 0, i32 0
  %175 = bitcast [2 x i8]* %174 to i16*
  store i16 %173, i16* %175, align 1
  %176 = call i64* @_ZN7ap_uintILi8EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0* %in_buf, %class.ap_uint.8* %23, %class.ap_uint.8* %_in_l_i)
  %177 = load i64* %176
  %178 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSEm(%class.ap_uint.0* %val, i64 %177)
  %179 = call i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.8* %_in_l_i, i32 7)
  %180 = getelementptr %class.ap_uint.8* %24, i32 0, i32 0
  %181 = bitcast [2 x i8]* %180 to i16*
  store i16 %179, i16* %181, align 1
  %182 = call i64* @_ZN7ap_uintILi8EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0* %in_buf1, %class.ap_uint.8* %24, %class.ap_uint.8* %_in_l_i)
  %183 = load i64* %182
  %184 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSEm(%class.ap_uint.0* %val1, i64 %183)
  %185 = call i64 @_ZNK7ap_uintILi8EEcvmEv(%class.ap_uint.0* %val)
  %186 = call i64 @_ZNK7ap_uintILi9EEcvmEv(%class.ap_uint.8* %_l_j)
  %187 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist, i32 0, i64 %186
  %188 = getelementptr inbounds [256 x i32]* %187, i32 0, i64 %185
  %189 = load i32* %188, align 4
  store i32 %189, i32* %tmpval, align 4
  %190 = call i64 @_ZNK7ap_uintILi8EEcvmEv(%class.ap_uint.0* %val1)
  %191 = call i64 @_ZNK7ap_uintILi9EEcvmEv(%class.ap_uint.8* %_l_j)
  %192 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist1, i32 0, i64 %191
  %193 = getelementptr inbounds [256 x i32]* %192, i32 0, i64 %190
  %194 = load i32* %193, align 4
  store i32 %194, i32* %tmpval1, align 4
  %195 = load i32* %tmpval, align 4
  %196 = add i32 %195, 1
  %197 = call i64 @_ZNK7ap_uintILi8EEcvmEv(%class.ap_uint.0* %val)
  %198 = call i64 @_ZNK7ap_uintILi9EEcvmEv(%class.ap_uint.8* %_l_j)
  %199 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist, i32 0, i64 %198
  %200 = getelementptr inbounds [256 x i32]* %199, i32 0, i64 %197
  store i32 %196, i32* %200, align 4
  %201 = bitcast %class.ap_uint.6* %25 to i8*
  %202 = bitcast %class.ap_uint.6* %col to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %201, i8* %202, i64 2, i32 1, i1 false)
  %203 = load i16** %4, align 8
  %204 = load i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = sub nsw i32 %205, 1
  %207 = getelementptr %class.ap_uint.6* %25, i32 0, i32 0
  %208 = bitcast [2 x i8]* %207 to i16*
  %209 = load i16* %208, align 1
  %210 = call zeroext i1 @_ZeqILi13EEb7ap_uintIXT_EEi(i16 %209, i32 %206)
  br i1 %210, label %218, label %211

; <label>:211                                     ; preds = %166
  %212 = load i32* %tmpval1, align 4
  %213 = add i32 %212, 1
  %214 = call i64 @_ZNK7ap_uintILi8EEcvmEv(%class.ap_uint.0* %val1)
  %215 = call i64 @_ZNK7ap_uintILi9EEcvmEv(%class.ap_uint.8* %_l_j)
  %216 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist1, i32 0, i64 %215
  %217 = getelementptr inbounds [256 x i32]* %216, i32 0, i64 %214
  store i32 %213, i32* %217, align 4
  br label %218

; <label>:218                                     ; preds = %211, %166
  %219 = call i16 @_ZN7ap_uintILi9EEppEi(%class.ap_uint.8* %_l_j, i32 0)
  %220 = getelementptr %class.ap_uint.8* %26, i32 0, i32 0
  %221 = bitcast [2 x i8]* %220 to i16*
  store i16 %219, i16* %221, align 1
  br label %222

; <label>:222                                     ; preds = %218
  %223 = call i16 @_ZN7ap_uintILi9EEppEi(%class.ap_uint.8* %_l_i, i32 0)
  %224 = getelementptr %class.ap_uint.8* %27, i32 0, i32 0
  %225 = bitcast [2 x i8]* %224 to i16*
  store i16 %223, i16* %225, align 1
  br label %159

; <label>:226                                     ; preds = %159
  %227 = call %class.ap_uint.8* @_ZN7ap_uintILi9EEaSEl(%class.ap_uint.8* %_l_i, i64 8)
  br label %228

; <label>:228                                     ; preds = %226
  %229 = call i16 @_ZplILi13EE7ap_uintIXT_EERKS1_i(%class.ap_uint.6* %col, i32 2)
  %230 = getelementptr %class.ap_uint.6* %28, i32 0, i32 0
  %231 = bitcast [2 x i8]* %230 to i16*
  store i16 %229, i16* %231, align 1
  %232 = call %class.ap_uint.6* @_ZN7ap_uintILi13EEaSERKS0_(%class.ap_uint.6* %col, %class.ap_uint.6* %28)
  br label %84

; <label>:233                                     ; preds = %84
  br label %234

; <label>:234                                     ; preds = %233
  %235 = call i16 @_ZN7ap_uintILi13EEppEi(%class.ap_uint.6* %row, i32 0)
  %236 = getelementptr %class.ap_uint.6* %29, i32 0, i32 0
  %237 = bitcast [2 x i8]* %236 to i16*
  store i16 %235, i16* %237, align 1
  br label %73

; <label>:238                                     ; preds = %73
  store i32 0, i32* %p, align 4
  br label %239

; <label>:239                                     ; preds = %238
  call void @_ZN7ap_uintILi10EEC1Ei(%class.ap_uint.4* %i1, i32 0)
  br label %240

; <label>:240                                     ; preds = %284, %239
  %241 = bitcast %class.ap_uint.4* %30 to i8*
  %242 = bitcast %class.ap_uint.4* %i1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %241, i8* %242, i64 2, i32 1, i1 false)
  %243 = getelementptr %class.ap_uint.4* %30, i32 0, i32 0
  %244 = bitcast [2 x i8]* %243 to i16*
  %245 = load i16* %244, align 1
  %246 = call zeroext i1 @_ZltILi10EEb7ap_uintIXT_EEi(i16 %245, i32 256)
  br i1 %246, label %247, label %288

; <label>:247                                     ; preds = %240
  store i32 0, i32* %cnt, align 4
  store i32 0, i32* %p, align 4
  call void @_ZN7ap_uintILi5EEC1Ei(%class.ap_uint.5* %_l_j_0, i32 0)
  call void @_ZN7ap_uintILi5EEC1Ei(%class.ap_uint.5* %_l_k, i32 0)
  %248 = call %class.ap_uint.5* @_ZN7ap_uintILi5EEaSEi(%class.ap_uint.5* %_l_j_0, i32 0)
  br label %249

; <label>:249                                     ; preds = %274, %247
  %250 = bitcast %class.ap_uint.5* %31 to i8*
  %251 = bitcast %class.ap_uint.5* %_l_j_0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %250, i8* %251, i64 1, i32 1, i1 false)
  %252 = getelementptr %class.ap_uint.5* %31, i32 0, i32 0
  %253 = bitcast [1 x i8]* %252 to i8*
  %254 = load i8* %253, align 1
  %255 = call zeroext i1 @_ZleILi5EEb7ap_uintIXT_EEi(i8 %254, i32 0)
  br i1 %255, label %256, label %278

; <label>:256                                     ; preds = %249
  %257 = call i64 @_ZNK7ap_uintILi10EEcvmEv(%class.ap_uint.4* %i1)
  %258 = call i64 @_ZNK7ap_uintILi5EEcvmEv(%class.ap_uint.5* %_l_j_0)
  %259 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist, i32 0, i64 %258
  %260 = getelementptr inbounds [256 x i32]* %259, i32 0, i64 %257
  %261 = load i32* %260, align 4
  %262 = call i64 @_ZNK7ap_uintILi10EEcvmEv(%class.ap_uint.4* %i1)
  %263 = call i64 @_ZNK7ap_uintILi5EEcvmEv(%class.ap_uint.5* %_l_j_0)
  %264 = getelementptr inbounds [1 x [256 x i32]]* %tmp_hist1, i32 0, i64 %263
  %265 = getelementptr inbounds [256 x i32]* %264, i32 0, i64 %262
  %266 = load i32* %265, align 4
  %267 = add i32 %261, %266
  store i32 %267, i32* %value, align 4
  %268 = load i32* %cnt, align 4
  %269 = load i32* %value, align 4
  %270 = add i32 %268, %269
  store i32 %270, i32* %cnt, align 4
  %271 = call i8 @_ZN7ap_uintILi5EEppEi(%class.ap_uint.5* %_l_k, i32 0)
  %272 = getelementptr %class.ap_uint.5* %32, i32 0, i32 0
  %273 = bitcast [1 x i8]* %272 to i8*
  store i8 %271, i8* %273, align 1
  br label %274

; <label>:274                                     ; preds = %256
  %275 = call i8 @_ZN7ap_uintILi5EEppEv(%class.ap_uint.5* %_l_j_0)
  %276 = getelementptr %class.ap_uint.5* %33, i32 0, i32 0
  %277 = bitcast [1 x i8]* %276 to i8*
  store i8 %275, i8* %277, align 1
  br label %249

; <label>:278                                     ; preds = %249
  %279 = load i32* %cnt, align 4
  %280 = call i64 @_ZNK7ap_uintILi10EEcvmEv(%class.ap_uint.4* %i1)
  %281 = load [256 x i32]** %2, align 8
  %282 = getelementptr inbounds [256 x i32]* %281, i64 0
  %283 = getelementptr inbounds [256 x i32]* %282, i32 0, i64 %280
  store i32 %279, i32* %283, align 4
  br label %284

; <label>:284                                     ; preds = %278
  %285 = call i16 @_ZN7ap_uintILi10EEppEi(%class.ap_uint.4* %i1, i32 0)
  %286 = getelementptr %class.ap_uint.4* %34, i32 0, i32 0
  %287 = bitcast [2 x i8]* %286 to i16*
  store i16 %285, i16* %287, align 1
  br label %240

; <label>:288                                     ; preds = %240
  ret void
}

define internal void @_ZL33p_ZN2xf12xfOtsuKernelEPA256_jttRhPA256_jttRh([256 x i32]* %_hist, i16 zeroext %_height, i16 zeroext %_width, i8* %thresh) uwtable {
  %1 = alloca [256 x i32]*, align 8
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i8*, align 8
  %HistArray = alloca [256 x %class.ap_uint.1], align 16
  %tmp1 = alloca %class.ap_uint.2, align 1
  %tmp2 = alloca %class.ap_uint.2, align 1
  %total = alloca %class.ap_uint.3, align 1
  %max_val = alloca i8, align 1
  %sum = alloca i32, align 4
  %cols = alloca i16, align 2
  %rows = alloca i16, align 2
  %shift1 = alloca i8, align 1
  %shift2 = alloca i8, align 1
  %shift3 = alloca i8, align 1
  %shift4 = alloca i8, align 1
  %wB = alloca i32, align 4
  %wF = alloca i32, align 4
  %sumB = alloca i64, align 8
  %varMax = alloca i64, align 8
  %wdt = alloca i32, align 4
  %hgt = alloca i32, align 4
  %n1 = alloca i8, align 1
  %n2 = alloca i8, align 1
  %5 = alloca %class.ap_int, align 1
  %6 = alloca %class.ap_uint.2, align 1
  %7 = alloca %class.ap_uint.2, align 1
  %8 = alloca i48
  %9 = alloca i48
  %10 = alloca { i64, i32 }
  %i = alloca i16, align 2
  %11 = alloca %class.ap_uint.2, align 1
  %12 = alloca %class.ap_uint.2, align 1
  %13 = alloca %class.ap_uint.2, align 1
  %14 = alloca i48
  %15 = alloca i48
  %16 = alloca i48
  %17 = alloca %class.ap_uint.2, align 1
  %18 = alloca %class.ap_uint.2, align 1
  %19 = alloca i48
  %20 = alloca i48
  %21 = alloca i48
  %i1 = alloca i16, align 2
  %22 = alloca %class.ap_uint.1, align 1
  %23 = alloca i40
  %24 = alloca %class.ap_uint.1, align 1
  %25 = alloca i40
  %i2 = alloca i16, align 2
  %26 = alloca %class.ap_uint.1, align 1
  %27 = alloca i40
  %28 = alloca %class.ap_uint.3, align 1
  %29 = alloca %class.ap_uint.1, align 1
  %30 = alloca i40
  %31 = alloca %class.ap_uint.1, align 1
  %32 = alloca i40
  %b = alloca i32, align 4
  %a1 = alloca i64, align 8
  %c1 = alloca i64, align 8
  %d = alloca i64, align 8
  %res = alloca i32, align 4
  %x_inv1 = alloca i16, align 2
  %x_inv2 = alloca i16, align 2
  %val1 = alloca i32, align 4
  %val2 = alloca i32, align 4
  %maxtmp = alloca i64, align 8
  %max = alloca i64, align 8
  store [256 x i32]* %_hist, [256 x i32]** %1, align 8
  store i16 %_height, i16* %2, align 2
  store i16 %_width, i16* %3, align 2
  store i8* %thresh, i8** %4, align 8
  %33 = getelementptr inbounds [256 x %class.ap_uint.1]* %HistArray, i64 0, i64 0
  call void @_ZN7ap_uintILi33EEC1Ei(%class.ap_uint.1* %33, i32 0)
  %34 = getelementptr inbounds %class.ap_uint.1* %33, i64 1
  %35 = getelementptr inbounds %class.ap_uint.1* %33, i64 256
  br label %36

; <label>:36                                      ; preds = %36, %0
  %37 = phi %class.ap_uint.1* [ %34, %0 ], [ %38, %36 ]
  call void @_ZN7ap_uintILi33EEC1Ev(%class.ap_uint.1* %37)
  %38 = getelementptr inbounds %class.ap_uint.1* %37, i64 1
  %39 = icmp eq %class.ap_uint.1* %38, %35
  br i1 %39, label %40, label %36

; <label>:40                                      ; preds = %36
  call void @_ZN7ap_uintILi45EEC1Ev(%class.ap_uint.2* %tmp1)
  call void @_ZN7ap_uintILi45EEC1Ev(%class.ap_uint.2* %tmp2)
  call void @_ZN7ap_uintILi25EEC1Ev(%class.ap_uint.3* %total)
  store i8 0, i8* %max_val, align 1
  store i32 0, i32* %sum, align 4
  %41 = load i16* %3, align 2
  store i16 %41, i16* %cols, align 2
  %42 = load i16* %2, align 2
  store i16 %42, i16* %rows, align 2
  store i8 0, i8* %shift1, align 1
  store i8 0, i8* %shift2, align 1
  store i32 0, i32* %wB, align 4
  store i32 0, i32* %wF, align 4
  store i64 0, i64* %sumB, align 8
  store i64 0, i64* %varMax, align 8
  %43 = load i16* %cols, align 2
  %44 = call i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %43, i32 16, i8* %shift1)
  store i32 %44, i32* %wdt, align 4
  %45 = load i16* %rows, align 2
  %46 = call i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %45, i32 16, i8* %shift2)
  store i32 %46, i32* %hgt, align 4
  %47 = load i8* %shift1, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp sgt i32 %48, 24
  br i1 %49, label %50, label %56

; <label>:50                                      ; preds = %40
  %51 = load i32* %wdt, align 4
  %52 = load i8* %shift1, align 1
  %53 = sext i8 %52 to i32
  %54 = sub nsw i32 %53, 24
  %55 = lshr i32 %51, %54
  store i32 %55, i32* %wdt, align 4
  store i8 24, i8* %shift1, align 1
  br label %71

; <label>:56                                      ; preds = %40
  %57 = load i8* %shift1, align 1
  %58 = sext i8 %57 to i32
  %59 = ashr i32 %58, 1
  %60 = shl i32 %59, 1
  %61 = load i8* %shift1, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp ne i32 %60, %62
  br i1 %63, label %64, label %70

; <label>:64                                      ; preds = %56
  %65 = load i32* %wdt, align 4
  %66 = load i8* %shift1, align 1
  %67 = sext i8 %66 to i32
  %68 = sub nsw i32 24, %67
  %69 = shl i32 %65, %68
  store i32 %69, i32* %wdt, align 4
  store i8 24, i8* %shift1, align 1
  br label %70

; <label>:70                                      ; preds = %64, %56
  br label %71

; <label>:71                                      ; preds = %70, %50
  %72 = load i8* %shift2, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp sgt i32 %73, 24
  br i1 %74, label %75, label %81

; <label>:75                                      ; preds = %71
  %76 = load i32* %hgt, align 4
  %77 = load i8* %shift2, align 1
  %78 = sext i8 %77 to i32
  %79 = sub nsw i32 %78, 24
  %80 = lshr i32 %76, %79
  store i32 %80, i32* %hgt, align 4
  store i8 24, i8* %shift2, align 1
  br label %96

; <label>:81                                      ; preds = %71
  %82 = load i8* %shift2, align 1
  %83 = sext i8 %82 to i32
  %84 = ashr i32 %83, 1
  %85 = shl i32 %84, 1
  %86 = load i8* %shift2, align 1
  %87 = sext i8 %86 to i32
  %88 = icmp ne i32 %85, %87
  br i1 %88, label %89, label %95

; <label>:89                                      ; preds = %81
  %90 = load i32* %hgt, align 4
  %91 = load i8* %shift2, align 1
  %92 = sext i8 %91 to i32
  %93 = sub nsw i32 24, %92
  %94 = shl i32 %90, %93
  store i32 %94, i32* %hgt, align 4
  store i8 24, i8* %shift2, align 1
  br label %95

; <label>:95                                      ; preds = %89, %81
  br label %96

; <label>:96                                      ; preds = %95, %75
  %97 = load i8* %shift1, align 1
  %98 = sext i8 %97 to i32
  %99 = ashr i32 %98, 1
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %shift3, align 1
  %101 = load i8* %shift2, align 1
  %102 = sext i8 %101 to i32
  %103 = ashr i32 %102, 1
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %shift4, align 1
  %105 = load i16* %cols, align 2
  %106 = zext i16 %105 to i32
  %107 = load i32* %wdt, align 4
  %108 = mul i32 %106, %107
  %109 = load i8* %shift3, align 1
  %110 = sext i8 %109 to i32
  %111 = lshr i32 %108, %110
  %112 = call %class.ap_uint.2* @_ZN7ap_uintILi45EEaSEj(%class.ap_uint.2* %tmp1, i32 %111)
  %113 = load i16* %rows, align 2
  %114 = zext i16 %113 to i32
  %115 = load i32* %hgt, align 4
  %116 = mul i32 %114, %115
  %117 = load i8* %shift4, align 1
  %118 = sext i8 %117 to i32
  %119 = lshr i32 %116, %118
  %120 = call %class.ap_uint.2* @_ZN7ap_uintILi45EEaSEj(%class.ap_uint.2* %tmp2, i32 %119)
  %121 = bitcast %class.ap_uint.2* %6 to i8*
  %122 = bitcast %class.ap_uint.2* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 6, i32 1, i1 false)
  %123 = bitcast %class.ap_uint.2* %7 to i8*
  %124 = bitcast %class.ap_uint.2* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %124, i64 6, i32 1, i1 false)
  %125 = getelementptr %class.ap_uint.2* %6, i32 0, i32 0
  %126 = bitcast i48* %8 to [6 x i8]*
  %127 = load [6 x i8]* %125
  store [6 x i8] %127, [6 x i8]* %126, align 1
  %128 = load i48* %8
  %129 = getelementptr %class.ap_uint.2* %7, i32 0, i32 0
  %130 = bitcast i48* %9 to [6 x i8]*
  %131 = load [6 x i8]* %129
  store [6 x i8] %131, [6 x i8]* %130, align 1
  %132 = load i48* %9
  %133 = call { i64, i32 } @_ZmlILi45ELi45EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i48 %128, i48 %132)
  %134 = getelementptr %class.ap_int* %5, i32 0, i32 0
  store { i64, i32 } %133, { i64, i32 }* %10
  %135 = bitcast { i64, i32 }* %10 to [12 x i8]*
  %136 = load [12 x i8]* %135, align 1
  store [12 x i8] %136, [12 x i8]* %134
  %137 = call %class.ap_uint.3* @_ZN7ap_uintILi25EEaSILi90EEERS0_RK6ap_intIXT_EE(%class.ap_uint.3* %total, %class.ap_int* %5)
  br label %138

; <label>:138                                     ; preds = %96
  store i16 0, i16* %i, align 2
  br label %139

; <label>:139                                     ; preds = %184, %138
  %140 = load i16* %i, align 2
  %141 = zext i16 %140 to i32
  %142 = icmp slt i32 %141, 256
  br i1 %142, label %143, label %187

; <label>:143                                     ; preds = %139
  %144 = load i16* %i, align 2
  %145 = zext i16 %144 to i64
  %146 = load [256 x i32]** %1, align 8
  %147 = getelementptr inbounds [256 x i32]* %146, i64 0
  %148 = getelementptr inbounds [256 x i32]* %147, i32 0, i64 %145
  %149 = load i32* %148, align 4
  call void @_ZN7ap_uintILi45EEC1Ej(%class.ap_uint.2* %11, i32 %149)
  %150 = call %class.ap_uint.2* @_ZN7ap_uintILi45EEaSERKS0_(%class.ap_uint.2* %tmp1, %class.ap_uint.2* %11)
  %151 = load i32* %wdt, align 4
  %152 = call i48 @_ZmlILi45EE7ap_uintIXT_EERKS1_j(%class.ap_uint.2* %tmp1, i32 %151)
  %153 = getelementptr %class.ap_uint.2* %13, i32 0, i32 0
  store i48 %152, i48* %14
  %154 = bitcast i48* %14 to [6 x i8]*
  %155 = load [6 x i8]* %154, align 1
  store [6 x i8] %155, [6 x i8]* %153
  %156 = load i8* %shift3, align 1
  %157 = getelementptr %class.ap_uint.2* %13, i32 0, i32 0
  %158 = bitcast i48* %15 to [6 x i8]*
  %159 = load [6 x i8]* %157
  store [6 x i8] %159, [6 x i8]* %158, align 1
  %160 = load i48* %15
  %161 = call i48 @_ZrsILi45EE7ap_uintIXT_EES1_c(i48 %160, i8 signext %156)
  %162 = getelementptr %class.ap_uint.2* %12, i32 0, i32 0
  store i48 %161, i48* %16
  %163 = bitcast i48* %16 to [6 x i8]*
  %164 = load [6 x i8]* %163, align 1
  store [6 x i8] %164, [6 x i8]* %162
  %165 = call %class.ap_uint.2* @_ZN7ap_uintILi45EEaSERKS0_(%class.ap_uint.2* %tmp2, %class.ap_uint.2* %12)
  %166 = load i16* %i, align 2
  %167 = zext i16 %166 to i64
  %168 = getelementptr inbounds [256 x %class.ap_uint.1]* %HistArray, i32 0, i64 %167
  %169 = load i32* %hgt, align 4
  %170 = call i48 @_ZmlILi45EE7ap_uintIXT_EERKS1_j(%class.ap_uint.2* %tmp2, i32 %169)
  %171 = getelementptr %class.ap_uint.2* %18, i32 0, i32 0
  store i48 %170, i48* %19
  %172 = bitcast i48* %19 to [6 x i8]*
  %173 = load [6 x i8]* %172, align 1
  store [6 x i8] %173, [6 x i8]* %171
  %174 = load i8* %shift4, align 1
  %175 = getelementptr %class.ap_uint.2* %18, i32 0, i32 0
  %176 = bitcast i48* %20 to [6 x i8]*
  %177 = load [6 x i8]* %175
  store [6 x i8] %177, [6 x i8]* %176, align 1
  %178 = load i48* %20
  %179 = call i48 @_ZrsILi45EE7ap_uintIXT_EES1_c(i48 %178, i8 signext %174)
  %180 = getelementptr %class.ap_uint.2* %17, i32 0, i32 0
  store i48 %179, i48* %21
  %181 = bitcast i48* %21 to [6 x i8]*
  %182 = load [6 x i8]* %181, align 1
  store [6 x i8] %182, [6 x i8]* %180
  %183 = call %class.ap_uint.1* @_ZN7ap_uintILi33EEaSILi45EEERS0_RKS_IXT_EE(%class.ap_uint.1* %168, %class.ap_uint.2* %17)
  br label %184

; <label>:184                                     ; preds = %143
  %185 = load i16* %i, align 2
  %186 = add i16 %185, 1
  store i16 %186, i16* %i, align 2
  br label %139

; <label>:187                                     ; preds = %139
  br label %188

; <label>:188                                     ; preds = %187
  store i16 0, i16* %i1, align 2
  br label %189

; <label>:189                                     ; preds = %209, %188
  %190 = load i16* %i1, align 2
  %191 = zext i16 %190 to i32
  %192 = icmp slt i32 %191, 256
  br i1 %192, label %193, label %212

; <label>:193                                     ; preds = %189
  %194 = load i32* %sum, align 4
  %195 = load i16* %i1, align 2
  %196 = load i16* %i1, align 2
  %197 = zext i16 %196 to i64
  %198 = getelementptr inbounds [256 x %class.ap_uint.1]* %HistArray, i32 0, i64 %197
  %199 = call i40 @_ZmlILi33EE7ap_uintIXT_EEtRKS1_(i16 zeroext %195, %class.ap_uint.1* %198)
  %200 = getelementptr %class.ap_uint.1* %22, i32 0, i32 0
  store i40 %199, i40* %23
  %201 = bitcast i40* %23 to [5 x i8]*
  %202 = load [5 x i8]* %201, align 1
  store [5 x i8] %202, [5 x i8]* %200
  %203 = call i40 @_ZplILi33EE7ap_uintIXT_EEjRKS1_(i32 %194, %class.ap_uint.1* %22)
  %204 = getelementptr %class.ap_uint.1* %24, i32 0, i32 0
  store i40 %203, i40* %25
  %205 = bitcast i40* %25 to [5 x i8]*
  %206 = load [5 x i8]* %205, align 1
  store [5 x i8] %206, [5 x i8]* %204
  %207 = call i64 @_ZNK7ap_uintILi33EEcvmEv(%class.ap_uint.1* %24)
  %208 = trunc i64 %207 to i32
  store i32 %208, i32* %sum, align 4
  br label %209

; <label>:209                                     ; preds = %193
  %210 = load i16* %i1, align 2
  %211 = add i16 %210, 1
  store i16 %211, i16* %i1, align 2
  br label %189

; <label>:212                                     ; preds = %189
  br label %213

; <label>:213                                     ; preds = %212
  store i16 0, i16* %i2, align 2
  br label %214

; <label>:214                                     ; preds = %348, %213
  %215 = load i16* %i2, align 2
  %216 = zext i16 %215 to i32
  %217 = icmp slt i32 %216, 256
  br i1 %217, label %218, label %351

; <label>:218                                     ; preds = %214
  %219 = load i32* %wB, align 4
  %220 = load i16* %i2, align 2
  %221 = zext i16 %220 to i64
  %222 = getelementptr inbounds [256 x %class.ap_uint.1]* %HistArray, i32 0, i64 %221
  %223 = call i40 @_ZplILi33EE7ap_uintIXT_EEjRKS1_(i32 %219, %class.ap_uint.1* %222)
  %224 = getelementptr %class.ap_uint.1* %26, i32 0, i32 0
  store i40 %223, i40* %27
  %225 = bitcast i40* %27 to [5 x i8]*
  %226 = load [5 x i8]* %225, align 1
  store [5 x i8] %226, [5 x i8]* %224
  %227 = call i64 @_ZNK7ap_uintILi33EEcvmEv(%class.ap_uint.1* %26)
  %228 = trunc i64 %227 to i32
  store i32 %228, i32* %wB, align 4
  %229 = load i32* %wB, align 4
  %230 = icmp ugt i32 %229, 0
  br i1 %230, label %231, label %347

; <label>:231                                     ; preds = %218
  %232 = load i32* %wB, align 4
  %233 = load i8* %shift3, align 1
  %234 = sext i8 %233 to i32
  %235 = load i8* %shift4, align 1
  %236 = sext i8 %235 to i32
  %237 = add nsw i32 %234, %236
  %238 = lshr i32 %232, %237
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %240, label %241

; <label>:240                                     ; preds = %231
  br label %351

; <label>:241                                     ; preds = %231
  %242 = load i32* %wB, align 4
  %243 = call i32 @_ZmiILi25EE7ap_uintIXT_EERKS1_j(%class.ap_uint.3* %total, i32 %242)
  %244 = getelementptr %class.ap_uint.3* %28, i32 0, i32 0
  %245 = bitcast [4 x i8]* %244 to i32*
  store i32 %243, i32* %245, align 1
  %246 = call i64 @_ZNK7ap_uintILi25EEcvmEv(%class.ap_uint.3* %28)
  %247 = trunc i64 %246 to i32
  store i32 %247, i32* %wF, align 4
  %248 = load i64* %sumB, align 8
  %249 = load i16* %i2, align 2
  %250 = zext i16 %249 to i64
  %251 = getelementptr inbounds [256 x %class.ap_uint.1]* %HistArray, i32 0, i64 %250
  %252 = load i16* %i2, align 2
  %253 = call i40 @_ZmlILi33EE7ap_uintIXT_EERKS1_t(%class.ap_uint.1* %251, i16 zeroext %252)
  %254 = getelementptr %class.ap_uint.1* %29, i32 0, i32 0
  store i40 %253, i40* %30
  %255 = bitcast i40* %30 to [5 x i8]*
  %256 = load [5 x i8]* %255, align 1
  store [5 x i8] %256, [5 x i8]* %254
  %257 = call i40 @_ZplILi33EE7ap_uintIXT_EEyRKS1_(i64 %248, %class.ap_uint.1* %29)
  %258 = getelementptr %class.ap_uint.1* %31, i32 0, i32 0
  store i40 %257, i40* %32
  %259 = bitcast i40* %32 to [5 x i8]*
  %260 = load [5 x i8]* %259, align 1
  store [5 x i8] %260, [5 x i8]* %258
  %261 = call i64 @_ZNK7ap_uintILi33EEcvmEv(%class.ap_uint.1* %31)
  store i64 %261, i64* %sumB, align 8
  %262 = load i32* %wF, align 4
  %263 = load i32* %wB, align 4
  %264 = add i32 %262, %263
  store i32 %264, i32* %b, align 4
  %265 = load i64* %sumB, align 8
  %266 = load i32* %b, align 4
  %267 = zext i32 %266 to i64
  %268 = mul i64 %265, %267
  %269 = load i8* %shift3, align 1
  %270 = sext i8 %269 to i32
  %271 = load i8* %shift4, align 1
  %272 = sext i8 %271 to i32
  %273 = add nsw i32 %270, %272
  %274 = zext i32 %273 to i64
  %275 = lshr i64 %268, %274
  store i64 %275, i64* %a1, align 8
  %276 = load i32* %sum, align 4
  %277 = zext i32 %276 to i64
  %278 = load i32* %wB, align 4
  %279 = zext i32 %278 to i64
  %280 = mul nsw i64 %277, %279
  %281 = load i8* %shift3, align 1
  %282 = sext i8 %281 to i32
  %283 = load i8* %shift4, align 1
  %284 = sext i8 %283 to i32
  %285 = add nsw i32 %282, %284
  %286 = zext i32 %285 to i64
  %287 = ashr i64 %280, %286
  store i64 %287, i64* %c1, align 8
  %288 = load i64* %a1, align 8
  %289 = load i64* %c1, align 8
  %290 = sub nsw i64 %288, %289
  store i64 %290, i64* %d, align 8
  %291 = load i64* %d, align 8
  %292 = icmp slt i64 %291, 0
  br i1 %292, label %293, label %296

; <label>:293                                     ; preds = %241
  %294 = load i64* %d, align 8
  %295 = sub nsw i64 0, %294
  br label %298

; <label>:296                                     ; preds = %241
  %297 = load i64* %d, align 8
  br label %298

; <label>:298                                     ; preds = %296, %293
  %299 = phi i64 [ %295, %293 ], [ %297, %296 ]
  store i64 %299, i64* %d, align 8
  %300 = load i64* %d, align 8
  %301 = load i64* %d, align 8
  %302 = mul nsw i64 %300, %301
  %303 = load i8* %shift3, align 1
  %304 = sext i8 %303 to i32
  %305 = load i8* %shift4, align 1
  %306 = sext i8 %305 to i32
  %307 = add nsw i32 %304, %306
  %308 = add nsw i32 %307, 10
  %309 = zext i32 %308 to i64
  %310 = ashr i64 %302, %309
  %311 = trunc i64 %310 to i32
  store i32 %311, i32* %res, align 4
  %312 = load i32* %wB, align 4
  %313 = lshr i32 %312, 9
  %314 = trunc i32 %313 to i16
  store i16 %314, i16* %x_inv1, align 2
  %315 = load i32* %wF, align 4
  %316 = lshr i32 %315, 9
  %317 = trunc i32 %316 to i16
  store i16 %317, i16* %x_inv2, align 2
  %318 = load i16* %x_inv1, align 2
  %319 = call i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %318, i32 0, i8* %n1)
  store i32 %319, i32* %val1, align 4
  %320 = load i16* %x_inv2, align 2
  %321 = call i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %320, i32 0, i8* %n2)
  store i32 %321, i32* %val2, align 4
  %322 = load i32* %res, align 4
  %323 = zext i32 %322 to i64
  %324 = load i32* %val1, align 4
  %325 = zext i32 %324 to i64
  %326 = mul i64 %323, %325
  %327 = load i8* %n1, align 1
  %328 = sext i8 %327 to i32
  %329 = zext i32 %328 to i64
  %330 = lshr i64 %326, %329
  store i64 %330, i64* %maxtmp, align 8
  %331 = load i64* %maxtmp, align 8
  %332 = load i32* %val2, align 4
  %333 = zext i32 %332 to i64
  %334 = mul i64 %331, %333
  %335 = load i8* %n2, align 1
  %336 = sext i8 %335 to i32
  %337 = zext i32 %336 to i64
  %338 = lshr i64 %334, %337
  store i64 %338, i64* %max, align 8
  %339 = load i64* %max, align 8
  %340 = load i64* %varMax, align 8
  %341 = icmp ugt i64 %339, %340
  br i1 %341, label %342, label %346

; <label>:342                                     ; preds = %298
  %343 = load i64* %max, align 8
  store i64 %343, i64* %varMax, align 8
  %344 = load i16* %i2, align 2
  %345 = trunc i16 %344 to i8
  store i8 %345, i8* %max_val, align 1
  br label %346

; <label>:346                                     ; preds = %342, %298
  br label %347

; <label>:347                                     ; preds = %346, %218
  br label %348

; <label>:348                                     ; preds = %347
  %349 = load i16* %i2, align 2
  %350 = add i16 %349, 1
  store i16 %350, i16* %i2, align 2
  br label %214

; <label>:351                                     ; preds = %240, %214
  %352 = load i8* %max_val, align 1
  %353 = load i8** %4, align 8
  store i8 %352, i8* %353, align 1
  ret void
}

declare void @_ZN7ap_uintILi33EEC1Ei(%class.ap_uint.1*, i32)

declare void @_ZN7ap_uintILi33EEC1Ev(%class.ap_uint.1*)

declare void @_ZN7ap_uintILi45EEC1Ev(%class.ap_uint.2*)

declare void @_ZN7ap_uintILi25EEC1Ev(%class.ap_uint.3*)

define internal i32 @_ZL20p_ZN2xf7InverseEtiPctiPc(i16 zeroext %x, i32 %M, i8* %N) nounwind uwtable {
  %1 = alloca i32, align 4
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %val = alloca i32, align 4
  %index = alloca i32, align 4
  %B_L = alloca i32, align 4
  %tmp = alloca i32, align 4
  %pos = alloca i32, align 4
  %block = alloca i32, align 4
  %shift = alloca i32, align 4
  %x1 = alloca i16, align 2
  %x2 = alloca i16, align 2
  %x3 = alloca i16, align 2
  %x4 = alloca i16, align 2
  %tmpx = alloca i16, align 2
  store i16 %x, i16* %2, align 2
  store i32 %M, i32* %3, align 4
  store i8* %N, i8** %4, align 8
  %5 = load i32* %3, align 4
  %6 = icmp sle i32 %5, 16
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  br label %10

; <label>:8                                       ; preds = %0
  call void @__assert_fail(i8* getelementptr inbounds ([79 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str3, i32 0, i32 0), i32 234, i8* getelementptr inbounds ([63 x i8]* @__PRETTY_FUNCTION__._ZL20p_ZN2xf7InverseEtiPctiPc, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %10

; <label>:10                                      ; preds = %9, %7
  store i32 0, i32* %val, align 4
  store i32 17, i32* %B_L, align 4
  store i32 4, i32* %tmp, align 4
  store i32 0, i32* %block, align 4
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %shift, align 4
  %11 = load i16* %2, align 2
  %12 = zext i16 %11 to i32
  %13 = ashr i32 %12, 12
  %14 = and i32 %13, 15
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %x1, align 2
  %16 = load i16* %2, align 2
  %17 = zext i16 %16 to i32
  %18 = ashr i32 %17, 8
  %19 = and i32 %18, 15
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %x2, align 2
  %21 = load i16* %2, align 2
  %22 = zext i16 %21 to i32
  %23 = ashr i32 %22, 4
  %24 = and i32 %23, 15
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %x3, align 2
  %26 = load i16* %2, align 2
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, 15
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %x4, align 2
  store i16 0, i16* %tmpx, align 2
  %30 = load i16* %2, align 2
  %31 = zext i16 %30 to i32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %10
  %34 = load i16* getelementptr inbounds ([2049 x i16]* @_ZN2xf12division_lutE, i32 0, i64 0), align 2
  %35 = zext i16 %34 to i32
  store i32 %35, i32* %1
  br label %174

; <label>:36                                      ; preds = %10
  %37 = load i16* %x1, align 2
  %38 = zext i16 %37 to i32
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %62

; <label>:40                                      ; preds = %36
  %41 = load i16* %x1, align 2
  store i16 %41, i16* %tmpx, align 2
  store i32 0, i32* %block, align 4
  store i32 0, i32* %tmp, align 4
  br label %42

; <label>:42                                      ; preds = %58, %40
  %43 = load i32* %tmp, align 4
  %44 = icmp slt i32 %43, 4
  br i1 %44, label %45, label %61

; <label>:45                                      ; preds = %42
  %46 = load i16* %x1, align 2
  %47 = zext i16 %46 to i32
  %48 = load i32* %tmp, align 4
  %49 = sub nsw i32 3, %48
  %50 = ashr i32 %47, %49
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %tmpx, align 2
  %52 = load i16* %tmpx, align 2
  %53 = icmp ne i16 %52, 0
  br i1 %53, label %54, label %57

; <label>:54                                      ; preds = %45
  %55 = load i32* %tmp, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %pos, align 4
  br label %61

; <label>:57                                      ; preds = %45
  br label %58

; <label>:58                                      ; preds = %57
  %59 = load i32* %tmp, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %tmp, align 4
  br label %42

; <label>:61                                      ; preds = %54, %42
  br label %138

; <label>:62                                      ; preds = %36
  %63 = load i16* %x2, align 2
  %64 = zext i16 %63 to i32
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %88

; <label>:66                                      ; preds = %62
  store i32 1, i32* %block, align 4
  %67 = load i16* %x2, align 2
  store i16 %67, i16* %tmpx, align 2
  store i32 0, i32* %tmp, align 4
  br label %68

; <label>:68                                      ; preds = %84, %66
  %69 = load i32* %tmp, align 4
  %70 = icmp slt i32 %69, 4
  br i1 %70, label %71, label %87

; <label>:71                                      ; preds = %68
  %72 = load i16* %x2, align 2
  %73 = zext i16 %72 to i32
  %74 = load i32* %tmp, align 4
  %75 = sub nsw i32 3, %74
  %76 = ashr i32 %73, %75
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %tmpx, align 2
  %78 = load i16* %tmpx, align 2
  %79 = icmp ne i16 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %71
  %81 = load i32* %tmp, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %pos, align 4
  br label %87

; <label>:83                                      ; preds = %71
  br label %84

; <label>:84                                      ; preds = %83
  %85 = load i32* %tmp, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %tmp, align 4
  br label %68

; <label>:87                                      ; preds = %80, %68
  br label %137

; <label>:88                                      ; preds = %62
  %89 = load i16* %x3, align 2
  %90 = zext i16 %89 to i32
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %114

; <label>:92                                      ; preds = %88
  store i32 2, i32* %block, align 4
  %93 = load i16* %x3, align 2
  store i16 %93, i16* %tmpx, align 2
  store i32 0, i32* %tmp, align 4
  br label %94

; <label>:94                                      ; preds = %110, %92
  %95 = load i32* %tmp, align 4
  %96 = icmp slt i32 %95, 4
  br i1 %96, label %97, label %113

; <label>:97                                      ; preds = %94
  %98 = load i16* %x3, align 2
  %99 = zext i16 %98 to i32
  %100 = load i32* %tmp, align 4
  %101 = sub nsw i32 3, %100
  %102 = ashr i32 %99, %101
  %103 = trunc i32 %102 to i16
  store i16 %103, i16* %tmpx, align 2
  %104 = load i16* %tmpx, align 2
  %105 = icmp ne i16 %104, 0
  br i1 %105, label %106, label %109

; <label>:106                                     ; preds = %97
  %107 = load i32* %tmp, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %pos, align 4
  br label %113

; <label>:109                                     ; preds = %97
  br label %110

; <label>:110                                     ; preds = %109
  %111 = load i32* %tmp, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %tmp, align 4
  br label %94

; <label>:113                                     ; preds = %106, %94
  br label %136

; <label>:114                                     ; preds = %88
  store i32 3, i32* %block, align 4
  %115 = load i16* %x4, align 2
  store i16 %115, i16* %tmpx, align 2
  store i32 0, i32* %tmp, align 4
  br label %116

; <label>:116                                     ; preds = %132, %114
  %117 = load i32* %tmp, align 4
  %118 = icmp slt i32 %117, 4
  br i1 %118, label %119, label %135

; <label>:119                                     ; preds = %116
  %120 = load i16* %x4, align 2
  %121 = zext i16 %120 to i32
  %122 = load i32* %tmp, align 4
  %123 = sub nsw i32 3, %122
  %124 = ashr i32 %121, %123
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %tmpx, align 2
  %126 = load i16* %tmpx, align 2
  %127 = icmp ne i16 %126, 0
  br i1 %127, label %128, label %131

; <label>:128                                     ; preds = %119
  %129 = load i32* %tmp, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %pos, align 4
  br label %135

; <label>:131                                     ; preds = %119
  br label %132

; <label>:132                                     ; preds = %131
  %133 = load i32* %tmp, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %tmp, align 4
  br label %116

; <label>:135                                     ; preds = %128, %116
  br label %136

; <label>:136                                     ; preds = %135, %113
  br label %137

; <label>:137                                     ; preds = %136, %87
  br label %138

; <label>:138                                     ; preds = %137, %61
  br label %139

; <label>:139                                     ; preds = %138
  %140 = load i32* %block, align 4
  %141 = mul nsw i32 4, %140
  %142 = load i32* %pos, align 4
  %143 = add nsw i32 %141, %142
  store i32 %143, i32* %B_L, align 4
  store i32 4, i32* %shift, align 4
  %144 = load i32* %B_L, align 4
  %145 = icmp sge i32 %144, 1
  br i1 %145, label %146, label %155

; <label>:146                                     ; preds = %139
  %147 = load i16* %2, align 2
  %148 = zext i16 %147 to i32
  %149 = load i32* %B_L, align 4
  %150 = sub nsw i32 %149, 1
  %151 = shl i32 %148, %150
  %152 = and i32 %151, 32767
  %153 = load i32* %shift, align 4
  %154 = ashr i32 %152, %153
  store i32 %154, i32* %index, align 4
  br label %161

; <label>:155                                     ; preds = %139
  %156 = load i16* %2, align 2
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 32767
  %159 = load i32* %shift, align 4
  %160 = ashr i32 %158, %159
  store i32 %160, i32* %index, align 4
  br label %161

; <label>:161                                     ; preds = %155, %146
  %162 = load i32* %index, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [2049 x i16]* @_ZN2xf12division_lutE, i32 0, i64 %163
  %165 = load i16* %164, align 2
  %166 = zext i16 %165 to i32
  store i32 %166, i32* %val, align 4
  %167 = load i32* %3, align 4
  %168 = add nsw i32 %167, 16
  %169 = load i32* %B_L, align 4
  %170 = sub nsw i32 %168, %169
  %171 = trunc i32 %170 to i8
  %172 = load i8** %4, align 8
  store i8 %171, i8* %172, align 1
  %173 = load i32* %val, align 4
  store i32 %173, i32* %1
  br label %174

; <label>:174                                     ; preds = %161, %33
  %175 = load i32* %1
  ret i32 %175
}

declare %class.ap_uint.2* @_ZN7ap_uintILi45EEaSEj(%class.ap_uint.2*, i32)

declare %class.ap_uint.3* @_ZN7ap_uintILi25EEaSILi90EEERS0_RK6ap_intIXT_EE(%class.ap_uint.3*, %class.ap_int*)

declare { i64, i32 } @_ZmlILi45ELi45EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i48, i48)

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare %class.ap_uint.2* @_ZN7ap_uintILi45EEaSERKS0_(%class.ap_uint.2*, %class.ap_uint.2*)

declare void @_ZN7ap_uintILi45EEC1Ej(%class.ap_uint.2*, i32)

declare i48 @_ZrsILi45EE7ap_uintIXT_EES1_c(i48, i8 signext)

declare i48 @_ZmlILi45EE7ap_uintIXT_EERKS1_j(%class.ap_uint.2*, i32)

declare %class.ap_uint.1* @_ZN7ap_uintILi33EEaSILi45EEERS0_RKS_IXT_EE(%class.ap_uint.1*, %class.ap_uint.2*)

declare i40 @_ZplILi33EE7ap_uintIXT_EEjRKS1_(i32, %class.ap_uint.1*)

declare i40 @_ZmlILi33EE7ap_uintIXT_EEtRKS1_(i16 zeroext, %class.ap_uint.1*)

declare i64 @_ZNK7ap_uintILi33EEcvmEv(%class.ap_uint.1*)

declare i32 @_ZmiILi25EE7ap_uintIXT_EERKS1_j(%class.ap_uint.3*, i32)

declare i64 @_ZNK7ap_uintILi25EEcvmEv(%class.ap_uint.3*)

declare i40 @_ZplILi33EE7ap_uintIXT_EEyRKS1_(i64, %class.ap_uint.1*)

declare i40 @_ZmlILi33EE7ap_uintIXT_EERKS1_t(%class.ap_uint.1*, i16 zeroext)

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

declare void @_ZN7ap_uintILi8EEC1Ev(%class.ap_uint.0*)

declare void @_ZN7ap_uintILi10EEC1Ei(%class.ap_uint.4*, i32)

declare zeroext i1 @_ZltILi10EEb7ap_uintIXT_EEi(i16, i32)

declare void @_ZN7ap_uintILi5EEC1Ei(%class.ap_uint.5*, i32)

declare zeroext i1 @_ZltILi5EEb7ap_uintIXT_EEi(i8, i32)

declare i64 @_ZNK7ap_uintILi10EEcvmEv(%class.ap_uint.4*)

declare i64 @_ZNK7ap_uintILi5EEcvmEv(%class.ap_uint.5*)

declare i8 @_ZN7ap_uintILi5EEppEi(%class.ap_uint.5*, i32)

declare i16 @_ZN7ap_uintILi10EEppEi(%class.ap_uint.4*, i32)

declare void @_ZN7ap_uintILi13EEC1Ei(%class.ap_uint.6*, i32)

declare zeroext i1 @_ZltILi13EEb7ap_uintIXT_EEt(i16, i16 zeroext)

declare %class.ap_uint.0* @_ZN7ap_uintILi8EEaSERKS0_(%class.ap_uint.0*, %class.ap_uint.0*)

define internal i8 @_ZL36p_ZN2xf16Mat_0_256_256_1_4readIEEi_1P19xf_Mat_0_256_256_1_i(%struct.xf_Mat_0_256_256_1_* %this_, i32 %index) nounwind uwtable {
  %1 = alloca %class.ap_uint.0, align 1
  %2 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %3 = alloca i32, align 4
  store %struct.xf_Mat_0_256_256_1_* %this_, %struct.xf_Mat_0_256_256_1_** %2, align 8
  store i32 %index, i32* %3, align 4
  %4 = load i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = load %struct.xf_Mat_0_256_256_1_** %2, align 8
  %7 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %6, i32 0, i32 4
  %8 = getelementptr inbounds [65536 x %class.ap_uint.0]* %7, i32 0, i64 %5
  %9 = bitcast %class.ap_uint.0* %1 to i8*
  %10 = bitcast %class.ap_uint.0* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 1, i32 1, i1 false)
  %11 = getelementptr %class.ap_uint.0* %1, i32 0, i32 0
  %12 = bitcast [1 x i8]* %11 to i8*
  %13 = load i8* %12, align 1
  ret i8 %13
}

declare i32 @_ZplILi13ELi13EE6ap_intIXplT_T0_EE7ap_uintIXT_EES2_IXT0_EE(i16, i16)

declare i16 @_ZmlILi13EE7ap_uintIXT_EERKS1_t(%class.ap_uint.6*, i16 zeroext)

declare i64 @_ZNK6ap_intILi26EEcvlEv(%class.ap_int.7*)

declare zeroext i1 @_ZeqILi13EEb7ap_uintIXT_EEi(i16, i32)

declare %class.ap_uint.0* @_ZN7ap_uintILi8EEaSEi(%class.ap_uint.0*, i32)

declare i32 @_ZplILi26EE6ap_intIXT_EERKS1_i(%class.ap_int.7*, i32)

declare void @_ZN7ap_uintILi9EEC1Ei(%class.ap_uint.8*, i32)

declare %class.ap_uint.8* @_ZN7ap_uintILi9EEaSEi(%class.ap_uint.8*, i32)

declare zeroext i1 @_ZleILi9EEb7ap_uintIXT_EEl(i16, i64)

declare i16 @_ZplILi9EE7ap_uintIXT_EElRKS1_(i64, %class.ap_uint.8*)

declare i16 @_ZmlILi9EE7ap_uintIXT_EElRKS1_(i64, %class.ap_uint.8*)

declare void @_ZN7ap_uintILi8EEC1Ei(%class.ap_uint.0*, i32)

declare %class.ap_uint.0* @_ZN7ap_uintILi8EEaSEm(%class.ap_uint.0*, i64)

declare i64* @_ZN7ap_uintILi8EE5rangeILi9ELi9EEERmRKS_IXT_EERKS_IXT0_EE(%class.ap_uint.0*, %class.ap_uint.8*, %class.ap_uint.8*)

declare i16 @_ZplILi9EE7ap_uintIXT_EERKS1_i(%class.ap_uint.8*, i32)

declare i64 @_ZNK7ap_uintILi8EEcvmEv(%class.ap_uint.0*)

declare i64 @_ZNK7ap_uintILi9EEcvmEv(%class.ap_uint.8*)

declare i16 @_ZN7ap_uintILi9EEppEi(%class.ap_uint.8*, i32)

declare %class.ap_uint.8* @_ZN7ap_uintILi9EEaSEl(%class.ap_uint.8*, i64)

declare %class.ap_uint.6* @_ZN7ap_uintILi13EEaSERKS0_(%class.ap_uint.6*, %class.ap_uint.6*)

declare i16 @_ZplILi13EE7ap_uintIXT_EERKS1_i(%class.ap_uint.6*, i32)

declare i16 @_ZN7ap_uintILi13EEppEi(%class.ap_uint.6*, i32)

declare %class.ap_uint.5* @_ZN7ap_uintILi5EEaSEi(%class.ap_uint.5*, i32)

declare zeroext i1 @_ZleILi5EEb7ap_uintIXT_EEi(i8, i32)

declare i8 @_ZN7ap_uintILi5EEppEv(%class.ap_uint.5*)

define internal void @_ZL108p_ZN2xf11accel_utils11Array2xfMatILi256ELi0ELi256ELi256ELi1EEEP7ap_uintILi256EER3MatILi0ELi256ELi256ELi1EE_1P14xf_accel_utilsP7ap_uintILi256EER19xf_Mat_0_256_256_1_(%struct.xf_accel_utils* %this_, %class.ap_uint* %srcPtr, %struct.xf_Mat_0_256_256_1_* %dstMat) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %class.ap_uint*, align 8
  %3 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %ch_width = alloca i32, align 4
  %strm = alloca %"class.hls::stream", align 1
  %rows = alloca i32, align 4
  %cols = alloca i32, align 4
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %class.ap_uint* %srcPtr, %class.ap_uint** %2, align 8
  store %struct.xf_Mat_0_256_256_1_* %dstMat, %struct.xf_Mat_0_256_256_1_** %3, align 8
  store i32 8, i32* %ch_width, align 4
  call void @_ZN3hls6streamI7ap_uintILi256EEEC1Ev(%"class.hls::stream"* %strm)
  %4 = load %struct.xf_Mat_0_256_256_1_** %3, align 8
  %5 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %4, i32 0, i32 1
  %6 = load i32* %5, align 4
  store i32 %6, i32* %rows, align 4
  %7 = load %struct.xf_Mat_0_256_256_1_** %3, align 8
  %8 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %7, i32 0, i32 2
  %9 = load i32* %8, align 4
  store i32 %9, i32* %cols, align 4
  %10 = load %struct.xf_accel_utils** %1, align 8
  %11 = load %class.ap_uint** %2, align 8
  %12 = load i32* %rows, align 4
  %13 = load i32* %cols, align 4
  call void @_ZL122p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi256ELi256ELi1ELi1ELi8ELi2048EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEii_1P14xf_accel_utilsP7ap_uintILi256EERN3hls6streamIS2_EEii(%struct.xf_accel_utils* %10, %class.ap_uint* %11, %"class.hls::stream"* %strm, i32 %12, i32 %13)
  %14 = load %struct.xf_accel_utils** %1, align 8
  %15 = load %struct.xf_Mat_0_256_256_1_** %3, align 8
  call void @_ZL127p_ZN2xf11accel_utils13hlsStrm2xfMatILi256ELi0ELi256ELi256ELi1ELi65536EEER6streamI7ap_uintILi256EEER3MatILi0ELi256ELi256ELi1EE_1P14xf_accel_utilsRN3hls6streamI7ap_uintILi256EEEER19xf_Mat_0_256_256_1_(%struct.xf_accel_utils* %14, %"class.hls::stream"* %strm, %struct.xf_Mat_0_256_256_1_* %15)
  ret void
}

declare void @_ZN3hls6streamI7ap_uintILi256EEEC1Ev(%"class.hls::stream"*)

define internal void @_ZL122p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi256ELi256ELi1ELi1ELi8ELi2048EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEii_1P14xf_accel_utilsP7ap_uintILi256EERN3hls6streamIS2_EEii(%struct.xf_accel_utils* %this_, %class.ap_uint* %srcPtr, %"class.hls::stream"* %dstStrm, i32 %rows, i32 %cols) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %class.ap_uint*, align 8
  %3 = alloca %"class.hls::stream"*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %pixel_width = alloca i32, align 4
  %loop_count = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %class.ap_uint* %srcPtr, %class.ap_uint** %2, align 8
  store %"class.hls::stream"* %dstStrm, %"class.hls::stream"** %3, align 8
  store i32 %rows, i32* %4, align 4
  store i32 %cols, i32* %5, align 4
  store i32 8, i32* %pixel_width, align 4
  %6 = load i32* %4, align 4
  %7 = load i32* %5, align 4
  %8 = mul nsw i32 %6, %7
  %9 = load i32* %pixel_width, align 4
  %10 = mul nsw i32 %8, %9
  %11 = add nsw i32 %10, 256
  %12 = sub nsw i32 %11, 1
  %13 = sdiv i32 %12, 256
  store i32 %13, i32* %loop_count, align 4
  store i32 0, i32* %i, align 4
  br label %14

; <label>:14                                      ; preds = %24, %0
  %15 = load i32* %i, align 4
  %16 = load i32* %loop_count, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %27

; <label>:18                                      ; preds = %14
  %19 = load %"class.hls::stream"** %3, align 8
  %20 = load i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = load %class.ap_uint** %2, align 8
  %23 = getelementptr inbounds %class.ap_uint* %22, i64 %21
  call void @_ZN3hls6streamI7ap_uintILi256EEE5writeERKS2_(%"class.hls::stream"* %19, %class.ap_uint* %23)
  br label %24

; <label>:24                                      ; preds = %18
  %25 = load i32* %i, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %i, align 4
  br label %14

; <label>:27                                      ; preds = %14
  ret void
}

define internal void @_ZL127p_ZN2xf11accel_utils13hlsStrm2xfMatILi256ELi0ELi256ELi256ELi1ELi65536EEER6streamI7ap_uintILi256EEER3MatILi0ELi256ELi256ELi1EE_1P14xf_accel_utilsRN3hls6streamI7ap_uintILi256EEEER19xf_Mat_0_256_256_1_(%struct.xf_accel_utils* %this_, %"class.hls::stream"* %srcStrm, %struct.xf_Mat_0_256_256_1_* %dstMat) uwtable {
  %1 = alloca %struct.xf_accel_utils*, align 8
  %2 = alloca %"class.hls::stream"*, align 8
  %3 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %rows = alloca i32, align 4
  %cols = alloca i32, align 4
  %loop_count = alloca i32, align 4
  %valid_bits = alloca i32, align 4
  %N_size = alloca i32, align 4
  %r = alloca %class.ap_uint, align 1
  %out = alloca %class.ap_uint.0, align 1
  %i = alloca i32, align 4
  %4 = alloca %class.ap_uint, align 1
  %5 = alloca %class.ap_uint.0, align 1
  store %struct.xf_accel_utils* %this_, %struct.xf_accel_utils** %1, align 8
  store %"class.hls::stream"* %srcStrm, %"class.hls::stream"** %2, align 8
  store %struct.xf_Mat_0_256_256_1_* %dstMat, %struct.xf_Mat_0_256_256_1_** %3, align 8
  %6 = load %struct.xf_Mat_0_256_256_1_** %3, align 8
  %7 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %6, i32 0, i32 1
  %8 = load i32* %7, align 4
  store i32 %8, i32* %rows, align 4
  %9 = load %struct.xf_Mat_0_256_256_1_** %3, align 8
  %10 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %9, i32 0, i32 2
  %11 = load i32* %10, align 4
  store i32 %11, i32* %cols, align 4
  %12 = load i32* %rows, align 4
  %13 = load i32* %cols, align 4
  %14 = mul nsw i32 %12, %13
  %15 = sdiv i32 %14, 1
  store i32 %15, i32* %loop_count, align 4
  store i32 0, i32* %valid_bits, align 4
  store i32 8, i32* %N_size, align 4
  call void @_ZN7ap_uintILi256EEC1Ev(%class.ap_uint* %r)
  call void @_ZN7ap_uintILi8EEC1Ev(%class.ap_uint.0* %out)
  br label %16

; <label>:16                                      ; preds = %0
  store i32 0, i32* %i, align 4
  br label %17

; <label>:17                                      ; preds = %68, %16
  %18 = load i32* %i, align 4
  %19 = load i32* %loop_count, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %71

; <label>:21                                      ; preds = %17
  %22 = load i32* %valid_bits, align 4
  %23 = icmp slt i32 %22, 8
  br i1 %23, label %24, label %48

; <label>:24                                      ; preds = %21
  %25 = load i32* %valid_bits, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %35

; <label>:27                                      ; preds = %24
  %28 = load i32* %valid_bits, align 4
  %29 = sub nsw i32 256, %28
  %30 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 255, i32 %29)
  %31 = load i64* %30
  %32 = load i32* %valid_bits, align 4
  %33 = sub nsw i32 %32, 1
  %34 = call i64* @_ZN7ap_uintILi8EE5rangeEii(%class.ap_uint.0* %out, i32 %33, i32 0)
  store i64 %31, i64* %34
  br label %35

; <label>:35                                      ; preds = %27, %24
  %36 = load %"class.hls::stream"** %2, align 8
  call void @_ZN3hls6streamI7ap_uintILi256EEE4readEv(%class.ap_uint* sret %4, %"class.hls::stream"* %36)
  %37 = call %class.ap_uint* @_ZN7ap_uintILi256EEaSERKS0_(%class.ap_uint* %r, %class.ap_uint* %4)
  %38 = load i32* %valid_bits, align 4
  %39 = sub nsw i32 8, %38
  %40 = sub nsw i32 %39, 1
  %41 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 %40, i32 0)
  %42 = load i64* %41
  %43 = load i32* %valid_bits, align 4
  %44 = call i64* @_ZN7ap_uintILi8EE5rangeEii(%class.ap_uint.0* %out, i32 7, i32 %43)
  store i64 %42, i64* %44
  %45 = load i32* %valid_bits, align 4
  %46 = sub nsw i32 8, %45
  %47 = sub nsw i32 256, %46
  store i32 %47, i32* %valid_bits, align 4
  br label %60

; <label>:48                                      ; preds = %21
  %49 = load i32* %valid_bits, align 4
  %50 = sub nsw i32 256, %49
  %51 = add nsw i32 %50, 8
  %52 = sub nsw i32 %51, 1
  %53 = load i32* %valid_bits, align 4
  %54 = sub nsw i32 256, %53
  %55 = call i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint* %r, i32 %52, i32 %54)
  %56 = load i64* %55
  %57 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSEm(%class.ap_uint.0* %out, i64 %56)
  %58 = load i32* %valid_bits, align 4
  %59 = sub nsw i32 %58, 8
  store i32 %59, i32* %valid_bits, align 4
  br label %60

; <label>:60                                      ; preds = %48, %35
  %61 = load %struct.xf_Mat_0_256_256_1_** %3, align 8
  %62 = load i32* %i, align 4
  %63 = bitcast %class.ap_uint.0* %5 to i8*
  %64 = bitcast %class.ap_uint.0* %out to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 1, i32 1, i1 false)
  %65 = getelementptr %class.ap_uint.0* %5, i32 0, i32 0
  %66 = bitcast [1 x i8]* %65 to i8*
  %67 = load i8* %66, align 1
  call void @_ZL51p_ZN2xf16Mat_0_256_256_1_5writeIEEi7ap_uintILi8EE_1P19xf_Mat_0_256_256_1_i7ap_uintILi8EE(%struct.xf_Mat_0_256_256_1_* %61, i32 %62, i8 %67)
  br label %68

; <label>:68                                      ; preds = %60
  %69 = load i32* %i, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %i, align 4
  br label %17

; <label>:71                                      ; preds = %17
  ret void
}

declare void @_ZN7ap_uintILi256EEC1Ev(%class.ap_uint*)

declare i64* @_ZN7ap_uintILi256EE5rangeEii(%class.ap_uint*, i32, i32)

declare i64* @_ZN7ap_uintILi8EE5rangeEii(%class.ap_uint.0*, i32, i32)

declare %class.ap_uint* @_ZN7ap_uintILi256EEaSERKS0_(%class.ap_uint*, %class.ap_uint*)

declare void @_ZN3hls6streamI7ap_uintILi256EEE4readEv(%class.ap_uint* sret, %"class.hls::stream"*)

define internal void @_ZL51p_ZN2xf16Mat_0_256_256_1_5writeIEEi7ap_uintILi8EE_1P19xf_Mat_0_256_256_1_i7ap_uintILi8EE(%struct.xf_Mat_0_256_256_1_* %this_, i32 %index, i8 %val.coerce) uwtable {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %2 = alloca i32, align 4
  %val = alloca %class.ap_uint.0, align 1
  store %struct.xf_Mat_0_256_256_1_* %this_, %struct.xf_Mat_0_256_256_1_** %1, align 8
  store i32 %index, i32* %2, align 4
  %3 = getelementptr %class.ap_uint.0* %val, i32 0, i32 0
  %4 = bitcast [1 x i8]* %3 to i8*
  store i8 %val.coerce, i8* %4, align 1
  %5 = load i32* %2, align 4
  %6 = sext i32 %5 to i64
  %7 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %8 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %7, i32 0, i32 4
  %9 = getelementptr inbounds [65536 x %class.ap_uint.0]* %8, i32 0, i64 %6
  %10 = call %class.ap_uint.0* @_ZN7ap_uintILi8EEaSERKS0_(%class.ap_uint.0* %9, %class.ap_uint.0* %val)
  ret void
}

declare void @_ZN3hls6streamI7ap_uintILi256EEE5writeERKS2_(%"class.hls::stream"*, %class.ap_uint*)

define internal void @_ZL38p_ZN2xf16Mat_0_256_256_1_4initIEEiib_1P19xf_Mat_0_256_256_1_iib(%struct.xf_Mat_0_256_256_1_* %this_, i32 %_rows, i32 %_cols, i1 zeroext %allocate) nounwind uwtable {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  store %struct.xf_Mat_0_256_256_1_* %this_, %struct.xf_Mat_0_256_256_1_** %1, align 8
  store i32 %_rows, i32* %2, align 4
  store i32 %_cols, i32* %3, align 4
  %5 = zext i1 %allocate to i8
  store i8 %5, i8* %4, align 1
  %6 = load i32* %2, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %18

; <label>:8                                       ; preds = %0
  %9 = load i32* %2, align 4
  %10 = icmp sle i32 %9, 256
  br i1 %10, label %11, label %18

; <label>:11                                      ; preds = %8
  %12 = load i32* %3, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %11
  %15 = load i32* %3, align 4
  %16 = icmp sle i32 %15, 256
  br i1 %16, label %17, label %18

; <label>:17                                      ; preds = %14
  br label %20

; <label>:18                                      ; preds = %14, %11, %8, %0
  call void @__assert_fail(i8* getelementptr inbounds ([143 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str5, i32 0, i32 0), i32 517, i8* getelementptr inbounds ([90 x i8]* @__PRETTY_FUNCTION__._ZL38p_ZN2xf16Mat_0_256_256_1_4initIEEiib_1P19xf_Mat_0_256_256_1_iib, i32 0, i32 0)) noreturn nounwind
  unreachable
                                                  ; No predecessors!
  br label %20

; <label>:20                                      ; preds = %19, %17
  %21 = load i32* %2, align 4
  %22 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %23 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %22, i32 0, i32 1
  store i32 %21, i32* %23, align 4
  %24 = load i32* %3, align 4
  %25 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %26 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %25, i32 0, i32 2
  store i32 %24, i32* %26, align 4
  %27 = load i32* %2, align 4
  %28 = load i32* %3, align 4
  %29 = ashr i32 %28, 0
  %30 = mul nsw i32 %27, %29
  %31 = load %struct.xf_Mat_0_256_256_1_** %1, align 8
  %32 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %31, i32 0, i32 3
  store i32 %30, i32* %32, align 4
  %33 = load i8* %4, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %35, label %36

; <label>:35                                      ; preds = %20
  br label %36

; <label>:36                                      ; preds = %35, %20
  ret void
}

define linkonce_odr void @_ZN19xf_Mat_0_256_256_1_C2Ev(%struct.xf_Mat_0_256_256_1_* %this) unnamed_addr uwtable inlinehint align 2 {
  %1 = alloca %struct.xf_Mat_0_256_256_1_*, align 8
  store %struct.xf_Mat_0_256_256_1_* %this, %struct.xf_Mat_0_256_256_1_** %1, align 8
  %2 = load %struct.xf_Mat_0_256_256_1_** %1
  %3 = getelementptr inbounds %struct.xf_Mat_0_256_256_1_* %2, i32 0, i32 4
  %4 = getelementptr inbounds [65536 x %class.ap_uint.0]* %3, i32 0, i32 0
  %5 = getelementptr inbounds %class.ap_uint.0* %4, i64 65536
  br label %6

; <label>:6                                       ; preds = %6, %0
  %7 = phi %class.ap_uint.0* [ %4, %0 ], [ %8, %6 ]
  call void @_ZN7ap_uintILi8EEC1Ev(%class.ap_uint.0* %7)
  %8 = getelementptr inbounds %class.ap_uint.0* %7, i64 1
  %9 = icmp eq %class.ap_uint.0* %8, %5
  br i1 %9, label %10, label %6

; <label>:10                                      ; preds = %6
  ret void
}
